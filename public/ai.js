// ================================================================================
// üèÜ CVC ITAQUA - FRONTEND CORRIGIDO v4.3.0-fix
// ================================================================================
// Principais corre√ß√µes:
// 1. Valida√ß√£o rigorosa antes de enviar para API
// 2. Tratamento robusto de erros da API
// 3. Logs detalhados para debugging
// 4. Fallback melhorado para casos de falha
// 5. Detec√ß√£o inteligente de tipos de viagem
// ================================================================================

const API_URL = '/api/ai';
const VERSAO_SISTEMA = '4.3.0-fix';

console.log(`‚ö° CVC ITAQUA - FRONTEND CORRIGIDO v${VERSAO_SISTEMA}`);
console.log("üîß Melhorias: Valida√ß√£o rigorosa + Tratamento de erros + Logs detalhados");

let formElements = {};
let custoMeter = {
  orcamentosHoje: 0,
  custoTotalHoje: 0,
  economiaHoje: 0,
  orcamentosTexto: 0,
  orcamentosImagem: 0,
  ultimaAtualizacao: new Date().toDateString(),
  modelosUsados: {
    'claude-3-sonnet': 0,
    'gpt-4o-mini': 0,
    'fallback': 0
  }
};

// ================================================================================
// üîß INICIALIZA√á√ÉO COM VALIDA√á√ÉO
// ================================================================================

document.addEventListener("DOMContentLoaded", function () {
  console.log("üîÑ Iniciando sistema corrigido...");
  
  try {
    // Mapear elementos do DOM com valida√ß√£o
    formElements = {
      form: document.getElementById("orcamentoForm"),
      pasteArea: document.getElementById("pasteArea"),
      previewArea: document.getElementById("previewArea"),
      arquivo: document.getElementById("arquivo"),
      pdfUpload: document.getElementById("pdfUpload")
    };

    // Verificar elementos essenciais
    const elementosEssenciais = ['form'];
    const elementosFaltando = elementosEssenciais.filter(nome => !formElements[nome]);
    
    if (elementosFaltando.length > 0) {
      console.warn("‚ö†Ô∏è Elementos DOM faltando:", elementosFaltando);
    }

    // Configurar event listeners com valida√ß√£o
    if (formElements.form) {
      formElements.form.addEventListener("submit", handleOrcamentoSubmitSeguro);
      console.log("‚úÖ Formul√°rio principal conectado");
    }
    
    if (formElements.arquivo) {
      formElements.arquivo.addEventListener("change", handleFileUploadSeguro);
      console.log("‚úÖ Upload de arquivo conectado");
    }

    if (formElements.pdfUpload) {
      window.analisarPDF = handlePDFAnalysisSeguro;
      console.log("‚úÖ An√°lise de PDF conectada");
    }

    // Inicializar componentes
    setupPasteAreaSegura();
    inicializarMedidorCusto();
    testarConexaoAPISegura();
    
    console.log("‚úÖ Sistema corrigido inicializado com sucesso!");
    
  } catch (error) {
    console.error("‚ùå Erro na inicializa√ß√£o:", error);
    mostrarErroInicializacao(error);
  }
});

// ================================================================================
// üéØ HANDLER PRINCIPAL SEGURO
// ================================================================================

async function handleOrcamentoSubmitSeguro(e) {
  e.preventDefault();
  console.log("üìù [SEGURO] Processando or√ßamento...");
  
  const startTime = Date.now();
  
  try {
    // Mostrar loading
    showLoadingSeguro("Validando dados...");
    
    // VALIDA√á√ÉO RIGOROSA DOS DADOS
    const validacao = validarFormularioCompleto(e.target);
    if (!validacao.valido) {
      throw new Error(`Valida√ß√£o falhou: ${validacao.erros.join(', ')}`);
    }
    
    const formData = validacao.dados;
    console.log("‚úÖ [SEGURO] Dados validados:", {
      tipos: formData.tipos,
      temImagem: formData.temImagem,
      destino: formData.destino,
      tamanhoTexto: formData.observacoes.length
    });
    
    // An√°lise pr√©via
    showLoadingSeguro("Analisando conte√∫do...");
    const analise = analisarConteudoCompleto(formData);
    console.log("üìä [SEGURO] An√°lise:", analise);
    
    // Mostrar estrat√©gia detectada
    const estrategia = formData.temImagem ? 'Claude Sonnet (imagem)' : 'GPT-4o-mini (texto)';
    updateElementSeguro("orcamentoIA", `üéØ Estrat√©gia: ${estrategia}\nüìä ${analise.descricao}`);
    
    // GERA√á√ÉO DO OR√áAMENTO
    showLoadingSeguro("Processando com IA...");
    const response = await generateOrcamentoSeguro(formData, analise);
    
    // Processar m√©tricas se dispon√≠veis
    if (response.metricas) {
      atualizarMetricasHibridas(response.metricas);
      mostrarFeedbackCustoHibrido(response.metricas);
    }
    
    // Funcionalidades auxiliares
    habilitarBotaoDicas();
    
    if (formData.tipos.includes("Hotel")) {
      await generateRankingHoteisSeguro(formData.destino);
    }
    
    const tempoTotal = Date.now() - startTime;
    console.log(`‚úÖ [SEGURO] Or√ßamento gerado com sucesso em ${tempoTotal}ms`);
    
    // Log de sucesso
    logEventoSucesso('orcamento_gerado', {
      estrategia: estrategia,
      tempo_ms: tempoTotal,
      multiplas_opcoes: analise.multiplasOpcoes,
      modelo_usado: response.metricas?.modelo_usado
    });
    
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro no processamento:", error);
    
    // Log de erro detalhado
    logEventoErro('orcamento_falhou', error, {
      tempo_ms: Date.now() - startTime,
      stack: error.stack
    });
    
    // Mostrar erro amig√°vel
    showErrorSeguro(error.message);
    
    // Tentar diagn√≥stico autom√°tico
    setTimeout(() => diagnosticarProblema(error), 1000);
    
  } finally {
    hideLoadingSeguro();
  }
}

// ================================================================================
// üîç VALIDA√á√ÉO RIGOROSA DO FORMUL√ÅRIO
// ================================================================================

function validarFormularioCompleto(form) {
  const erros = [];
  const avisos = [];
  
  try {
    // Extrair dados b√°sicos
    const tipos = Array.from(form.querySelectorAll("input[name='tipo']:checked")).map(el => el.value);
    const destino = form.destino?.value?.trim() || "";
    const adultos = parseInt(form.adultos?.value) || 0;
    const criancas = parseInt(form.criancas?.value) || 0;
    const observacoes = form.observacoes?.value?.trim() || "";
    
    // Valida√ß√µes obrigat√≥rias
    if (tipos.length === 0) {
      erros.push("Selecione pelo menos um tipo de servi√ßo");
    }
    
    if (adultos < 1 || adultos > 10) {
      erros.push("N√∫mero de adultos deve estar entre 1 e 10");
    }
    
    if (criancas < 0 || criancas > 10) {
      erros.push("N√∫mero de crian√ßas deve estar entre 0 e 10");
    }
    
    // Validar idades das crian√ßas se especificadas
    let idadesCriancas = [];
    for (let i = 1; i <= criancas; i++) {
      const idadeInput = document.getElementById(`idade_crianca_${i}`);
      if (idadeInput) {
        const idade = parseInt(idadeInput.value);
        if (isNaN(idade) || idade < 0 || idade > 17) {
          avisos.push(`Idade da crian√ßa ${i} inv√°lida ou n√£o informada`);
        } else {
          idadesCriancas.push(idade);
        }
      }
    }
    
    // Validar conte√∫do de imagem
    const arquivoBase64 = formElements.previewArea?.dataset.fileData || "";
    const temImagem = !!(arquivoBase64 && arquivoBase64.startsWith('data:image/'));
    
    if (temImagem) {
      const validacaoImagem = validarImagemCompleta(arquivoBase64);
      if (!validacaoImagem.valida) {
        erros.push(`Imagem inv√°lida: ${validacaoImagem.erro}`);
      }
    }
    
    // Validar conte√∫do textual
    const textoColado = formElements.pasteArea?.innerText?.trim() || '';
    const conteudoTotal = (observacoes + ' ' + textoColado).trim();
    
    if (!temImagem && conteudoTotal.length < 10) {
      avisos.push("Pouco conte√∫do fornecido - resultado pode ser gen√©rico");
    }
    
    // Log de avisos
    if (avisos.length > 0) {
      console.warn("‚ö†Ô∏è [VALIDA√á√ÉO] Avisos:", avisos);
    }
    
    if (erros.length > 0) {
      console.error("‚ùå [VALIDA√á√ÉO] Erros:", erros);
      return { valido: false, erros: erros, avisos: avisos };
    }
    
    // Retornar dados validados
    return {
      valido: true,
      erros: [],
      avisos: avisos,
      dados: {
        destino: destino || "(Destino n√£o informado)",
        adultos: adultos.toString(),
        criancas: criancas.toString(),
        idades: idadesCriancas.join(', '),
        observacoes: observacoes,
        tipos: tipos,
        textoColado: textoColado,
        arquivoBase64: arquivoBase64,
        temImagem: temImagem
      }
    };
    
  } catch (error) {
    console.error("‚ùå [VALIDA√á√ÉO] Erro interno:", error);
    return {
      valido: false,
      erros: [`Erro interno na valida√ß√£o: ${error.message}`],
      avisos: []
    };
  }
}

// ================================================================================
// üñºÔ∏è VALIDA√á√ÉO ESPEC√çFICA DE IMAGENS
// ================================================================================

function validarImagemCompleta(base64String) {
  try {
    if (!base64String || typeof base64String !== 'string') {
      return { valida: false, erro: 'String base64 inv√°lida' };
    }
    
    if (!base64String.startsWith('data:image/')) {
      return { valida: false, erro: 'N√£o √© uma imagem base64 v√°lida' };
    }
    
    const match = base64String.match(/data:(image\/[^;]+);base64,(.+)/);
    if (!match || !match[1] || !match[2]) {
      return { valida: false, erro: 'Formato base64 incorreto' };
    }
    
    const mimeType = match[1];
    const base64Data = match[2];
    
    // Verificar tipos suportados
    const tiposSuportados = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!tiposSuportados.includes(mimeType)) {
      return { valida: false, erro: `Tipo ${mimeType} n√£o suportado. Use: ${tiposSuportados.join(', ')}` };
    }
    
    // Verificar se √© base64 v√°lido
    try {
      atob(base64Data.substring(0, 100)); // Testar decodifica√ß√£o
    } catch (e) {
      return { valida: false, erro: 'Dados base64 corrompidos' };
    }
    
    // Verificar tamanho
    const sizeInBytes = base64Data.length * 0.75;
    const sizeInMB = sizeInBytes / (1024 * 1024);
    
    if (sizeInMB > 5) {
      return { valida: false, erro: `Arquivo muito grande: ${sizeInMB.toFixed(2)}MB. M√°ximo: 5MB` };
    }
    
    if (sizeInMB < 0.001) {
      return { valida: false, erro: 'Arquivo muito pequeno - pode estar corrompido' };
    }
    
    return { 
      valida: true, 
      mimeType, 
      tamanhoMB: sizeInMB.toFixed(2),
      tamanhoBase64: base64Data.length
    };
    
  } catch (error) {
    return { valida: false, erro: `Erro na valida√ß√£o: ${error.message}` };
  }
}

// ================================================================================
// üìä AN√ÅLISE COMPLETA DO CONTE√öDO
// ================================================================================

function analisarConteudoCompleto(formData) {
  const textoCompleto = `${formData.observacoes} ${formData.textoColado}`.trim();
  
  // An√°lise de m√∫ltiplas op√ß√µes
  const multiplasOpcoes = detectarMultiplasOpcoesAvancado(textoCompleto);
  
  // An√°lise de tipo de viagem
  const tipoViagem = analisarTipoViagemDetalhado(textoCompleto);
  
  // An√°lise de qualidade do conte√∫do
  const qualidade = analisarQualidadeConteudo(textoCompleto, formData.temImagem);
  
  // Contadores gerais
  const precos = (textoCompleto.match(/r\$[\d.,]+/gi) || []).length;
  const horarios = (textoCompleto.match(/\d{2}:\d{2}/g) || []).length;
  const datas = (textoCompleto.match(/\d{2}\/\d{2}|\d{2} de \w+/gi) || []).length;
  const companhias = (textoCompleto.match(/(gol|latam|azul|avianca|tap)/gi) || []).length;
  
  let descricao = '';
  if (multiplasOpcoes.detectado) {
    descricao = `M√∫ltiplas op√ß√µes detectadas (${multiplasOpcoes.quantidade} op√ß√µes)`;
  } else {
    descricao = `Op√ß√£o √∫nica - ${tipoViagem.tipo}`;
  }
  
  if (formData.temImagem) {
    descricao += ' | Processamento visual';
  }
  
  return {
    multiplasOpcoes: multiplasOpcoes.detectado,
    quantidadeOpcoes: multiplasOpcoes.quantidade,
    tipoViagem: tipoViagem.tipo,
    confiancaTipo: tipoViagem.confianca,
    qualidadeConteudo: qualidade.nivel,
    contadores: {
      precos: precos,
      horarios: horarios,
      datas: datas,
      companhias: companhias
    },
    descricao: descricao,
    recomendacoes: qualidade.recomendacoes
  };
}

function detectarMultiplasOpcoesAvancado(texto) {
  if (!texto) return { detectado: false, quantidade: 0 };
  
  const textoLower = texto.toLowerCase();
  
  // Contadores mais precisos
  const precos = (textoLower.match(/r\$.*?\d{1,3}[\.,]\d{3}/gi) || []).length;
  const totais = (textoLower.match(/total.*\d+.*adult/gi) || []).length;
  const companhias = (textoLower.match(/(gol|latam|azul|avianca|tap)/gi) || []).length;
  const horarios = (textoLower.match(/\d{2}:\d{2}/g) || []).length;
  const links = (textoLower.match(/https:\/\/www\.cvc\.com\.br\/carrinho/gi) || []).length;
  const opcoes = (textoLower.match(/op√ß√£o \d+|option \d+/gi) || []).length;
  
  // L√≥gica de detec√ß√£o mais inteligente
  let quantidade = Math.max(precos, totais, companhias, links, opcoes);
  
  // Se h√° muitos hor√°rios, pode ser ida+volta de m√∫ltiplas op√ß√µes
  if (horarios >= 4 && quantidade < 2) {
    quantidade = Math.ceil(horarios / 2);
  }
  
  const detectado = quantidade >= 2;
  
  return {
    detectado: detectado,
    quantidade: detectado ? quantidade : 1,
    indicadores: {
      precos: precos,
      totais: totais,
      companhias: companhias,
      horarios: horarios,
      links: links,
      opcoes: opcoes
    }
  };
}

function analisarTipoViagemDetalhado(texto) {
  if (!texto) return { tipo: 'ida_volta', confianca: 0 };
  
  const textoLower = texto.toLowerCase();
  
  // Indicadores espec√≠ficos
  const somenteIda = (textoLower.match(/somente ida|s√≥ ida|one way/gi) || []).length;
  const idaVolta = (textoLower.match(/ida.*volta|ida.*retorno/gi) || []).length;
  const voosVolta = (textoLower.match(/volta.*\d{2}:\d{2}/gi) || []).length;
  const datasMultiplas = (textoLower.match(/\d{2}\/\d{2}|\d{2} de \w+/gi) || []).length;
  
  let pontuacao = 0;
  let tipo = 'ida_volta';
  
  // An√°lise de pontua√ß√£o
  if (somenteIda > 0) {
    pontuacao += 5 * somenteIda;
    tipo = 'somente_ida';
  }
  
  if (idaVolta > 0) {
    pontuacao += 3 * idaVolta;
    tipo = 'ida_volta';
  }
  
  if (voosVolta > 0) {
    pontuacao += 2 * voosVolta;
    tipo = 'ida_volta';
  }
  
  // Se n√£o h√° indicadores claros, usar heur√≠stica de datas
  if (pontuacao === 0) {
    if (datasMultiplas >= 2) {
      tipo = 'ida_volta';
      pontuacao = 1;
    } else {
      tipo = 'somente_ida';
      pontuacao = 1;
    }
  }
  
  return {
    tipo: tipo,
    confianca: pontuacao,
    indicadores: {
      somenteIda: somenteIda,
      idaVolta: idaVolta,
      voosVolta: voosVolta,
      datasMultiplas: datasMultiplas
    }
  };
}

function analisarQualidadeConteudo(texto, temImagem) {
  const tamanho = texto.length;
  const recomendacoes = [];
  let nivel = 'baixa';
  
  if (temImagem) {
    nivel = 'alta';
    recomendacoes.push('Imagem detectada - an√°lise visual ser√° realizada');
  } else if (tamanho > 500) {
    nivel = 'alta';
    recomendacoes.push('Conte√∫do textual rico detectado');
  } else if (tamanho > 100) {
    nivel = 'media';
    recomendacoes.push('Conte√∫do adequado - considere adicionar mais detalhes');
  } else {
    nivel = 'baixa';
    recomendacoes.push('Pouco conte√∫do - adicione mais informa√ß√µes ou uma imagem');
  }
  
  // Verificar presen√ßa de dados estruturados
  const temPrecos = /r\$[\d.,]+/gi.test(texto);
  const temHorarios = /\d{2}:\d{2}/g.test(texto);
  const temDatas = /\d{2}\/\d{2}|\d{2} de \w+/gi.test(texto);
  
  if (temPrecos && temHorarios && temDatas) {
    recomendacoes.push('Dados estruturados completos detectados');
  } else {
    const faltando = [];
    if (!temPrecos) faltando.push('pre√ßos');
    if (!temHorarios) faltando.push('hor√°rios');
    if (!temDatas) faltando.push('datas');
    
    if (faltando.length > 0) {
      recomendacoes.push(`Considere adicionar: ${faltando.join(', ')}`);
    }
  }
  
  return {
    nivel: nivel,
    tamanho: tamanho,
    recomendacoes: recomendacoes
  };
}

// ================================================================================
// üîó COMUNICA√á√ÉO SEGURA COM API
// ================================================================================

async function generateOrcamentoSeguro(formData, analise) {
  console.log("ü§ñ [SEGURO] Gerando or√ßamento...");
  
  const textoCompleto = `${formData.observacoes} ${formData.textoColado}`.trim();
  
  // Construir prompt baseado na an√°lise
  let promptEspecializado = construirPromptEspecializado(formData, analise);
  
  try {
    const response = await callAISegura(promptEspecializado, 'orcamento', formData);
    
    if (!response || !response.choices || !response.choices[0] || !response.choices[0].message) {
      throw new Error('Resposta da API em formato inv√°lido');
    }
    
    const conteudo = response.choices[0].message.content;
    if (!conteudo || conteudo.trim().length === 0) {
      throw new Error('Conte√∫do da resposta est√° vazio');
    }
    
    updateElementSeguro("orcamentoIA", conteudo);
    
    console.log("‚úÖ [SEGURO] Or√ßamento gerado:", {
      tamanho: conteudo.length,
      modelo: response.metricas?.modelo_usado,
      multiplas: analise.multiplasOpcoes
    });
    
    return response;
    
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro na gera√ß√£o:", error);
    throw new Error(`Falha na gera√ß√£o do or√ßamento: ${error.message}`);
  }
}

function construirPromptEspecializado(formData, analise) {
  const textoCompleto = `${formData.observacoes} ${formData.textoColado}`.trim();
  
  let prompt = `Dados do or√ßamento:
Destino: ${formData.destino}
Adultos: ${formData.adultos}
Crian√ßas: ${formData.criancas}${formData.idades ? ` (idades: ${formData.idades} anos)` : ''}
Tipos selecionados: ${formData.tipos.join(', ')}

AN√ÅLISE PR√âVIA:
- M√∫ltiplas op√ß√µes: ${analise.multiplasOpcoes ? 'SIM' : 'N√ÉO'}
- Tipo de viagem: ${analise.tipoViagem}
- Qualidade do conte√∫do: ${analise.qualidadeConteudo}

DADOS ESPEC√çFICOS DA VIAGEM:
${textoCompleto}

INSTRU√á√ïES IMPORTANTES:
`;

  if (analise.multiplasOpcoes) {
    prompt += `
- M√öLTIPLAS OP√á√ïES DETECTADAS: Formate TODAS as ${analise.quantidadeOpcoes} op√ß√µes encontradas
- Use se√ß√µes numeradas (OP√á√ÉO 1, OP√á√ÉO 2, etc.)
- Cada op√ß√£o deve ter dados completos e distintos
`;
  } else {
    prompt += `
- OP√á√ÉO √öNICA: Formate apenas uma op√ß√£o de forma clara e completa
- N√£o invente informa√ß√µes de volta se for somente ida
`;
  }

  if (analise.tipoViagem === 'somente_ida') {
    prompt += `
- ATEN√á√ÉO: Esta √© uma passagem SOMENTE IDA
- N√ÉO inclua informa√ß√µes de volta inexistentes
- Deixe claro que √© "somente ida" no formato final
`;
  }

  if (analise.recomendacoes.length > 0) {
    prompt += `
- Observa√ß√µes da an√°lise: ${analise.recomendacoes.join('; ')}
`;
  }

  return prompt;
}

async function callAISegura(prompt, tipo, extraData = {}) {
  console.log("üîÑ [SEGURO] Enviando para API...");
  
  // Valida√ß√£o pr√©via dos dados
  if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
    throw new Error('Prompt obrigat√≥rio para chamada da API');
  }
  
  if (extraData.temImagem && (!extraData.arquivoBase64 || !extraData.arquivoBase64.startsWith('data:image/'))) {
    throw new Error('Arquivo de imagem obrigat√≥rio quando temImagem=true');
  }
  
  const requestData = {
    prompt: prompt.trim(),
    tipo: tipo || 'orcamento',
    destino: extraData.destino || 'N√£o informado',
    tipos: Array.isArray(extraData.tipos) ? extraData.tipos : [],
    temImagem: Boolean(extraData.temImagem),
    arquivo: extraData.temImagem ? extraData.arquivoBase64 : undefined
  };
  
  console.log("üì§ [SEGURO] Dados da requisi√ß√£o:", {
    prompt_length: requestData.prompt.length,
    tipo: requestData.tipo,
    temImagem: requestData.temImagem,
    arquivo_length: requestData.arquivo?.length || 0
  });
  
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': `CVC-Itaqua-Frontend/${VERSAO_SISTEMA}`
      },
      body: JSON.stringify(requestData)
    });

    console.log("üìä [SEGURO] Status da resposta:", response.status, response.statusText);

    // Verificar se a resposta √© OK
    if (!response.ok) {
      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
      
      try {
        const errorText = await response.text();
        console.error("‚ùå [SEGURO] Erro da API:", errorText);
        
        // Tentar parsear erro como JSON
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.error?.message || errorJson.error || errorMessage;
        } catch (jsonError) {
          // Se n√£o for JSON, usar o texto do erro
          errorMessage = errorText.substring(0, 200);
        }
      } catch (readError) {
        console.error("‚ùå [SEGURO] Erro ao ler resposta de erro:", readError);
      }
      
      throw new Error(errorMessage);
    }

    // Ler e parsear resposta
    const responseText = await response.text();
    console.log("üìÑ [SEGURO] Resposta recebida:", responseText.substring(0, 200) + "...");
    
    let data;
    try {
      data = JSON.parse(responseText);
    } catch (jsonError) {
      console.error("‚ùå [SEGURO] Erro ao parsear JSON:", jsonError);
      throw new Error(`Resposta da API n√£o √© JSON v√°lido: ${jsonError.message}`);
    }
    
    // Validar estrutura da resposta
    if (!data || typeof data !== 'object') {
      throw new Error('Resposta da API n√£o √© um objeto v√°lido');
    }
    
    if (data.success === false) {
      const errorMsg = data.error?.message || data.error || 'Erro desconhecido da API';
      throw new Error(errorMsg);
    }
    
    if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
      throw new Error('Resposta da API n√£o cont√©m choices v√°lidas');
    }
    
    if (!data.choices[0].message || !data.choices[0].message.content) {
      throw new Error('Resposta da API n√£o cont√©m conte√∫do v√°lido');
    }
    
    console.log("‚úÖ [SEGURO] Resposta v√°lida recebida");
    
    // Log das m√©tricas se dispon√≠veis
    if (data.metricas) {
      console.log("üìä [SEGURO] M√©tricas:", {
        modelo: data.metricas.modelo_usado,
        estrategia: data.metricas.estrategia,
        tokens: data.metricas.tokens?.total,
        custo: data.metricas.custo?.brl
      });
    }
    
    return data;
    
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro na comunica√ß√£o:", error);
    
    // Categorizar tipo de erro
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      throw new Error('Erro de conex√£o - verifique sua internet e tente novamente');
    } else if (error.message.includes('JSON')) {
      throw new Error('Erro na comunica√ß√£o com o servidor - resposta inv√°lida');
    } else {
      throw error;
    }
  }
}

// ================================================================================
// üé® INTERFACE SEGURA E FEEDBACK
// ================================================================================

function updateElementSeguro(id, content) {
  try {
    const element = document.getElementById(id);
    if (!element) {
      console.warn(`‚ö†Ô∏è [SEGURO] Elemento '${id}' n√£o encontrado`);
      return false;
    }
    
    if (typeof content !== 'string') {
      console.warn(`‚ö†Ô∏è [SEGURO] Conte√∫do inv√°lido para '${id}':`, typeof content);
      content = String(content);
    }
    
    element.innerText = content;
    console.log(`üìù [SEGURO] Elemento '${id}' atualizado (${content.length} chars)`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå [SEGURO] Erro ao atualizar elemento '${id}':`, error);
    return false;
  }
}

function showLoadingSeguro(mensagem = "Processando...") {
  const sucesso = updateElementSeguro("orcamentoIA", `ü§ñ ${mensagem}`);
  if (!sucesso) {
    console.warn("‚ö†Ô∏è [SEGURO] N√£o foi poss√≠vel mostrar loading");
  }
}

function hideLoadingSeguro() {
  // Loading ser√° substitu√≠do pelo conte√∫do real
  console.log("üîÑ [SEGURO] Loading ocultado");
}

function showErrorSeguro(message) {
  const errorMessage = `‚ùå Erro: ${message}`;
  const sucesso = updateElementSeguro("orcamentoIA", errorMessage);
  
  if (!sucesso) {
    // Fallback: mostrar alert se n√£o conseguir atualizar elemento
    alert(errorMessage);
  }
  
  console.error("‚ùå [SEGURO] Erro mostrado:", message);
}

function mostrarErroInicializacao(error) {
  const container = document.body || document.documentElement;
  
  const errorDiv = document.createElement('div');
  errorDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    border-radius: 8px;
    padding: 15px;
    max-width: 400px;
    font-family: monospace;
    font-size: 12px;
    z-index: 10000;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  `;
  
  errorDiv.innerHTML = `
    <strong>‚ùå Erro de Inicializa√ß√£o</strong><br>
    ${error.message}<br><br>
    <small>Recarregue a p√°gina ou contate o suporte.</small>
    <button onclick="this.parentElement.remove()" style="float: right; margin-left: 10px;">√ó</button>
  `;
  
  container.appendChild(errorDiv);
  
  // Remover ap√≥s 10 segundos
  setTimeout(() => {
    if (errorDiv.parentElement) {
      errorDiv.remove();
    }
  }, 10000);
}

// ================================================================================
// üîß FUNCIONALIDADES AUXILIARES SEGURAS
// ================================================================================

async function generateRankingHoteisSeguro(destino) {
  if (!destino || destino.trim().length === 0) {
    console.warn("‚ö†Ô∏è [SEGURO] Destino vazio para ranking de hot√©is");
    return;
  }
  
  console.log("üè® [SEGURO] Gerando ranking de hot√©is...");
  
  const prompt = `Crie um ranking dos 5 melhores hot√©is em ${destino} para fam√≠lias.

Formato:
üèÜ 1. Nome do Hotel - ‚≠ê‚≠ê‚≠ê‚≠ê
üìç Regi√£o/Localiza√ß√£o
üí∞ Faixa de pre√ßo aproximada
‚≠ê Principais diferenciais

Use informa√ß√µes realistas e atuais.`;

  try {
    const response = await callAISegura(prompt, 'ranking', { destino });
    updateElementSeguro("rankingIA", response.choices[0].message.content);
    console.log("‚úÖ [SEGURO] Ranking de hot√©is gerado");
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro no ranking:", error);
    updateElementSeguro("rankingIA", `‚ùå Erro ao gerar ranking: ${error.message}`);
  }
}

async function handlePDFAnalysisSeguro() {
  if (!formElements.pdfUpload) {
    console.error("‚ùå [SEGURO] Elemento pdfUpload n√£o encontrado");
    alert("Erro: Sistema de upload n√£o dispon√≠vel");
    return;
  }
  
  const file = formElements.pdfUpload.files[0];
  if (!file) {
    alert("Selecione um arquivo primeiro!");
    return;
  }

  console.log("üìÑ [SEGURO] Analisando arquivo:", file.name, file.size, "bytes");
  
  // Valida√ß√µes do arquivo
  if (file.size > 10 * 1024 * 1024) { // 10MB
    alert("Arquivo muito grande. M√°ximo: 10MB");
    return;
  }
  
  const tiposPermitidos = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg'];
  if (!tiposPermitidos.includes(file.type)) {
    alert(`Tipo de arquivo n√£o suportado: ${file.type}\nPermitidos: PDF, JPG, PNG`);
    return;
  }
  
  showLoadingSeguro("Analisando arquivo...");
  
  try {
    const base64 = await fileToBase64Seguro(file);
    const prompt = `Analise este relat√≥rio da CVC e extraia:
    
1. üìä Principais m√©tricas de vendas
2. üéØ Metas vs realizado
3. üèÜ Produtos mais vendidos
4. üí° Recomenda√ß√µes pr√°ticas

Formato executivo para a filial 6220.`;

    const response = await callAISegura(prompt, 'analise', { 
      temImagem: true, 
      arquivoBase64: base64 
    });
    
    updateElementSeguro("analiseIA", response.choices[0].message.content);
    
    const container = document.getElementById('analiseContainer');
    if (container) {
      container.style.display = 'block';
    }
    
    console.log("‚úÖ [SEGURO] An√°lise de PDF conclu√≠da");
    
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro na an√°lise:", error);
    updateElementSeguro("analiseIA", `‚ùå Erro: ${error.message}`);
  } finally {
    hideLoadingSeguro();
  }
}

async function handleFileUploadSeguro(e) {
  const file = e.target.files[0];
  if (!file) return;

  console.log("üìÅ [SEGURO] Arquivo selecionado:", file.name, file.size, "bytes");

  try {
    // Valida√ß√µes b√°sicas
    if (!file.type.startsWith('image/')) {
      throw new Error('Apenas arquivos de imagem s√£o aceitos (PNG, JPG, JPEG)');
    }

    if (file.size > 5 * 1024 * 1024) {
      throw new Error('Arquivo muito grande. M√°ximo: 5MB');
    }

    if (file.size < 1024) {
      throw new Error('Arquivo muito pequeno. Pode estar corrompido');
    }

    // Converter para base64
    showLoadingSeguro("Processando imagem...");
    const base64 = await fileToBase64Seguro(file);
    
    // Validar resultado
    const validacao = validarImagemCompleta(base64);
    if (!validacao.valida) {
      throw new Error(validacao.erro);
    }
    
    // Armazenar dados
    if (formElements.previewArea) {
      formElements.previewArea.dataset.fileData = base64;
      
      // Criar preview
      const img = document.createElement('img');
      img.src = base64;
      img.style.maxWidth = '100%';
      img.style.borderRadius = '8px';
      img.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
      
      formElements.previewArea.innerHTML = `
        <p>‚úÖ Imagem carregada - Claude Sonnet ready!</p>
        <div style="font-size: 12px; color: #666; margin: 5px 0;">
          üìä ${validacao.mimeType} | ${validacao.tamanhoMB}MB | üü† An√°lise visual
        </div>
      `;
      formElements.previewArea.appendChild(img);
    }
    
    console.log('‚úÖ [SEGURO] Imagem processada:', validacao.tamanhoMB, 'MB');
    
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro no upload:", error);
    
    if (formElements.previewArea) {
      formElements.previewArea.innerHTML = `<p>‚ùå Erro: ${error.message}</p>`;
    }
    
    alert(`Erro ao processar imagem: ${error.message}`);
  } finally {
    hideLoadingSeguro();
  }
}

function fileToBase64Seguro(file) {
  return new Promise((resolve, reject) => {
    if (!file || !(file instanceof File)) {
      reject(new Error('Arquivo inv√°lido'));
      return;
    }
    
    const reader = new FileReader();
    
    reader.onload = () => {
      try {
        const result = reader.result;
        if (!result || typeof result !== 'string') {
          reject(new Error('Resultado da leitura inv√°lido'));
          return;
        }
        resolve(result);
      } catch (error) {
        reject(new Error(`Erro no processamento: ${error.message}`));
      }
    };
    
    reader.onerror = () => {
      reject(new Error('Erro ao ler arquivo - arquivo pode estar corrompido'));
    };
    
    reader.onabort = () => {
      reject(new Error('Leitura do arquivo cancelada'));
    };
    
    // Timeout de 30 segundos
    const timeout = setTimeout(() => {
      reader.abort();
      reject(new Error('Timeout na leitura do arquivo (30s)'));
    }, 30000);
    
    reader.onloadend = () => {
      clearTimeout(timeout);
    };
    
    reader.readAsDataURL(file);
  });
}

// ================================================================================
// üîç DIAGN√ìSTICO E LOGS
// ================================================================================

function diagnosticarProblema(error) {
  console.log("üîç [DIAGN√ìSTICO] Analisando erro...");
  
  const diagnosticos = [];
  
  // Verificar conectividade
  if (error.message.includes('fetch') || error.message.includes('network')) {
    diagnosticos.push('‚ùå Problema de conex√£o detectado');
    diagnosticos.push('üí° Verifique sua conex√£o com a internet');
  }
  
  // Verificar problemas da API
  if (error.message.includes('500') || error.message.includes('servidor')) {
    diagnosticos.push('‚ùå Erro interno do servidor');
    diagnosticos.push('üí° Tente novamente em alguns minutos');
  }
  
  // Verificar problemas de dados
  if (error.message.includes('undefined') || error.message.includes('null')) {
    diagnosticos.push('‚ùå Dados mal formatados detectados');
    diagnosticos.push('üí° Verifique se todos os campos est√£o preenchidos');
  }
  
  // Verificar problemas de imagem
  if (error.message.includes('imagem') || error.message.includes('base64')) {
    diagnosticos.push('‚ùå Problema com o arquivo de imagem');
    diagnosticos.push('üí° Tente uma imagem menor ou em outro formato');
  }
  
  if (diagnosticos.length > 0) {
    console.log("üîç [DIAGN√ìSTICO] Problemas encontrados:", diagnosticos);
    
    // Mostrar diagn√≥stico para o usu√°rio
    setTimeout(() => {
      const diagnosticoTexto = diagnosticos.join('\n');
      updateElementSeguro("orcamentoIA", 
        `‚ùå Erro detectado\n\nüîç DIAGN√ìSTICO:\n${diagnosticoTexto}\n\nüîÑ Tente novamente ou recarregue a p√°gina.`
      );
    }, 2000);
  }
}

function logEventoSucesso(evento, dados) {
  console.log(`‚úÖ [EVENTO] ${evento}:`, dados);
  
  // Em produ√ß√£o, isso poderia enviar para analytics
  if (typeof gtag !== 'undefined') {
    gtag('event', evento, dados);
  }
}

function logEventoErro(evento, error, contexto) {
  console.error(`‚ùå [EVENTO] ${evento}:`, {
    message: error.message,
    stack: error.stack,
    contexto: contexto
  });
  
  // Em produ√ß√£o, isso poderia enviar para sistema de monitoramento
  if (typeof Sentry !== 'undefined') {
    Sentry.captureException(error, { extra: contexto });
  }
}

// ================================================================================
// üß™ TESTE DE CONEX√ÉO SEGURO
// ================================================================================

async function testarConexaoAPISegura() {
  try {
    console.log("üß™ [SEGURO] Testando API...");
    
    const response = await fetch(API_URL, { 
      method: 'GET',
      headers: {
        'User-Agent': `CVC-Itaqua-Frontend/${VERSAO_SISTEMA}`
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ [SEGURO] API Online:", {
        status: data.message,
        version: data.version,
        modelos: data.modelos
      });
    } else {
      console.warn("‚ö†Ô∏è [SEGURO] API com problemas:", response.status, response.statusText);
    }
  } catch (error) {
    console.error("‚ùå [SEGURO] Erro na conex√£o:", error.message);
  }
}

// ================================================================================
// üéØ FUN√á√ïES PRINCIPAIS MANTIDAS (compatibilidade)
// ================================================================================

// Manter fun√ß√µes originais para compatibilidade
function copiarTexto(id) {
  const elemento = document.getElementById(id);
  if (!elemento) {
    console.error("‚ùå Elemento n√£o encontrado:", id);
    alert("Elemento n√£o encontrado!");
    return;
  }
  
  const texto = elemento.innerText;
  
  if (navigator.clipboard && window.isSecureContext) {
    navigator.clipboard.writeText(texto).then(() => {
      console.log("‚úÖ Texto copiado:", id);
      mostrarFeedbackCopia(event.target, "‚úÖ Copiado!");
    }).catch(err => {
      console.warn("‚ùå Clipboard falhou:", err);
      tentarCopiaAlternativa(texto, event.target);
    });
  } else {
    tentarCopiaAlternativa(texto, event.target);
  }
}

function tentarCopiaAlternativa(texto, button) {
  try {
    const textArea = document.createElement('textarea');
    textArea.value = texto;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    
    textArea.focus();
    textArea.select();
    
    const successful = document.execCommand('copy');
    document.body.removeChild(textArea);
    
    if (successful) {
      console.log("‚úÖ Copiado via execCommand");
      mostrarFeedbackCopia(button, "‚úÖ Copiado!");
    } else {
      throw new Error("execCommand falhou");
    }
  } catch (err) {
    console.error("‚ùå C√≥pia falhou:", err);
    mostrarFeedbackCopia(button, "‚ùå Erro");
  }
}

function mostrarFeedbackCopia(button, texto) {
  if (!button) return;
  
  const originalText = button.innerText;
  button.innerText = texto;
  button.style.background = '#28a745';
  
  setTimeout(() => {
    button.innerText = originalText;
    button.style.background = '';
  }, 2000);
}

function habilitarBotaoDicas() {
  const btnGerar = document.getElementById('btnGerarDicas');
  if (btnGerar) {
    btnGerar.disabled = false;
    console.log("‚úÖ Bot√£o dicas habilitado");
  }
}

function atualizarIdadesCriancas() {
  const qtdeCriancas = parseInt(document.getElementById('criancas').value) || 0;
  const container = document.getElementById('containerIdadesCriancas');
  const camposContainer = document.getElementById('camposIdadesCriancas');
  
  if (qtdeCriancas > 0) {
    container.style.display = 'block';
    camposContainer.innerHTML = '';
    
    for (let i = 1; i <= qtdeCriancas; i++) {
      const div = document.createElement('div');
      div.style.marginBottom = '0.5rem';
      div.innerHTML = `
        <label for="idade_crianca_${i}" style="display: inline-block; width: 120px;">Crian√ßa ${i}:</label>
        <input type="number" id="idade_crianca_${i}" name="idade_crianca_${i}" 
               min="0" max="17" placeholder="Idade" 
               style="width: 80px; margin-right: 10px;">
        <small style="color: #666;">anos</small>
      `;
      camposContainer.appendChild(div);
    }
  } else {
    container.style.display = 'none';
    camposContainer.innerHTML = '';
  }
}

async function gerarDicasDestino() {
  const destino = document.getElementById('destino').value;
  const orcamentoTexto = document.getElementById('orcamentoIA').innerText;
  
  if (!destino) {
    alert('Informe um destino primeiro!');
    return;
  }
  
  const btnGerar = document.getElementById('btnGerarDicas');
  const btnCopiar = document.getElementById('btnCopiarDicas');
  
  btnGerar.disabled = true;
  btnGerar.innerText = 'ü§ñ Gerando...';
  
  try {
    let contextoData = '';
    if (orcamentoTexto && orcamentoTexto !== 'Preencha o formul√°rio acima para gerar o or√ßamento...') {
      contextoData = `\n\nCONTEXTO DA VIAGEM:\n${orcamentoTexto.substring(0, 300)}...`;
    }
    
    const prompt = `Crie dicas personalizadas sobre ${destino} para WhatsApp da CVC.${contextoData}
    
Inclua:
- Principais atra√ß√µes e pontos tur√≠sticos
- Melhor √©poca para visitar (considerando a √©poca da viagem se informada)
- Dicas de clima e o que levar
- Informa√ß√µes pr√°ticas (moeda, documenta√ß√£o, fuso hor√°rio)
- Tom vendedor mas informativo
- M√°ximo 250 palavras
- Use emojis para deixar atrativo

Se h√° datas espec√≠ficas na viagem, adapte as dicas para essa √©poca do ano.`;

    const response = await callAISegura(prompt, 'destino', { destino });
    document.getElementById('destinoIA').innerText = response.choices[0].message.content;
    
    btnCopiar.style.display = 'inline-block';
    console.log("‚úÖ Dicas do destino geradas!");
    
  } catch (error) {
    console.error("‚ùå Erro ao gerar dicas:", error);
    document.getElementById('destinoIA').innerText = "‚ùå Erro ao gerar dicas: " + error.message;
  } finally {
    btnGerar.disabled = false;
    btnGerar.innerText = 'üéØ Gerar Dicas';
  }
}

// ================================================================================
// üé® SISTEMA DE PASTE AREA SEGURO
// ================================================================================

function setupPasteAreaSegura() {
  if (!formElements.pasteArea) {
    console.warn("‚ö†Ô∏è [SEGURO] PasteArea n√£o encontrada");
    return;
  }
  
  formElements.pasteArea.addEventListener('paste', function (e) {
    console.log("üìã [SEGURO] Conte√∫do sendo colado...");
    
    e.preventDefault();
    
    try {
      const items = (e.clipboardData || e.originalEvent.clipboardData).items;
      
      for (let i = 0; i < items.length; i++) {
        const item = items[i];

        if (item.type.indexOf('image') !== -1) {
          console.log("üñºÔ∏è [SEGURO] Imagem detectada");
          
          const blob = item.getAsFile();
          
          if (!blob) {
            console.error("‚ùå [SEGURO] Falha ao obter blob da imagem");
            continue;
          }
          
          // Validar tamanho do blob
          if (blob.size > 5 * 1024 * 1024) {
            alert('Imagem muito grande (m√°x: 5MB)');
            continue;
          }
          
          const reader = new FileReader();
          
          reader.onload = function (event) {
            try {
              const base64Data = event.target.result;
              
              // Validar imagem
              const validacao = validarImagemCompleta(base64Data);
              if (!validacao.valida) {
                formElements.previewArea.innerHTML = `<p>‚ùå ${validacao.erro}</p>`;
                return;
              }
              
              // Criar preview
              const img = document.createElement('img');
              img.src = base64Data;
              img.style.maxWidth = '100%';
              img.style.borderRadius = '8px';
              img.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';
              
              formElements.previewArea.innerHTML = `
                <p>‚úÖ Imagem colada - Claude Sonnet ready!</p>
                <div style="font-size: 12px; color: #666; margin: 5px 0;">
                  üìä ${validacao.mimeType} | ${validacao.tamanhoMB}MB | üü† An√°lise visual
                </div>
              `;
              formElements.previewArea.appendChild(img);
              formElements.previewArea.dataset.fileData = base64Data;
              
              console.log('‚úÖ [SEGURO] Imagem colada processada');
              
            } catch (error) {
              console.error('‚ùå [SEGURO] Erro ao processar imagem colada:', error);
              formElements.previewArea.innerHTML = '<p>‚ùå Erro ao processar imagem</p>';
            }
          };
          
          reader.onerror = function() {
            console.error('‚ùå [SEGURO] Erro ao ler imagem colada');
            formElements.previewArea.innerHTML = '<p>‚ùå Erro ao ler imagem</p>';
          };
          
          reader.readAsDataURL(blob);
          break;
          
        } else if (item.type === 'text/plain') {
          item.getAsString(function (text) {
            if (text && text.trim().length > 0) {
              formElements.previewArea.innerHTML = `
                <p>üìù Texto colado - GPT-4o-mini ready!</p>
                <div style="font-size: 12px; color: #666;">${text.substring(0, 100)}...</div>
              `;
              console.log('üìù [SEGURO] Texto colado processado:', text.length, 'caracteres');
            }
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå [SEGURO] Erro no paste:', error);
      formElements.previewArea.innerHTML = '<p>‚ùå Erro ao processar conte√∫do colado</p>';
    }
  });
  
  // Efeitos visuais seguros
  formElements.pasteArea.addEventListener('dragover', function(e) {
    e.preventDefault();
    this.style.borderColor = '#003399';
    this.style.backgroundColor = '#e9ecef';
    this.textContent = 'üìé Solte aqui - Sistema seguro!';
  });

  formElements.pasteArea.addEventListener('dragleave', function(e) {
    this.style.borderColor = '#007bff';
    this.style.backgroundColor = '#f8f9fa';
    this.textContent = 'üìå Clique ou Ctrl+V | üîµ Texto‚ÜíGPT-4o-mini | üü† Imagem‚ÜíClaude';
  });

  formElements.pasteArea.addEventListener('drop', function(e) {
    e.preventDefault();
    console.log('üìé [SEGURO] Arquivo dropado');
    
    try {
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        const mockEvent = { target: { files: [file] } };
        handleFileUploadSeguro(mockEvent);
      }
    } catch (error) {
      console.error('‚ùå [SEGURO] Erro no drop:', error);
    }
    
    // Resetar visual
    this.style.borderColor = '#007bff';
    this.style.backgroundColor = '#f8f9fa';
    this.textContent = 'üìå Clique ou Ctrl+V | üîµ Texto‚ÜíGPT-4o-mini | üü† Imagem‚ÜíClaude';
  });
  
  console.log("‚úÖ [SEGURO] PasteArea configurada");
}

// ================================================================================
// üí∞ SISTEMA DE MEDIDOR DE CUSTO (mantido igual)
// ================================================================================

function inicializarMedidorCusto() {
  try {
    console.log("üí∞ [CUSTO] Inicializando medidor...");
    
    const dadosSalvos = localStorage.getItem('cvc_custo_meter_hybrid');
    if (dadosSalvos) {
      const dados = JSON.parse(dadosSalvos);
      
      if (dados.ultimaAtualizacao === new Date().toDateString()) {
        custoMeter = { ...custoMeter, ...dados };
        console.log("üí∞ [CUSTO] Dados carregados");
      } else {
        console.log("üí∞ [CUSTO] Novo dia, resetando contador");
        resetarContadorDiario();
      }
    }
    
    criarWidgetCusto();
    atualizarWidgetCusto();
    
  } catch (error) {
    console.error("‚ùå [CUSTO] Erro ao inicializar:", error);
    resetarContadorDiario();
  }
}

function criarWidgetCusto() {
  if (document.getElementById('custoWidgetHibrido')) return;
  
  const widget = document.createElement('div');
  widget.id = 'custoWidgetHibrido';
  widget.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    padding: 10px 14px;
    border-radius: 10px;
    font-size: 12px;
    font-weight: 600;
    box-shadow: 0 3px 15px rgba(0,0,0,0.2);
    z-index: 1001;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid rgba(255,255,255,0.2);
    min-width: 160px;
  `;
  
  widget.addEventListener('mouseenter', function() {
    this.style.transform = 'scale(1.05)';
    this.style.boxShadow = '0 5px 25px rgba(0,0,0,0.3)';
  });
  
  widget.addEventListener('mouseleave', function() {
    this.style.transform = 'scale(1)';
    this.style.boxShadow = '0 3px 15px rgba(0,0,0,0.2)';
  });
  
  widget.addEventListener('click', mostrarDashboardCompleto);
  
  document.body.appendChild(widget);
  console.log("‚úÖ [CUSTO] Widget criado");
}

function atualizarWidgetCusto() {
  const widget = document.getElementById('custoWidgetHibrido');
  if (!widget) return;
  
  const economiaTexto = custoMeter.economiaHoje > 0 ? 
    ` | üí∞ -${custoMeter.economiaHoje.toFixed(2)}` : '';
  
  widget.innerHTML = `
    <div style="text-align: center;">
      <div style="font-size: 13px; font-weight: bold;">üí∞ Hoje: R$ ${custoMeter.custoTotalHoje.toFixed(3)}</div>
      <div style="font-size: 10px; opacity: 0.9; margin-top: 2px;">
        üìä ${custoMeter.orcamentosHoje} or√ßamentos${economiaTexto}
      </div>
      <div style="font-size: 9px; opacity: 0.8; margin-top: 1px;">
        üîµ${custoMeter.orcamentosTexto} texto | üü†${custoMeter.orcamentosImagem} imagem
      </div>
    </div>
  `;
}

function mostrarDashboardCompleto() {
  const custoMedio = custoMeter.orcamentosHoje > 0 ? 
    custoMeter.custoTotalHoje / custoMeter.orcamentosHoje : 0;
  
  const projecaoMensal = custoMeter.custoTotalHoje * 30;
  const eficiencia = custoMeter.orcamentosHoje > 0 ? 
    ((custoMeter.orcamentosTexto / custoMeter.orcamentosHoje) * 100).toFixed(1) : 0;
  
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
  `;
  
  modal.innerHTML = `
    <div style="background: white; padding: 2rem; border-radius: 12px; 
                max-width: 600px; text-align: center; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
      <h3 style="color: #003399; margin-bottom: 1.5rem;">üìä Dashboard H√≠brido - Custos IA</h3>
      
      <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-bottom: 1.5rem;">
        
        <div style="background: #e3f2fd; padding: 1rem; border-radius: 8px;">
          <div style="font-size: 1.4rem; font-weight: bold; color: #1976d2;">
            R$ ${custoMeter.custoTotalHoje.toFixed(3)}
          </div>
          <div style="font-size: 0.9rem; color: #666;">Custo Total Hoje</div>
        </div>
        
        <div style="background: #e8f5e8; padding: 1rem; border-radius: 8px;">
          <div style="font-size: 1.4rem; font-weight: bold; color: #388e3c;">
            ${custoMeter.orcamentosHoje}
          </div>
          <div style="font-size: 0.9rem; color: #666;">Or√ßamentos</div>
        </div>
        
        <div style="background: #fff3e0; padding: 1rem; border-radius: 8px;">
          <div style="font-size: 1.4rem; font-weight: bold; color: #f57c00;">
            R$ ${custoMedio.toFixed(4)}
          </div>
          <div style="font-size: 0.9rem; color: #666;">Custo M√©dio</div>
        </div>
        
      </div>
      
      <button onclick="this.parentElement.parentElement.remove()" 
              style="background: #003399; color: white; border: none; 
                     padding: 0.5rem 1.5rem; border-radius: 6px; cursor: pointer;">
        Fechar Dashboard
      </button>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  modal.addEventListener('click', function(e) {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

function atualizarMetricasHibridas(metricas) {
  try {
    const hoje = new Date().toDateString();
    if (custoMeter.ultimaAtualizacao !== hoje) {
      resetarContadorDiario();
    }
    
    custoMeter.orcamentosHoje++;
    custoMeter.custoTotalHoje += metricas.custo.brl;
    custoMeter.economiaHoje += metricas.economia.vs_gpt4o_brl || 0;
    custoMeter.ultimaAtualizacao = hoje;
    
    if (metricas.estrategia && metricas.estrategia.includes('Claude')) {
      custoMeter.orcamentosImagem++;
      custoMeter.modelosUsados['claude-3-sonnet']++;
    } else {
      custoMeter.orcamentosTexto++;
      custoMeter.modelosUsados['gpt-4o-mini']++;
    }
    
    salvarMedidorCusto();
    atualizarWidgetCusto();
    
    console.log("üìä [M√âTRICAS] Atualizadas:", {
      estrategia: metricas.estrategia,
      modelo: metricas.modelo_usado,
      custo: `R$ ${metricas.custo.brl.toFixed(4)}`,
      total_hoje: `R$ ${custoMeter.custoTotalHoje.toFixed(3)}`
    });
    
  } catch (error) {
    console.error("‚ùå [M√âTRICAS] Erro ao atualizar:", error);
  }
}

function mostrarFeedbackCustoHibrido(metricas) {
  const feedbackElement = document.getElementById('custoFeedbackHibrido');
  
  if (!feedbackElement) {
    const feedback = document.createElement('div');
    feedback.id = 'custoFeedbackHibrido';
    feedback.style.cssText = `
      background: linear-gradient(135deg, #e8f5e8, #c8e6c9);
      border: 1px solid #4caf50;
      border-radius: 8px;
      padding: 0.8rem;
      margin-top: 1rem;
      font-size: 0.85rem;
      color: #2e7d32;
    `;
    
    const orcamentoSection = document.querySelector('.output-section');
    if (orcamentoSection) {
      orcamentoSection.appendChild(feedback);
    }
  }
  
  const feedback = document.getElementById('custoFeedbackHibrido');
  if (feedback) {
    const economiaTexto = metricas.economia.vs_gpt4o_brl > 0 ? 
      ` | üí∞ Economia: R$ ${metricas.economia.vs_gpt4o_brl.toFixed(4)}` : '';
    
    const estrategiaIcon = metricas.estrategia && metricas.estrategia.includes('Claude') ? 'üü†' : 'üîµ';
    
    feedback.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <span>
          ${estrategiaIcon} <strong>${metricas.modelo_usado}</strong> | 
          üí∞ Custo: <strong>R$ ${metricas.custo.brl.toFixed(4)}</strong>${economiaTexto}
        </span>
        <span style="font-size: 0.75rem; opacity: 0.8;">
          üìä ${metricas.tokens.total} tokens | ‚ö° ${metricas.performance?.tempo_processamento_ms}ms
        </span>
      </div>
      <div style="font-size: 0.75rem; margin-top: 0.5rem; opacity: 0.8;">
        üéØ ${metricas.estrategia}
      </div>
    `;
  }
}

function salvarMedidorCusto() {
  try {
    localStorage.setItem('cvc_custo_meter_hybrid', JSON.stringify(custoMeter));
  } catch (error) {
    console.error("‚ùå [CUSTO] Erro ao salvar:", error);
  }
}

function resetarContadorDiario() {
  custoMeter = {
    orcamentosHoje: 0,
    custoTotalHoje: 0,
    economiaHoje: 0,
    orcamentosTexto: 0,
    orcamentosImagem: 0,
    ultimaAtualizacao: new Date().toDateString(),
    modelosUsados: {
      'claude-3-sonnet': 0,
      'gpt-4o-mini': 0,
      'fallback': 0
    }
  };
  salvarMedidorCusto();
}

// ================================================================================
// üìä LOGS FINAIS E INICIALIZA√á√ÉO
// ================================================================================

console.log(`üöÄ Sistema CVC Itaqua v${VERSAO_SISTEMA} carregado!`);
console.log("üîß Melhorias implementadas:");
console.log("   ‚úÖ Valida√ß√£o rigorosa de dados");
console.log("   ‚úÖ Tratamento robusto de erros");
console.log("   ‚úÖ Diagn√≥stico autom√°tico de problemas");
console.log("   ‚úÖ Logs detalhados para debugging");
console.log("   ‚úÖ Detec√ß√£o inteligente de tipos de viagem");
console.log("   ‚úÖ Sistema de fallback melhorado");
console.log("üéØ Sistema pronto para uso seguro!");

// Exportar fun√ß√µes para debug (apenas em desenvolvimento)
if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
  window.debugCVC = {
    validarFormulario: validarFormularioCompleto,
    analisarConteudo: analisarConteudoCompleto,
    validarImagem: validarImagemCompleta,
    diagnosticar: diagnosticarProblema,
    resetarCusto: resetarContadorDiario,
    versao: VERSAO_SISTEMA
  };
  console.log("üß™ [DEBUG] Fun√ß√µes de debug dispon√≠veis em window.debugCVC");
}
