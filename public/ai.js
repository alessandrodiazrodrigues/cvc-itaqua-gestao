// ================================================================================
// üéØ SISTEMA DE IA PARA OR√áAMENTOS CVC ITAQUA - VERS√ÉO CORRIGIDA FASE 2
// ================================================================================
// ‚úÖ CORRE√á√ïES IMPLEMENTADAS:
// 1. Limpeza de cabe√ßalhos t√©cnicos aprimorada
// 2. Convers√£o autom√°tica de aeroportos (remove redund√¢ncias)
// 3. Sistema de links condicionais (s√≥ mostra quando existir)
// 4. Detec√ß√£o melhorada de m√∫ltiplas op√ß√µes
// 5. Distin√ß√£o correta ida/volta vs somente ida
// 6. Templates espec√≠ficos para cruzeiros
// 7. Prompts otimizados para GPT-4
// ================================================================================

console.log("üöÄ [FASE 2] Sistema de IA Corrigido carregando...");

// ================================================================================
// üîß CONFIGURA√á√ïES E VARI√ÅVEIS GLOBAIS
// ================================================================================

let formElements = {};
let custoMeter = {
  orcamentosHoje: 0,
  custoTotalHoje: 0,
  economiaHoje: 0,
  orcamentosTexto: 0,
  orcamentosImagem: 0,
  ultimaAtualizacao: new Date().toDateString(),
  modelosUsados: {
    'claude-3-sonnet': 0,
    'gpt-4o-mini': 0,
    'fallback': 0
  }
};

// ================================================================================
// üîß INICIALIZA√á√ÉO
// ================================================================================

document.addEventListener("DOMContentLoaded", function () {
  console.log("üîÑ [FASE 2] Iniciando sistema corrigido...");

  try {
    formElements = {
      form: document.getElementById("orcamentoForm"),
      pasteArea: document.getElementById("pasteArea"),
      previewArea: document.getElementById("previewArea"),
      arquivo: document.getElementById("arquivo"),
      pdfUpload: document.getElementById("pdfUpload")
    };

    if (!formElements.form) {
      console.warn("‚ö†Ô∏è Formul√°rio principal n√£o encontrado");
      return;
    }

    formElements.form.addEventListener("submit", handleOrcamentoCorrigido);
    console.log("‚úÖ Formul√°rio principal conectado");

    if (formElements.arquivo) {
      formElements.arquivo.addEventListener("change", handleFileUploadCorrigido);
    }

    if (formElements.pdfUpload) {
      window.analisarPDF = handlePDFAnalysisCorrigido;
    }

    setupPasteAreaCorrigida();
    inicializarMedidorCusto();
    testarConexaoAPICorrigida();

    console.log("‚úÖ [FASE 2] Sistema corrigido inicializado!");

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro na inicializa√ß√£o:", error);
  }
});

// ================================================================================
// üéØ FUN√á√ÉO PRINCIPAL CORRIGIDA - HANDLE OR√áAMENTO
// ================================================================================

async function handleOrcamentoCorrigido(event) {
  event.preventDefault();
  
  const startTime = Date.now();
  console.log("üéØ [FASE 2] Iniciando processamento corrigido...");

  try {
    // VALIDA√á√ÉO CORRIGIDA
    const formData = coletarDadosFormularioCorrigido(event.target);
    const errosValidacao = validarFormularioCorrigido(formData);
    
    if (errosValidacao.length > 0) {
      throw new Error(`Erros de valida√ß√£o: ${errosValidacao.join(', ')}`);
    }

    // AN√ÅLISE APRIMORADA
    const analise = analisarConteudoCorrigido(formData);
    console.log("üìä [FASE 2] An√°lise corrigida:", analise);

    // ESTRAT√âGIA DE IA
    const estrategia = formData.temImagem ? 
      'Claude Sonnet (imagem)' : 'GPT-4o-mini (texto)';
    console.log(`üéØ [FASE 2] Estrat√©gia: ${estrategia}`);

    // GERA√á√ÉO DO OR√áAMENTO CORRIGIDO
    showLoadingCorrigido("Gerando or√ßamento com corre√ß√µes aplicadas...");
    const response = await generateOrcamentoCorrigido(formData, analise);

    if (response.metricas) {
      atualizarMetricasCorrigidas(response.metricas);
      console.log("üí∞ [FASE 2] Custo:", `R$ ${response.metricas.custo.brl.toFixed(4)}`);
    }

    habilitarBotaoDicas();

    if (formData.tipos.includes("Hotel")) {
        const btnRanking = document.getElementById('btnGerarRanking');
        if (btnRanking) {
            btnRanking.disabled = false;
        }
    }

    const tempoTotal = Date.now() - startTime;
    console.log(`‚úÖ [FASE 2] Or√ßamento gerado em ${tempoTotal}ms`);

    logEventoSucesso('orcamento_fase2_gerado', {
      estrategia: estrategia,
      tempo_ms: tempoTotal,
      tipo_viagem_detectado: analise.tipoViagem,
      ida_volta_corrigido: analise.isIdaVolta,
      modelo_usado: response.metricas?.modelo_usado
    });

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro no processamento:", error);
    showErrorCorrigido(error.message);

  } finally {
    hideLoadingCorrigido();
  }
}

// ================================================================================
// üìä COLETA DE DADOS APRIMORADA
// ================================================================================

function coletarDadosFormularioCorrigido(form) {
  const tipos = Array.from(form.querySelectorAll("input[name='tipo']:checked"))
    .map(el => el.value);
  
  const destino = form.destino?.value?.trim() || "";
  const adultos = parseInt(form.adultos?.value) || null;
  const criancas = parseInt(form.criancas?.value) || 0;
  
  // Coletar idades das crian√ßas
  const idadesCriancas = [];
  if (criancas > 0) {
    for (let i = 1; i <= criancas; i++) {
      const idade = parseInt(form[`idade_crianca_${i}`]?.value) || null;
      if (idade !== null) {
        idadesCriancas.push(idade);
      }
    }
  }

  const observacoes = form.observacoes?.value?.trim() || "";
  
  // Dados da √°rea de paste/arquivo
  const pasteArea = document.getElementById("pasteArea");
  const conteudoPaste = pasteArea?.innerText?.trim() || "";
  
  // Verificar se tem imagem
  const temImagem = Boolean(
    document.querySelector("#previewArea img") || 
    formElements.arquivo?.files?.length > 0
  );

  // NOVA FUNCIONALIDADE: Configura√ß√£o de parcelamento
  const configParcelamento = obterConfigParcelamento ? 
    obterConfigParcelamento() : { incluir10x: false, incluir12x: false };

  return {
    tipos,
    destino,
    adultos,
    criancas,
    idadesCriancas,
    observacoes,
    conteudoPaste,
    temImagem,
    parcelamento: configParcelamento
  };
}

// ================================================================================
// üîç AN√ÅLISE DE CONTE√öDO CORRIGIDA - FASE 2
// ================================================================================

function analisarConteudoCorrigido(formData) {
  const textoCompleto = `${formData.observacoes} ${formData.conteudoPaste}`.trim();
  
  console.log("üîç [FASE 2] Analisando conte√∫do:", {
    tamanho: textoCompleto.length,
    temImagem: formData.temImagem,
    tipos: formData.tipos
  });

  // DETEC√á√ÉO APRIMORADA DE M√öLTIPLAS OP√á√ïES
  const indicadoresMultiplas = detectarMultiplasOpcoes(textoCompleto);
  
  // DETEC√á√ÉO CORRIGIDA IDA E VOLTA
  const idaVoltaInfo = detectarIdaVolta(textoCompleto);
  
  // DETEC√á√ÉO DE ESCALAS MANTIDA
  const temEscalas = detectarEscalas(textoCompleto);
  
  // AN√ÅLISE DE PRE√áOS E COMPANHIAS
  const indicadoresPreco = analisarPrecos(textoCompleto);

  return {
    tipoViagem: determinarTipoViagem(formData.tipos, textoCompleto),
    isIdaVolta: idaVoltaInfo.isIdaVolta,
    confiancaIdaVolta: idaVoltaInfo.confianca,
    temEscalas,
    multiplasOpcoes: indicadoresMultiplas,
    confiancaTipoViagem: 'alta',
    indicadoresPreco
  };
}

// ================================================================================
// üéØ NOVA FUNCIONALIDADE - DETEC√á√ÉO DE M√öLTIPLAS OP√á√ïES
// ================================================================================

function detectarMultiplasOpcoes(texto) {
  if (!texto) return { temMultiplas: false, quantidade: 1 };

  const textoLower = texto.toLowerCase();
  
  // Indicadores expl√≠citos de m√∫ltiplas op√ß√µes
  const padroes = [
    /op√ß√£o\s*\d+/gi,
    /alternativa\s*\d+/gi,
    /\d+[¬™¬∫]?\s*op√ß√£o/gi,
    /voo\s*\d+/gi,
    /flight\s*\d+/gi
  ];

  let opcoes = [];
  
  padroes.forEach(padrao => {
    const matches = texto.match(padrao);
    if (matches) {
      opcoes.push(...matches);
    }
  });

  // Detectar m√∫ltiplos pre√ßos distintos
  const precos = texto.match(/r\$\s*[\d.,]+/gi) || [];
  const precosUnicos = [...new Set(precos)];

  // Detectar m√∫ltiplas companhias a√©reas
  const companhias = ['latam', 'gol', 'azul', 'avianca', 'american', 'delta', 'united'];
  const companhiasEncontradas = companhias.filter(cia => 
    textoLower.includes(cia)
  );

  const quantidade = Math.max(
    opcoes.length,
    precosUnicos.length > 1 ? precosUnicos.length : 1,
    companhiasEncontradas.length > 1 ? companhiasEncontradas.length : 1
  );

  return {
    temMultiplas: quantidade > 1,
    quantidade,
    opcoes,
    precos: precosUnicos,
    companhias: companhiasEncontradas
  };
}

// ================================================================================
// ‚úàÔ∏è DETEC√á√ÉO IDA E VOLTA CORRIGIDA
// ================================================================================

function detectarIdaVolta(texto) {
  if (!texto) return { isIdaVolta: false, confianca: 'baixa' };

  const textoLower = texto.toLowerCase();
  
  // Indicadores FORTES de ida e volta
  const indicadoresIdaVolta = [
    'ida e volta',
    'round trip',
    'return',
    'retorno',
    'volta:',
    'return:',
    'going back',
    'de volta'
  ];

  // Indicadores FORTES de somente ida
  const indicadoresSomenteIda = [
    'somente ida',
    's√≥ ida',
    'one way',
    'single',
    'apenas ida'
  ];

  const temIndicadorIdaVolta = indicadoresIdaVolta.some(ind => 
    textoLower.includes(ind)
  );

  const temIndicadorSomenteIda = indicadoresSomenteIda.some(ind => 
    textoLower.includes(ind)
  );

  // Se tem indicador expl√≠cito, usar ele
  if (temIndicadorIdaVolta) {
    return { isIdaVolta: true, confianca: 'alta' };
  }
  
  if (temIndicadorSomenteIda) {
    return { isIdaVolta: false, confianca: 'alta' };
  }

  // Detec√ß√£o por padr√µes de data/hor√°rio
  const padroesDatas = texto.match(/\d{1,2}[\/\-]\d{1,2}/g) || [];
  const datasUnicas = [...new Set(padroesDatas)];

  const padroesHorarios = texto.match(/\d{1,2}:\d{2}/g) || [];
  const horariosUnicos = [...new Set(padroesHorarios)];

  // Se tem m√∫ltiplas datas/hor√°rios distintos, provavelmente ida e volta
  if (datasUnicas.length >= 2 || horariosUnicos.length >= 4) {
    return { isIdaVolta: true, confianca: 'm√©dia' };
  }

  // Padr√£o conservador: assumir somente ida se n√£o h√° evid√™ncia clara
  return { isIdaVolta: false, confianca: 'baixa' };
}

// ================================================================================
// üí∞ AN√ÅLISE DE PRE√áOS APRIMORADA
// ================================================================================

function analisarPrecos(texto) {
  const precos = texto.match(/r\$\s*[\d.,]+/gi) || [];
  const links = texto.match(/https?:\/\/[^\s]+/gi) || [];
  const companhias = [];
  
  const companhiasConhecidas = [
    'latam', 'gol', 'azul', 'avianca', 'american', 'delta', 
    'united', 'lufthansa', 'air france', 'klm', 'iberia',
    'msc', 'costa', 'disney cruise', 'ncl'
  ];

  companhiasConhecidas.forEach(cia => {
    if (texto.toLowerCase().includes(cia)) {
      companhias.push(cia);
    }
  });

  const totais = texto.match(/total[:\s]*r\$\s*[\d.,]+/gi) || [];

  return {
    precos,
    links,
    companhias,
    totais,
    quantidade: Math.max(precos.length, 1),
    indicadores: { precos, totais, companhias, links }
  };
}

// ================================================================================
// üîç DETEC√á√ÉO DE ESCALAS MANTIDA
// ================================================================================

function detectarEscalas(texto) {
  if (!texto) return false;

  const textoLower = texto.toLowerCase();

  const indicadoresEscalas = [
    'uma escala', 'duas escalas', 'tr√™s escalas',
    'conex√£o', 'conexao', 'escala em', 'via ',
    'com escala', 'parada em', 'troca em'
  ];

  const temIndicadorExplicito = indicadoresEscalas.some(indicador =>
    textoLower.includes(indicador)
  );

  const padraoEscala = /\d+h\s*\d+min.*escala|escala.*\d+h|via\s+\w{3,}/i;
  const temPadraoEscala = padraoEscala.test(texto);

  const temposVoo = texto.match(/(\d+)h\s*(\d+)?min/gi) || [];
  const temVooLongo = temposVoo.some(tempo => {
    const match = tempo.match(/(\d+)h/);
    return match && parseInt(match[1]) >= 5;
  });

  return temIndicadorExplicito || temPadraoEscala || temVooLongo;
}

// ================================================================================
// ü§ñ GERA√á√ÉO DE OR√áAMENTO CORRIGIDO
// ================================================================================

async function generateOrcamentoCorrigido(formData, analise) {
  console.log("ü§ñ [FASE 2] Gerando or√ßamento com corre√ß√µes...");

  try {
    const response = await callAICorrigida(formData, analise);

    if (!response || !response.choices || !response.choices[0] || !response.choices[0].message) {
      throw new Error('Resposta da API em formato inv√°lido');
    }

    let conteudo = response.choices[0].message.content;
    if (!conteudo || conteudo.trim().length === 0) {
      throw new Error('Conte√∫do da resposta est√° vazio');
    }

    // APLICAR TODAS AS CORRE√á√ïES DA FASE 2
    conteudo = limparCabecalhosTecnicos(conteudo);
    conteudo = converterAeroportos(conteudo);
    conteudo = aplicarLinksCondicionais(conteudo);
    conteudo = limparFormatacao(conteudo);

    updateElementCorrigido("orcamentoIA", conteudo);

    console.log("‚úÖ [FASE 2] Or√ßamento gerado com corre√ß√µes:", {
      tamanho: conteudo.length,
      modelo: response.metricas?.modelo_usado,
      tipo_detectado: analise.tipoViagem,
      ida_volta: analise.isIdaVolta,
      multiplas: analise.multiplasOpcoes.quantidade
    });

    return response;

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro na gera√ß√£o:", error);
    throw new Error(`Falha na gera√ß√£o do or√ßamento: ${error.message}`);
  }
}

// ================================================================================
// üîó COMUNICA√á√ÉO CORRIGIDA COM API
// ================================================================================

async function callAICorrigida(formData, analise) {
  console.log("üîÑ [FASE 2] Enviando para API com prompt corrigido...");

  const requestData = {
    prompt: construirPromptCorrigido(formData, analise),
    tipoRequisicao: 'orcamento_fase2',
    destino: formData.destino || 'Detectar automaticamente',
    tipos: Array.isArray(formData.tipos) ? formData.tipos : [],
    temImagem: Boolean(formData.temImagem),
    arquivo: formData.temImagem ? "imagem_anexada" : null,
    metadata: {
      versao: 'fase2_corrigida',
      multiplas_opcoes: analise.multiplasOpcoes.quantidade,
      ida_volta: analise.isIdaVolta
    }
  };

  try {
    const response = await fetch('/api/ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData)
    });

    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status}`);
    }

    const data = await response.json();
    console.log("‚úÖ [FASE 2] Resposta da API recebida");
    return data;

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro na API:", error);
    throw new Error(`Erro de comunica√ß√£o: ${error.message}`);
  }
}

// ================================================================================
// üìù CONSTRU√á√ÉO DE PROMPT CORRIGIDO - FASE 2
// ================================================================================

function construirPromptCorrigido(formData, analise) {
  console.log("üìù [FASE 2] Construindo prompt com corre√ß√µes espec√≠ficas...");

  const textoCompleto = `${formData.observacoes} ${formData.conteudoPaste}`.trim();
  
  let prompt = `SISTEMA DE OR√áAMENTOS CVC ITAQUA - VERS√ÉO CORRIGIDA FASE 2

INSTRU√á√ïES CR√çTICAS PARA M√öLTIPLAS OP√á√ïES:
${analise.multiplasOpcoes.temMultiplas ? `
‚ö†Ô∏è ATEN√á√ÉO: DETECTADAS ${analise.multiplasOpcoes.quantidade} OP√á√ïES DISTINTAS
1. üîç Analise CADA op√ß√£o separadamente
2. üìä Numere como "OP√á√ÉO 1", "OP√á√ÉO 2", etc.
3. üí∞ Mantenha pre√ßos EXATOS (n√£o arredonde)
4. üîó Links apenas se existirem realmente
5. ‚úàÔ∏è Para cada op√ß√£o, determine se √© ida/volta ou somente ida
` : ''}

DETEC√á√ÉO IDA E VOLTA CORRIGIDA:
- Status detectado: ${analise.isIdaVolta ? 'IDA E VOLTA' : 'SOMENTE IDA'}
- Confian√ßa: ${analise.confiancaIdaVolta}
- Use o template correto baseado na detec√ß√£o

REGRAS DE FORMATA√á√ÉO OBRIGAT√ìRIAS:
1. üö´ REMOVER informa√ß√µes redundantes de aeroportos:
   - "Congonhas (SP)" ‚Üí "Congonhas"
   - "Guarulhos (SP)" ‚Üí "Guarulhos"
   - "Gale√£o (RJ)" ‚Üí "Gale√£o"

2. üîó Links condicionais:
   - APENAS inclua linha de link se existir link real
   - Se n√£o houver link, omitir completamente
   - Nunca usar "Detalhes" gen√©rico

3. üßπ Sem cabe√ßalhos t√©cnicos:
   - Come√ßar direto com o or√ßamento
   - Sem "Dados do or√ßamento:", "Resultado:", etc.

TEMPLATES ESPEC√çFICOS:

${formData.tipos.includes('Cruzeiro') ? `
üö¢ TEMPLATE CRUZEIRO:
- Mostrar por CABINE, n√£o por passageiro
- Formato: "üí∞ R$ X.XXX,XX (total)"
- Parcelamento em cada cabine
- Sem detalhamento de taxas
` : ''}

${formData.tipos.includes('Hotel') ? `
üè® TEMPLATE HOTEL:
- Nome EXATO do hotel
- Estrelas se vis√≠veis
- Localiza√ß√£o correta
` : ''}

DADOS FORNECIDOS:
- Tipos selecionados: ${formData.tipos.join(', ')}
- Destino: ${formData.destino || 'Detectar automaticamente'}
- Composi√ß√£o: ${formData.adultos || 'Detectar'} adultos${formData.criancas > 0 ? `, ${formData.criancas} crian√ßas` : ''}
${formData.idadesCriancas.length > 0 ? `- Idades das crian√ßas: ${formData.idadesCriancas.join(', ')} anos` : ''}
- Tem imagem: ${formData.temImagem ? 'SIM' : 'N√ÉO'}
- Escalas detectadas: ${analise.temEscalas ? 'SIM' : 'N√ÉO'}

${formData.parcelamento && (formData.parcelamento.incluir10x || formData.parcelamento.incluir12x) ? `
PARCELAMENTO SOLICITADO:
${formData.parcelamento.incluir10x ? '- Incluir parcelamento 10x' : ''}
${formData.parcelamento.incluir12x ? '- Incluir parcelamento 12x' : ''}
` : ''}

CONTE√öDO PARA AN√ÅLISE:
${textoCompleto}

GERE O OR√áAMENTO APLICANDO TODAS AS CORRE√á√ïES ACIMA.`;

  return prompt;
}

// ================================================================================
// üßπ LIMPEZA DE CABE√áALHOS T√âCNICOS - APRIMORADA
// ================================================================================

function limparCabecalhosTecnicos(conteudo) {
  let limpo = conteudo;

  console.log("üßπ [FASE 2] Aplicando limpeza de cabe√ßalhos...");

  const cabecalhosRemover = [
    /SISTEMA DE OR√áAMENTOS.*?\n/gi,
    /VERS√ÉO CORRIGIDA.*?\n/gi,
    /INSTRU√á√ïES CR√çTICAS.*?\n/gi,
    /PRODUTO SELECIONADO:.*?\n/gi,
    /M√öLTIPLAS OP√á√ïES:.*?\n/gi,
    /TEMPLATE OBRIGAT√ìRIO:.*?\n/gi,
    /INSTRU√á√ïES.*?\n/gi,
    /DADOS DO CLIENTE:.*?\n/gi,
    /DADOS FORNECIDOS:.*?\n/gi,
    /FORMATO PARA USAR:.*?\n/gi,
    /CONTE√öDO PARA AN√ÅLISE:.*?\n/gi,
    /DETEC√á√ÉO IDA E VOLTA.*?\n/gi,
    /REGRAS DE FORMATA√á√ÉO.*?\n/gi,
    /Dados do or√ßamento.*?\n/gi,
    /Resultado.*?\n/gi,
    /Or√ßamento gerado.*?\n/gi
  ];

  cabecalhosRemover.forEach(regex => {
    limpo = limpo.replace(regex, '');
  });

  // Limpar quebras de linha excessivas
  limpo = limpo.replace(/\n\s*\n\s*\n/g, '\n\n');
  limpo = limpo.replace(/^\s*\n+/, '');

  return limpo.trim();
}

// ================================================================================
// ‚úàÔ∏è CONVERS√ÉO DE AEROPORTOS - NOVA FUNCIONALIDADE FASE 2
// ================================================================================

function converterAeroportos(conteudo) {
  console.log("‚úàÔ∏è [FASE 2] Convertendo nomes de aeroportos...");

  const conversoes = {
    'Congonhas (SP)': 'Congonhas',
    'Congonhas(SP)': 'Congonhas',
    'S√£o Paulo (Congonhas (SP))': 'Congonhas',
    'Guarulhos (SP)': 'Guarulhos',
    'Guarulhos(SP)': 'Guarulhos',
    'S√£o Paulo (Guarulhos (SP))': 'Guarulhos',
    'Gale√£o (RJ)': 'Gale√£o',
    'Gale√£o(RJ)': 'Gale√£o',
    'Rio de Janeiro (Gale√£o (RJ))': 'Gale√£o',
    'Santos Dumont (RJ)': 'Santos Dumont',
    'Santos Dumont(RJ)': 'Santos Dumont',
    'Bras√≠lia (DF)': 'Bras√≠lia',
    'Bras√≠lia(DF)': 'Bras√≠lia',
    'Recife (PE)': 'Recife',
    'Recife(PE)': 'Recife',
    'Salvador (BA)': 'Salvador',
    'Salvador(BA)': 'Salvador',
    'Fortaleza (CE)': 'Fortaleza',
    'Fortaleza(CE)': 'Fortaleza'
  };

  let conteudoLimpo = conteudo;

  Object.keys(conversoes).forEach(aeroportoCompleto => {
    const aeroportoLimpo = conversoes[aeroportoCompleto];
    
    // Substituir usando regex para ser mais preciso
    const regex = new RegExp(aeroportoCompleto.replace(/[()]/g, '\\$&'), 'gi');
    conteudoLimpo = conteudoLimpo.replace(regex, aeroportoLimpo);
  });

  return conteudoLimpo;
}

// ================================================================================
// üîó SISTEMA DE LINKS CONDICIONAIS - NOVA FUNCIONALIDADE FASE 2
// ================================================================================

function aplicarLinksCondicionais(conteudo) {
  console.log("üîó [FASE 2] Aplicando sistema de links condicionais...");

  // Verificar se existem links reais no conte√∫do
  const temLinksReais = /https?:\/\/[^\s]+/i.test(conteudo);

  if (!temLinksReais) {
    // Remover linhas de link gen√©ricas
    conteudo = conteudo.replace(/üîó\s*Detalhes.*?\n/gi, '');
    conteudo = conteudo.replace(/üîó\s*Link.*?\n/gi, '');
    conteudo = conteudo.replace(/üîó\s*Ver mais.*?\n/gi, '');
    
    console.log("üîó [FASE 2] Links gen√©ricos removidos");
  } else {
    console.log("üîó [FASE 2] Links reais mantidos");
  }

  return conteudo;
}

// ================================================================================
// üé® LIMPEZA FINAL DE FORMATA√á√ÉO
// ================================================================================

function limparFormatacao(conteudo) {
  console.log("üé® [FASE 2] Aplicando limpeza final de formata√ß√£o...");

  let limpo = conteudo;

  // Remover espa√ßos em branco excessivos
  limpo = limpo.replace(/\s+\n/g, '\n');
  limpo = limpo.replace(/\n\s+/g, '\n');
  
  // Normalizar quebras de linha
  limpo = limpo.replace(/\n{3,}/g, '\n\n');
  
  // Remover espa√ßos no in√≠cio e fim
  limpo = limpo.trim();

  return limpo;
}

// ================================================================================
// üîß FUN√á√ïES DE VALIDA√á√ÉO CORRIGIDAS
// ================================================================================

function validarFormularioCorrigido(formData) {
  const erros = [];
  
  try {
    // Valida√ß√£o de tipos (obrigat√≥rio)
    if (!formData.tipos || formData.tipos.length === 0) {
      erros.push("Selecione pelo menos um tipo de servi√ßo");
    }

    // Valida√ß√£o de conte√∫do (pelo menos observa√ß√µes ou paste)
    if (!formData.observacoes && !formData.conteudoPaste) {
      erros.push("Forne√ßa informa√ß√µes nas observa√ß√µes ou cole conte√∫do");
    }

    // Valida√ß√£o de crian√ßas vs idades
    if (formData.criancas > 0 && formData.idadesCriancas.length !== formData.criancas) {
      console.warn("‚ö†Ô∏è N√∫mero de idades n√£o corresponde ao n√∫mero de crian√ßas");
      // N√£o √© erro cr√≠tico, apenas aviso
    }

    console.log("‚úÖ [FASE 2] Valida√ß√£o conclu√≠da:", {
      erros: erros.length,
      tipos: formData.tipos.length,
      temConteudo: Boolean(formData.observacoes || formData.conteudoPaste)
    });

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro na valida√ß√£o:", error);
    erros.push("Erro interno na valida√ß√£o");
  }

  return erros;
}

// ================================================================================
// üéØ DETERMINA√á√ÉO DE TIPO DE VIAGEM
// ================================================================================

function determinarTipoViagem(tipos, textoCompleto) {
  if (!tipos || tipos.length === 0) return 'Indefinido';
  
  // Priorizar baseado na sele√ß√£o
  if (tipos.includes('Cruzeiro')) return 'Cruzeiro';
  if (tipos.includes('Hotel')) return 'Hotel';
  if (tipos.includes('A√©reo Facial') || tipos.includes('A√©reo VBI/F√°cil')) return 'A√©reo';
  if (tipos.includes('Circuito')) return 'Circuito';
  
  // Se m√∫ltiplos tipos, usar o primeiro
  return tipos[0];
}

// ================================================================================
// üé® INTERFACE CORRIGIDA
// ================================================================================

function updateElementCorrigido(id, content) {
  try {
    const element = document.getElementById(id);
    if (!element) {
      console.warn(`‚ö†Ô∏è [FASE 2] Elemento '${id}' n√£o encontrado`);
      return false;
    }

    if (typeof content !== 'string') {
      content = String(content);
    }

    element.innerText = content;
    console.log(`üìù [FASE 2] Elemento '${id}' atualizado (${content.length} chars)`);
    return true;

  } catch (error) {
    console.error(`‚ùå [FASE 2] Erro ao atualizar elemento '${id}':`, error);
    return false;
  }
}

function showLoadingCorrigido(mensagem = "Processando com corre√ß√µes...") {
  updateElementCorrigido("orcamentoIA", `ü§ñ ${mensagem}`);
}

function hideLoadingCorrigido() {
  console.log("üîÑ [FASE 2] Loading ocultado");
}

function showErrorCorrigido(message) {
  const errorMessage = `‚ùå Erro: ${message}`;
  const sucesso = updateElementCorrigido("orcamentoIA", errorMessage);

  if (!sucesso) {
    alert(errorMessage);
  }
}

// ================================================================================
// üîß CONFIGURA√á√ÉO DA √ÅREA DE PASTE CORRIGIDA
// ================================================================================

function setupPasteAreaCorrigida() {
  const pasteArea = document.getElementById("pasteArea");
  
  if (!pasteArea) {
    console.warn("‚ö†Ô∏è [FASE 2] √Årea de paste n√£o encontrada");
    return;
  }

  // Evento de paste melhorado
  pasteArea.addEventListener("paste", async function(e) {
    console.log("üìã [FASE 2] Evento paste detectado");
    
    try {
      const items = e.clipboardData.items;
      let temImagem = false;

      for (let item of items) {
        if (item.type.startsWith('image/')) {
          temImagem = true;
          await processarImagemPaste(item);
          break;
        }
      }

      if (!temImagem) {
        console.log("üìù [FASE 2] Texto colado na √°rea");
      }

    } catch (error) {
      console.error("‚ùå [FASE 2] Erro no paste:", error);
    }
  });

  console.log("‚úÖ [FASE 2] √Årea de paste configurada");
}

async function processarImagemPaste(item) {
  console.log("üñºÔ∏è [FASE 2] Processando imagem colada...");
  
  const file = item.getAsFile();
  const previewArea = document.getElementById("previewArea");
  
  if (!previewArea) {
    console.warn("‚ö†Ô∏è Preview area n√£o encontrada");
    return;
  }

  try {
    const img = document.createElement("img");
    img.src = URL.createObjectURL(file);
    img.style.cssText = "max-width: 100%; max-height: 300px; border-radius: 8px; margin-top: 1rem;";
    
    previewArea.innerHTML = '';
    previewArea.appendChild(img);

    console.log("‚úÖ [FASE 2] Imagem processada e exibida");

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro ao processar imagem:", error);
  }
}

// ================================================================================
// üìÅ UPLOAD DE ARQUIVO CORRIGIDO
// ================================================================================

function handleFileUploadCorrigido(event) {
  console.log("üìÅ [FASE 2] Upload de arquivo detectado");
  
  const file = event.target.files[0];
  if (!file) return;

  const previewArea = document.getElementById("previewArea");
  if (!previewArea) return;

  console.log("üìÑ [FASE 2] Arquivo:", {
    nome: file.name,
    tipo: file.type,
    tamanho: `${(file.size / 1024).toFixed(1)} KB`
  });

  if (file.type.startsWith('image/')) {
    const img = document.createElement("img");
    img.src = URL.createObjectURL(file);
    img.style.cssText = "max-width: 100%; max-height: 300px; border-radius: 8px; margin-top: 1rem;";
    
    previewArea.innerHTML = '';
    previewArea.appendChild(img);

    console.log("‚úÖ [FASE 2] Imagem carregada");

  } else if (file.type === 'application/pdf') {
    previewArea.innerHTML = `
      <div style="padding: 1rem; background: #f8f9fa; border-radius: 8px; margin-top: 1rem;">
        <strong>üìÑ PDF carregado:</strong> ${file.name}
      </div>
    `;

    console.log("‚úÖ [FASE 2] PDF carregado");
  }
}

// ================================================================================
// üåç FUN√á√ÉO MELHORADA - GERAR DICAS DO DESTINO
// ================================================================================

async function gerarDicasDestino() {
  const btnGerar = document.getElementById('btnGerarDicas');
  const btnCopiar = document.getElementById('btnCopiarDicas');

  if (!btnGerar) {
    console.error('‚ùå [FASE 2] Bot√£o gerar dicas n√£o encontrado');
    return;
  }

  try {
    btnGerar.disabled = true;
    btnGerar.innerHTML = 'ü§ñ Extraindo destino do or√ßamento...';

    // Extrair informa√ß√µes do or√ßamento gerado
    const orcamentoTexto = document.getElementById('orcamentoIA')?.innerText || '';
    const destinoManual = document.getElementById('destino')?.value?.trim() || '';

    if (!orcamentoTexto || orcamentoTexto === 'Preencha o formul√°rio acima para gerar o or√ßamento...') {
      throw new Error('Gere um or√ßamento primeiro para extrair as informa√ß√µes do destino!');
    }

    // Extrair destino automaticamente
    const destinoExtraido = extrairDestinoDoOrcamento(orcamentoTexto) || destinoManual;
    
    if (!destinoExtraido) {
      throw new Error('N√£o foi poss√≠vel identificar o destino. Preencha o campo "Destino" manualmente.');
    }

    // Extrair informa√ß√µes de crian√ßas
    const criancas = parseInt(document.getElementById('criancas')?.value) || 0;
    const idadesCriancas = [];
    
    if (criancas > 0) {
      for (let i = 1; i <= criancas; i++) {
        const idade = parseInt(document.querySelector(`input[name="idade_crianca_${i}"]`)?.value) || null;
        if (idade !== null) {
          idadesCriancas.push(idade);
        }
      }
    }

    btnGerar.innerHTML = 'ü§ñ Gerando dicas personalizadas...';

    // Chamar API para gerar dicas
    const dicasResponse = await gerarDicasAPI({
      destino: destinoExtraido,
      orcamento: orcamentoTexto,
      criancas,
      idadesCriancas,
      tipoViagem: extrairTipoViagemDoOrcamento(orcamentoTexto)
    });

    if (dicasResponse && dicasResponse.dicas) {
      updateElementCorrigido('destinoIA', dicasResponse.dicas);
      
      // Habilitar bot√£o de copiar
      if (btnCopiar) {
        btnCopiar.style.display = 'inline-block';
      }

      console.log('‚úÖ [FASE 2] Dicas geradas com sucesso');
    } else {
      throw new Error('Resposta inv√°lida da API de dicas');
    }

  } catch (error) {
    console.error('‚ùå [FASE 2] Erro ao gerar dicas:', error);
    updateElementCorrigido('destinoIA', `‚ùå Erro: ${error.message}`);

  } finally {
    btnGerar.disabled = false;
    btnGerar.innerHTML = 'üéØ Gerar Dicas';
  }
}

// ================================================================================
// üè® FUN√á√ÉO MELHORADA - GERAR RANKING DE HOT√âIS
// ================================================================================

async function gerarRankingHoteis() {
  const btnGerar = document.getElementById('btnGerarRanking');
  const btnCopiar = document.getElementById('btnCopiarRanking');

  if (!btnGerar) {
    console.error('‚ùå [FASE 2] Bot√£o gerar ranking n√£o encontrado');
    return;
  }

  try {
    btnGerar.disabled = true;
    btnGerar.innerHTML = 'ü§ñ Extraindo hot√©is do or√ßamento...';

    const orcamentoTexto = document.getElementById('orcamentoIA')?.innerText || '';
    
    if (!orcamentoTexto || orcamentoTexto === 'Preencha o formul√°rio acima para gerar o or√ßamento...') {
      throw new Error('Gere um or√ßamento com hot√©is primeiro!');
    }

    // Extrair hot√©is do or√ßamento
    const hoteisExtraidos = extrairHoteisDoOrcamento(orcamentoTexto);
    const destinoExtraido = extrairDestinoDoOrcamento(orcamentoTexto);

    if (hoteisExtraidos.length === 0) {
      throw new Error('Nenhum hotel encontrado no or√ßamento. Inclua "Hotel" nos tipos selecionados.');
    }

    btnGerar.innerHTML = 'ü§ñ Gerando ranking baseado no or√ßamento...';

    // Chamar API para gerar ranking
    const rankingResponse = await gerarRankingAPI({
      hoteis: hoteisExtraidos,
      destino: destinoExtraido,
      orcamento: orcamentoTexto
    });

    if (rankingResponse && rankingResponse.ranking) {
      updateElementCorrigido('rankingIA', rankingResponse.ranking);
      
      // Habilitar bot√£o de copiar
      if (btnCopiar) {
        btnCopiar.style.display = 'inline-block';
      }

      console.log('‚úÖ [FASE 2] Ranking gerado com sucesso');
    } else {
      throw new Error('Resposta inv√°lida da API de ranking');
    }

  } catch (error) {
    console.error('‚ùå [FASE 2] Erro ao gerar ranking:', error);
    updateElementCorrigido('rankingIA', `‚ùå Erro: ${error.message}`);

  } finally {
    btnGerar.disabled = false;
    btnGerar.innerHTML = 'üèÜ Gerar Ranking';
  }
}

// ================================================================================
// üîç FUN√á√ïES DE EXTRA√á√ÉO DE DADOS
// ================================================================================

function extrairDestinoDoOrcamento(orcamento) {
  // Procurar por padr√£o "üìç Destino"
  const padraoDestino = /üìç\s*([^\n]+)/i;
  const match = orcamento.match(padraoDestino);
  
  if (match) {
    return match[1].trim();
  }

  // Procurar por nomes de cidades conhecidas
  const cidadesComuns = [
    'Orlando', 'Miami', 'Nova York', 'Paris', 'Londres', 'Roma',
    'Buenos Aires', 'Santiago', 'Lima', 'Canc√∫n', 'Punta Cana',
    'Porto de Galinhas', 'Fernando de Noronha', 'B√∫zios', 'Gramado',
    'Bariloche', 'Mendoza', 'Montevideo', 'Lisboa', 'Barcelona',
    'Madri', 'Amsterdam', 'Berlim', 'Praga', 'Dubai', 'Singapura'
  ];

  for (const cidade of cidadesComuns) {
    if (orcamento.toLowerCase().includes(cidade.toLowerCase())) {
      return cidade;
    }
  }

  return null;
}

function extrairHoteisDoOrcamento(orcamento) {
  const hoteis = [];
  
  // Procurar por padr√µes de hotel
  const padroes = [
    /üè®\s*([^\n\r]+)/gi,
    /Hotel\s+([^\n\r]+)/gi,
    /Resort\s+([^\n\r]+)/gi,
    /Pousada\s+([^\n\r]+)/gi
  ];

  padroes.forEach(padrao => {
    const matches = orcamento.matchAll(padrao);
    for (const match of matches) {
      const hotel = match[1].trim();
      if (hotel && !hoteis.includes(hotel)) {
        hoteis.push(hotel);
      }
    }
  });

  return hoteis;
}

function extrairTipoViagemDoOrcamento(orcamento) {
  if (orcamento.toLowerCase().includes('cruzeiro')) return 'Cruzeiro';
  if (orcamento.toLowerCase().includes('hotel')) return 'Hotel';
  if (orcamento.toLowerCase().includes('a√©reo')) return 'A√©reo';
  if (orcamento.toLowerCase().includes('circuito')) return 'Circuito';
  
  return 'Pacote';
}

// ================================================================================
// üåê APIS DE DICAS E RANKING
// ================================================================================

async function gerarDicasAPI(dados) {
  console.log('üåê [FASE 2] Chamando API de dicas...');
  
  try {
    const response = await fetch('/api/ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: construirPromptDicas(dados),
        tipoRequisicao: 'dicas_destino',
        destino: dados.destino,
        metadata: {
          versao: 'fase2_dicas',
          criancas: dados.criancas,
          tipo_viagem: dados.tipoViagem
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status}`);
    }

    const result = await response.json();
    return {
      dicas: result.choices[0].message.content
    };

  } catch (error) {
    console.error('‚ùå [FASE 2] Erro na API de dicas:', error);
    throw error;
  }
}

async function gerarRankingAPI(dados) {
  console.log('üåê [FASE 2] Chamando API de ranking...');
  
  try {
    const response = await fetch('/api/ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: construirPromptRanking(dados),
        tipoRequisicao: 'ranking_hoteis',
        destino: dados.destino,
        metadata: {
          versao: 'fase2_ranking',
          hoteis: dados.hoteis.length
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status}`);
    }

    const result = await response.json();
    return {
      ranking: result.choices[0].message.content
    };

  } catch (error) {
    console.error('‚ùå [FASE 2] Erro na API de ranking:', error);
    throw error;
  }
}

// ================================================================================
// üìù CONSTRU√á√ÉO DE PROMPTS PARA DICAS E RANKING
// ================================================================================

function construirPromptDicas(dados) {
  return `GERA√á√ÉO DE DICAS PERSONALIZADAS - CVC ITAQUA

DESTINO: ${dados.destino}
TIPO DE VIAGEM: ${dados.tipoViagem}
${dados.criancas > 0 ? `CRIAN√áAS: ${dados.criancas} (idades: ${dados.idadesCriancas.join(', ')} anos)` : 'SEM CRIAN√áAS'}

INSTRU√á√ïES:
1. üåü Come√ßar com "üåü **Dicas para ${dados.destino}**"
2. üóìÔ∏è Incluir melhor √©poca para viajar
3. üå§Ô∏è Clima e sugest√µes de bagagem
4. üí° Dicas pr√°ticas de documenta√ß√£o
${dados.criancas > 0 ? '5. üë∂ Dicas espec√≠ficas para fam√≠lias com crian√ßas' : ''}
6. üçΩÔ∏è Gastronomia t√≠pica (opcional)

REGRAS DE DOCUMENTA√á√ÉO:
- Nacional: RG original com foto
- Mercosul: RG original (m√°x. 10 anos) ou passaporte
- Internacional: Passaporte obrigat√≥rio
- Europa: Seguro viagem obrigat√≥rio
- EUA: Visto americano obrigat√≥rio

N√ÉO incluir informa√ß√µes do or√ßamento misturadas.
Focar apenas em dicas √∫teis para WhatsApp.`;
}

function construirPromptRanking(dados) {
  return `RANKING DE HOT√âIS BASEADO NO OR√áAMENTO - CVC ITAQUA

DESTINO: ${dados.destino}
HOT√âIS DO OR√áAMENTO: ${dados.hoteis.join(', ')}

INSTRU√á√ïES:
1. üèÜ Usar APENAS os hot√©is do or√ßamento gerado
2. üìç Para cada hotel: localiza√ß√£o, notas TripAdvisor e Booking
3. ‚úÖ Destacar pontos POSITIVOS de cada hotel
4. üìç Dist√¢ncias: at√© 2,5km (a p√©), acima (de carro)
5. üéØ Ordem baseada em avalia√ß√µes e localiza√ß√£o

FORMATO:
1Ô∏è‚É£ - [Nome do Hotel]
üìç Localiza√ß√£o: [descri√ß√£o]
‚≠ê Notas: TripAdvisor: X/5 | Booking.com: X/10
‚úÖ Ponto positivo: [destacar qualidade]
üìç Dist√¢ncias:
[Local]: Xm (~Y min a p√©) ou Xkm (~Y min de carro)

N√ÉO inventar hot√©is n√£o mencionados no or√ßamento.`;
}

// ================================================================================
// üéØ FUN√á√ïES DE UTILIDADE E COMPATIBILIDADE
// ================================================================================

function habilitarBotaoDicas() {
  const btnDicas = document.getElementById('btnGerarDicas');
  if (btnDicas) {
    btnDicas.disabled = false;
    btnDicas.title = 'Clique para gerar dicas do destino';
  }
}

function inicializarMedidorCusto() {
  try {
    const dadosSalvos = localStorage.getItem('cvc_custo_meter_corrigido');
    if (dadosSalvos) {
      custoMeter = JSON.parse(dadosSalvos);
      
      // Verificar se √© um novo dia
      const hoje = new Date().toDateString();
      if (custoMeter.ultimaAtualizacao !== hoje) {
        resetarContadorDiario();
      }
    }
    
    console.log("üí∞ [FASE 2] Medidor de custo inicializado");
  } catch (error) {
    console.error("‚ùå [FASE 2] Erro ao inicializar medidor:", error);
    resetarContadorDiario();
  }
}

function testarConexaoAPICorrigida() {
  console.log("üîå [FASE 2] Testando conex√£o com API...");
  
  // Test simples para verificar se API est√° acess√≠vel
  fetch('/api/ai', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ prompt: 'test', tipoRequisicao: 'test' })
  })
  .then(response => {
    if (response.status === 200 || response.status === 400) {
      console.log("‚úÖ [FASE 2] API acess√≠vel");
    } else {
      console.warn("‚ö†Ô∏è [FASE 2] API pode estar indispon√≠vel");
    }
  })
  .catch(error => {
    console.warn("‚ö†Ô∏è [FASE 2] Erro de conex√£o com API:", error.message);
  });
}

// ================================================================================
// üìä SISTEMA DE M√âTRICAS CORRIGIDO
// ================================================================================

function atualizarMetricasCorrigidas(metricas) {
  try {
    const hoje = new Date().toDateString();
    if (custoMeter.ultimaAtualizacao !== hoje) {
      resetarContadorDiario();
    }

    custoMeter.orcamentosHoje++;
    custoMeter.custoTotalHoje += metricas.custo?.brl || 0;
    custoMeter.ultimaAtualizacao = hoje;

    if (metricas.estrategia && metricas.estrategia.includes('Claude')) {
      custoMeter.orcamentosImagem++;
      custoMeter.modelosUsados['claude-3-sonnet']++;
    } else {
      custoMeter.orcamentosTexto++;
      custoMeter.modelosUsados['gpt-4o-mini']++;
    }

    salvarMedidorCusto();

    console.log("üìä [FASE 2] M√©tricas atualizadas:", {
      estrategia: metricas.estrategia,
      modelo: metricas.modelo_usado,
      custo: `R$ ${(metricas.custo?.brl || 0).toFixed(4)}`,
      total_hoje: `R$ ${custoMeter.custoTotalHoje.toFixed(3)}`
    });

  } catch (error) {
    console.error("‚ùå [FASE 2] Erro ao atualizar m√©tricas:", error);
  }
}

function salvarMedidorCusto() {
  try {
    localStorage.setItem('cvc_custo_meter_corrigido', JSON.stringify(custoMeter));
  } catch (error) {
    console.error("‚ùå [FASE 2] Erro ao salvar m√©tricas:", error);
  }
}

function resetarContadorDiario() {
  custoMeter = {
    orcamentosHoje: 0,
    custoTotalHoje: 0,
    economiaHoje: 0,
    orcamentosTexto: 0,
    orcamentosImagem: 0,
    ultimaAtualizacao: new Date().toDateString(),
    modelosUsados: {
      'claude-3-sonnet': 0,
      'gpt-4o-mini': 0,
      'fallback': 0
    }
  };
  salvarMedidorCusto();
}

// ================================================================================
// üéØ FUN√á√ïES DE COMPATIBILIDADE COM SISTEMA EXISTENTE
// ================================================================================

function copiarTexto(id) {
  const elemento = document.getElementById(id);
  if (!elemento) {
    console.error("‚ùå [FASE 2] Elemento n√£o encontrado:", id);
    alert("Elemento n√£o encontrado!");
    return;
  }

  const texto = elemento.innerText;

  if (navigator.clipboard && window.isSecureContext) {
    navigator.clipboard.writeText(texto).then(() => {
      console.log("‚úÖ [FASE 2] Texto copiado:", id);
      mostrarFeedbackCopia("‚úÖ Copiado!");
    }).catch(err => {
      console.error("‚ùå [FASE 2] Erro ao copiar:", err);
      copiarTextoFallback(texto);
    });
  } else {
    copiarTextoFallback(texto);
  }
}

function copiarTextoFallback(texto) {
  const textArea = document.createElement("textarea");
  textArea.value = texto;
  textArea.style.position = "fixed";
  textArea.style.opacity = "0";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    const sucesso = document.execCommand("copy");
    mostrarFeedbackCopia(sucesso ? "‚úÖ Copiado!" : "‚ùå Erro ao copiar");
  } catch (err) {
    console.error("‚ùå [FASE 2] Fallback falhou:", err);
    mostrarFeedbackCopia("‚ùå Erro ao copiar");
  }

  document.body.removeChild(textArea);
}

function mostrarFeedbackCopia(mensagem) {
  // Criar elemento de feedback
  const feedback = document.createElement('div');
  feedback.textContent = mensagem;
  feedback.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #4caf50;
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 6px;
    z-index: 10000;
    font-weight: 600;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  `;

  document.body.appendChild(feedback);

  // Remover ap√≥s 3 segundos
  setTimeout(() => {
    if (feedback.parentNode) {
      feedback.parentNode.removeChild(feedback);
    }
  }, 3000);
}

// ================================================================================
// üìù FUN√á√ïES DE LOG E DEBUG
// ================================================================================

function logEventoSucesso(evento, dados) {
  console.log(`üéâ [FASE 2] ${evento}:`, dados);
  
  // Enviar dados para analytics se necess√°rio
  if (window.gtag) {
    window.gtag('event', evento, {
      custom_parameter_1: dados.estrategia,
      custom_parameter_2: dados.tempo_ms,
      custom_parameter_3: dados.tipo_viagem_detectado
    });
  }
}

// ================================================================================
// üöÄ PLACEHOLDER PARA FUN√á√ïES FUTURAS
// ================================================================================

function handlePDFAnalysisCorrigido(arquivo) {
  console.log("üìÑ [FASE 2] An√°lise de PDF - placeholder para implementa√ß√£o futura");
  // Implementar na pr√≥xima fase se necess√°rio
}

// ================================================================================
// üéØ INICIALIZA√á√ÉO FINAL
// ================================================================================

console.log("‚úÖ [FASE 2] Sistema de IA CVC Itaqua carregado com todas as corre√ß√µes!");
console.log("üîß [FASE 2] Funcionalidades implementadas:");
console.log("   ‚úÖ Limpeza de cabe√ßalhos t√©cnicos");
console.log("   ‚úÖ Convers√£o autom√°tica de aeroportos");
console.log("   ‚úÖ Sistema de links condicionais");
console.log("   ‚úÖ Detec√ß√£o aprimorada de m√∫ltiplas op√ß√µes");
console.log("   ‚úÖ Distin√ß√£o correta ida/volta vs somente ida");
console.log("   ‚úÖ Templates espec√≠ficos para cada tipo");
console.log("   ‚úÖ Ge
