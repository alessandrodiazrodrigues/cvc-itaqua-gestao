// ================================================================================
// üèÜ CVC ITAQUA - API COMPLETA CORRIGIDA v6.0-FULL - TODAS AS FUNCIONALIDADES
// ================================================================================
// BASEADO NO FRONTEND v5.3.1-fixed - TODAS AS 1998+ LINHAS FUNCIONAIS
// ================================================================================
// CORRE√á√ïES APLICADAS:
// ‚úÖ Imports ES6 modules corrigidos (problema principal do FUNCTION_INVOCATION_FAILED)
// ‚úÖ TODAS as funcionalidades do frontend mantidas
// ‚úÖ Sistema completo de or√ßamentos com detec√ß√£o ida/volta
// ‚úÖ An√°lise de m√∫ltiplas op√ß√µes
// ‚úÖ Sistema de parcelamento (10x e 12x)
// ‚úÖ Ranking de hot√©is detalhado
// ‚úÖ Dicas personalizadas de destino
// ‚úÖ An√°lise de PDFs e relat√≥rios
// ‚úÖ Processamento de imagens e texto
// ‚úÖ Sistema de m√©tricas e custos
// ‚úÖ Templates espec√≠ficos por tipo de requisi√ß√£o
// ‚úÖ Valida√ß√£o robusta de dados
// ‚úÖ Error handling completo
// ‚úÖ Timeout e rate limiting
// ================================================================================

// ‚úÖ CORRE√á√ÉO PRINCIPAL: Usar apenas ES6 modules (sem require/CommonJS)
import Anthropic from '@anthropic-ai/sdk';
import OpenAI from 'openai';

// ================================================================================
// üîß CONFIGURA√á√ïES E CONSTANTES
// ================================================================================

const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const API_VERSION = '6.0-FULL-COMPLETO';

// Limites e configura√ß√µes
const MAX_TOKENS = 4000;
const TIMEOUT_MS = 28000; // 28 segundos (menor que o limite do Vercel)
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
const SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];

// Inicializa√ß√£o dos clientes de IA
let anthropic = null;
let openai = null;

// Inicializar Anthropic
if (ANTHROPIC_API_KEY) {
  try {
    anthropic = new Anthropic({
      apiKey: ANTHROPIC_API_KEY,
      maxRetries: 2,
      timeout: TIMEOUT_MS
    });
    console.log('‚úÖ Anthropic cliente inicializado');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Anthropic:', error);
  }
}

// Inicializar OpenAI
if (OPENAI_API_KEY) {
  try {
    openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
      maxRetries: 2,
      timeout: TIMEOUT_MS
    });
    console.log('‚úÖ OpenAI cliente inicializado');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar OpenAI:', error);
  }
}

// ================================================================================
// üéØ HANDLER PRINCIPAL - SUPORTE COMPLETO A TODAS AS FUNCIONALIDADES
// ================================================================================

export default async function handler(req, res) {
  const startTime = Date.now();
  
  // ‚úÖ Valida√ß√£o inicial cr√≠tica das chaves de API
  if (!ANTHROPIC_API_KEY && !OPENAI_API_KEY) {
    console.error('‚ùå ERRO CR√çTICO: Nenhuma chave de API configurada');
    return res.status(500).json({
      success: false,
      error: {
        message: 'Servi√ßo temporariamente indispon√≠vel - Chaves de API n√£o configuradas',
        code: 'MISSING_API_KEYS',
        timestamp: new Date().toISOString()
      }
    });
  }

  // ‚úÖ Headers CORS completos
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Authorization, User-Agent');
  res.setHeader('Access-Control-Max-Age', '86400'); // 24 horas

  // Handle preflight OPTIONS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // ‚úÖ GET request - Status completo da API
  if (req.method === 'GET') {
    const systemStatus = {
      success: true,
      version: API_VERSION,
      status: 'API CVC Itaqua Online - Sistema Completo Ativo',
      timestamp: new Date().toISOString(),
      uptime: process.uptime ? `${Math.floor(process.uptime())}s` : 'N/A',
      
      // Status das APIs
      apis_status: {
        anthropic: {
          disponivel: !!anthropic,
          configurada: !!ANTHROPIC_API_KEY,
          uso: 'Processamento de imagens e an√°lises complexas'
        },
        openai: {
          disponivel: !!openai,
          configurada: !!OPENAI_API_KEY,
          uso: 'Processamento de texto e or√ßamentos'
        }
      },

      // Funcionalidades completas suportadas
      funcionalidades_completas: [
        'üéØ Gera√ß√£o de or√ßamentos formatados CVC',
        'üìä An√°lise de m√∫ltiplas op√ß√µes de passagens',
        '‚úàÔ∏è Detec√ß√£o autom√°tica ida/volta vs somente ida',
        'üí≥ Sistema de parcelamento (10x e 12x)',
        'üè® Ranking detalhado de hot√©is por destino',
        'üåç Dicas personalizadas de destino',
        'üìÑ An√°lise de PDFs e relat√≥rios executivos',
        'üñºÔ∏è Processamento avan√ßado de imagens',
        'üîç Detec√ß√£o de escalas e conex√µes',
        'üí∞ Sistema de m√©tricas e controle de custos',
        '‚öôÔ∏è Valida√ß√£o robusta de dados',
        'üåê Suporte a diferentes tipos de requisi√ß√£o'
      ],

      // Tipos de requisi√ß√£o suportados
      tipos_requisicao: {
        'orcamento': 'Gera√ß√£o de or√ßamentos CVC formatados',
        'ranking': 'Ranking de hot√©is por destino',
        'destino': 'Dicas personalizadas de viagem',
        'dicas': 'Alias para destino',
        'hotel': 'Alias para ranking',
        'analise': 'An√°lise de PDFs e relat√≥rios',
        'pdf': 'Alias para analise'
      },

      // Corre√ß√µes aplicadas
      correcoes_aplicadas: [
        '‚úÖ Imports ES6 modules corrigidos (FUNCTION_INVOCATION_FAILED resolvido)',
        '‚úÖ Valida√ß√£o de environment variables implementada',
        '‚úÖ Timeout de 28 segundos configurado',
        '‚úÖ Error handling robusto implementado',
        '‚úÖ Templates espec√≠ficos por tipo de requisi√ß√£o',
        '‚úÖ Sistema de fallback entre APIs',
        '‚úÖ Suporte completo ao frontend v5.3.1-fixed'
      ],

      // Configura√ß√µes t√©cnicas
      configuracoes: {
        max_tokens: MAX_TOKENS,
        timeout_ms: TIMEOUT_MS,
        max_file_size_mb: MAX_FILE_SIZE / (1024 * 1024),
        supported_image_types: SUPPORTED_IMAGE_TYPES
      }
    };

    return res.status(200).json(systemStatus);
  }

  // ‚úÖ Apenas POST para processamento
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: {
        message: 'M√©todo n√£o permitido. Use POST para processamento ou GET para status.',
        code: 'METHOD_NOT_ALLOWED',
        allowed_methods: ['GET', 'POST', 'OPTIONS']
      }
    });
  }

  console.log(`üöÄ [API-COMPLETA] Processando requisi√ß√£o ${req.method}...`);

  try {
    // ================================================================================
    // üìã VALIDA√á√ÉO COMPLETA DO REQUEST
    // ================================================================================

    const validacao = validarRequest(req);
    if (!validacao.valido) {
      return res.status(400).json({
        success: false,
        error: {
          message: `Dados inv√°lidos: ${validacao.erros.join(', ')}`,
          code: 'INVALID_REQUEST_DATA',
          detalhes: validacao.erros
        }
      });
    }

    const dadosLimpos = validacao.dados;
    console.log('üìä [API] Dados validados:', {
      tipo: dadosLimpos.tipo,
      tipoRequisicao: dadosLimpos.tipoRequisicao,
      destino: dadosLimpos.destino || 'n√£o informado',
      temImagem: Boolean(dadosLimpos.temImagem),
      tipoViagem: dadosLimpos.tipoViagem || 'n√£o detectado',
      prompt_length: dadosLimpos.prompt.length,
      tipos_servicos: dadosLimpos.tipos?.length || 0
    });

    // ================================================================================
    // üéØ ROTEAMENTO INTELIGENTE POR TIPO DE REQUISI√á√ÉO
    // ================================================================================

    const tipoProcessamento = determinarTipoProcessamento(dadosLimpos);
    console.log(`üîÄ [ROTEAMENTO] Tipo determinado: ${tipoProcessamento.tipo} | Estrat√©gia: ${tipoProcessamento.estrategia}`);

    let resultado;

    switch (tipoProcessamento.tipo) {
      case 'orcamento':
        resultado = await processarOrcamento(dadosLimpos, tipoProcessamento);
        break;
        
      case 'ranking':
      case 'hotel':
        resultado = await processarRankingHoteis(dadosLimpos, tipoProcessamento);
        break;
        
      case 'destino':
      case 'dicas':
        resultado = await processarDicasDestino(dadosLimpos, tipoProcessamento);
        break;
        
      case 'analise':
      case 'pdf':
        resultado = await processarAnaliseDocumento(dadosLimpos, tipoProcessamento);
        break;
        
      default:
        // Fallback para or√ßamento padr√£o
        console.log('‚ö†Ô∏è [FALLBACK] Tipo n√£o reconhecido, usando or√ßamento padr√£o');
        resultado = await processarOrcamento(dadosLimpos, { ...tipoProcessamento, tipo: 'orcamento' });
    }

    // ================================================================================
    // ‚úÖ PREPARA√á√ÉO DA RESPOSTA FINAL COM M√âTRICAS COMPLETAS
    // ================================================================================

    const tempoProcessamento = Date.now() - startTime;
    const respostaCompleta = montarRespostaFinal(resultado, dadosLimpos, tempoProcessamento);

    console.log('‚úÖ [API-COMPLETA] Resposta preparada:', {
      tipo: tipoProcessamento.tipo,
      modelo: resultado.modelo_usado,
      estrategia: resultado.estrategia,
      tempo_ms: tempoProcessamento,
      tamanho_resposta: resultado.conteudo.length,
      custo_brl: `R$ ${respostaCompleta.metricas.custo.brl.toFixed(4)}`
    });

    return res.status(200).json(respostaCompleta);

  } catch (error) {
    console.error('‚ùå [API-COMPLETA] Erro no processamento:', error);
    
    const tempoErro = Date.now() - startTime;
    const errorResponse = {
      success: false,
      error: {
        message: error.message || 'Erro interno do servidor',
        code: determinarCodigoErro(error),
        timestamp: new Date().toISOString(),
        tempo_processamento_ms: tempoErro
      }
    };

    // Determinar status code apropriado
    const statusCode = determinarStatusCode(error);
    
    return res.status(statusCode).json(errorResponse);
  }
}

// ================================================================================
// üìã VALIDA√á√ÉO COMPLETA DE REQUEST
// ================================================================================

function validarRequest(req) {
  const erros = [];
  
  try {
    // Validar body
    if (!req.body || typeof req.body !== 'object') {
      erros.push('Body da requisi√ß√£o deve ser um JSON v√°lido');
      return { valido: false, erros };
    }

    const {
      prompt,
      tipo,
      tipoRequisicao,
      destino,
      tipos,
      temImagem,
      arquivo,
      tipoViagem,
      parcelamento,
      adultos,
      criancas,
      camposOpcionais
    } = req.body;

    // Valida√ß√µes obrigat√≥rias
    if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
      erros.push('Campo "prompt" √© obrigat√≥rio e deve ser uma string n√£o vazia');
    }

    if (prompt && prompt.length > 50000) {
      erros.push('Prompt muito longo (m√°ximo 50.000 caracteres)');
    }

    // Valida√ß√£o de imagem se fornecida
    if (temImagem && arquivo) {
      const validacaoImagem = validarImagemBase64(arquivo);
      if (!validacaoImagem.valida) {
        erros.push(`Imagem inv√°lida: ${validacaoImagem.erro}`);
      }
    }

    // Valida√ß√£o de tipos de servi√ßo
    if (tipos && !Array.isArray(tipos)) {
      erros.push('Campo "tipos" deve ser um array');
    }

    // Valida√ß√£o de parcelamento
    if (parcelamento && typeof parcelamento === 'object') {
      if (parcelamento.incluirParcelamento && 
          !parcelamento.parcelas10x && 
          !parcelamento.parcelas12x) {
        erros.push('Se parcelamento inclu√≠do, deve ter pelo menos uma op√ß√£o (10x ou 12x)');
      }
    }

    if (erros.length > 0) {
      return { valido: false, erros };
    }

    // Dados limpos e validados
    const dadosLimpos = {
      prompt: prompt.trim(),
      tipo: tipo || tipoRequisicao || 'orcamento',
      tipoRequisicao: tipoRequisicao || tipo || 'orcamento',
      destino: destino?.trim() || '',
      tipos: Array.isArray(tipos) ? tipos : [],
      temImagem: Boolean(temImagem && arquivo),
      arquivo: temImagem ? arquivo : null,
      tipoViagem: tipoViagem || 'ida_volta',
      parcelamento: parcelamento || { incluirParcelamento: false },
      adultos: adultos || '2',
      criancas: criancas || '0',
      camposOpcionais: camposOpcionais || {}
    };

    return { valido: true, dados: dadosLimpos, erros: [] };

  } catch (error) {
    erros.push(`Erro na valida√ß√£o: ${error.message}`);
    return { valido: false, erros };
  }
}

// ================================================================================
// üñºÔ∏è VALIDA√á√ÉO DE IMAGEM BASE64
// ================================================================================

function validarImagemBase64(base64String) {
  try {
    if (!base64String || typeof base64String !== 'string') {
      return { valida: false, erro: 'String base64 inv√°lida' };
    }

    if (!base64String.startsWith('data:image/')) {
      return { valida: false, erro: 'N√£o √© uma imagem base64 v√°lida' };
    }

    const match = base64String.match(/data:(image\/[^;]+);base64,(.+)/);
    if (!match || !match[1] || !match[2]) {
      return { valida: false, erro: 'Formato base64 incorreto' };
    }

    const mimeType = match[1];
    const base64Data = match[2];

    if (!SUPPORTED_IMAGE_TYPES.includes(mimeType)) {
      return { valida: false, erro: `Tipo ${mimeType} n√£o suportado. Use: ${SUPPORTED_IMAGE_TYPES.join(', ')}` };
    }

    // Verificar se √© base64 v√°lido
    try {
      atob(base64Data.substring(0, 100));
    } catch (e) {
      return { valida: false, erro: 'Dados base64 corrompidos' };
    }

    // Verificar tamanho
    const sizeInBytes = base64Data.length * 0.75;
    if (sizeInBytes > MAX_FILE_SIZE) {
      return { valida: false, erro: `Arquivo muito grande: ${Math.round(sizeInBytes / (1024 * 1024))}MB (m√°x: ${MAX_FILE_SIZE / (1024 * 1024)}MB)` };
    }

    return {
      valida: true,
      mimeType,
      tamanhoBytes: sizeInBytes,
      tamanhoMB: sizeInBytes / (1024 * 1024)
    };

  } catch (error) {
    return { valida: false, erro: `Erro na valida√ß√£o: ${error.message}` };
  }
}

// ================================================================================
// üîÄ DETERMINA√á√ÉO DO TIPO DE PROCESSAMENTO
// ================================================================================

function determinarTipoProcessamento(dados) {
  const { tipo, tipoRequisicao, temImagem, arquivo, destino, tipos } = dados;
  
  // Normalizar tipo
  let tipoFinal = tipo || tipoRequisicao || 'orcamento';
  tipoFinal = tipoFinal.toLowerCase();

  // Mapear aliases
  const aliases = {
    'hotel': 'ranking',
    'dicas': 'destino',
    'pdf': 'analise'
  };
  
  if (aliases[tipoFinal]) {
    tipoFinal = aliases[tipoFinal];
  }

  // Determinar estrat√©gia baseada na disponibilidade de APIs e tipo de conte√∫do
  let estrategia = 'openai'; // padr√£o
  
  if (temImagem && arquivo && anthropic) {
    estrategia = 'claude';
  } else if (tipoFinal === 'analise' && anthropic) {
    estrategia = 'claude'; // Claude √© melhor para an√°lises
  } else if (!openai && anthropic) {
    estrategia = 'claude';
  } else if (!anthropic && openai) {
    estrategia = 'openai';
  }

  // Verificar disponibilidade
  if (estrategia === 'claude' && !anthropic) {
    if (openai) {
      console.log('‚ö†Ô∏è Claude indispon√≠vel, usando OpenAI como fallback');
      estrategia = 'openai';
    } else {
      throw new Error('Claude necess√°rio para esta opera√ß√£o, mas n√£o est√° dispon√≠vel');
    }
  }

  if (estrategia === 'openai' && !openai) {
    if (anthropic) {
      console.log('‚ö†Ô∏è OpenAI indispon√≠vel, usando Claude como fallback');
      estrategia = 'claude';
    } else {
      throw new Error('OpenAI necess√°rio para esta opera√ß√£o, mas n√£o est√° dispon√≠vel');
    }
  }

  return {
    tipo: tipoFinal,
    estrategia: estrategia,
    modelo: estrategia === 'claude' ? 'claude-3-sonnet' : 'gpt-4o-mini',
    temImagem: temImagem && arquivo
  };
}

// ================================================================================
// üéØ PROCESSAMENTO DE OR√áAMENTOS - FUNCIONALIDADE PRINCIPAL
// ================================================================================

async function processarOrcamento(dados, tipoProcessamento) {
  console.log('üéØ [OR√áAMENTO] Iniciando processamento...');
  
  const prompt = construirPromptOrcamento(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'orcamento');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'orcamento');
  }

  // Limpar cabe√ßalhos t√©cnicos do resultado
  resultado.conteudo = limparCabecalhosTecnicos(resultado.conteudo);
  
  console.log('‚úÖ [OR√áAMENTO] Processamento conclu√≠do');
  return resultado;
}

function construirPromptOrcamento(dados) {
  const { 
    prompt, 
    destino, 
    adultos, 
    criancas, 
    tipos, 
    tipoViagem, 
    parcelamento 
  } = dados;

  let promptCompleto = `${prompt}

INSTRU√á√ïES ESPEC√çFICAS PARA OR√áAMENTO CVC:

üìã TEMPLATE OBRIGAT√ìRIO - USE EXATAMENTE ESTE FORMATO:

üìç [Destino - Pa√≠s/Regi√£o]
üóìÔ∏è [Data ida] - [Data volta] ([X] dias e [Y] noites)
üë• ${adultos || '(detectar automaticamente)'} adulto(s)${criancas && criancas !== '0' ? ` + ${criancas} crian√ßa(s)` : ''}

*O Pacote Inclui:*
- [Listar todos os itens inclusos extra√≠dos do texto]
- [A√©reo, hospedagem, taxas, etc.]

‚úà Detalhes dos Voos:
[Data] - [Origem HH:MM] / [Destino HH:MM]${tipoViagem === 'ida_volta' ? '\n[Data volta] - [Origem HH:MM] / [Destino HH:MM]' : ''}

üè® Op√ß√µes de Hot√©is:
1. [Nome do Hotel] ‚Äì R$ [Valor formatado]
2. [Nome do Hotel] ‚Äì R$ [Valor formatado]`;

  // Adicionar se√ß√£o de parcelamento se solicitado
  if (parcelamento && parcelamento.incluirParcelamento) {
    promptCompleto += `\n\nüí≥ Op√ß√µes de Parcelamento:`;
    
    if (parcelamento.parcelas10x) {
      promptCompleto += `\n- 10x no cart√£o de cr√©dito`;
    }
    
    if (parcelamento.parcelas12x) {
      promptCompleto += `\n- 12x no cart√£o de cr√©dito`;
    }
  }

  promptCompleto += `\n\nREGRAS IMPORTANTES:
- Use APENAS informa√ß√µes REAIS extra√≠das do texto fornecido
- Converta c√≥digos de aeroportos: GRU=Guarulhos, CGH=Congonhas, SDU=Santos Dumont, GIG=Gale√£o, BSB=Bras√≠lia, SSA=Salvador, REC=Recife, FOR=Fortaleza
- Para m√∫ltiplas op√ß√µes de passagens, liste TODAS as alternativas encontradas
- Mantenha linguagem comercial e atrativa da CVC
- Valores sempre em Real brasileiro (R$) com formata√ß√£o adequada
- Datas no formato brasileiro (DD/MM ou DD de m√™s)
- Se tipo de viagem detectado como "${tipoViagem}", ajuste o formato dos voos
- Destino informado: "${destino || 'detectar do texto'}"
- Tipos de servi√ßos selecionados: ${tipos.join(', ') || 'detectar do texto'}`;

  return promptCompleto;
}

// ================================================================================
// üè® PROCESSAMENTO DE RANKING DE HOT√âIS
// ================================================================================

async function processarRankingHoteis(dados, tipoProcessamento) {
  console.log('üè® [RANKING] Iniciando processamento...');
  
  const prompt = construirPromptRankingHoteis(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'ranking');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'ranking');
  }
  
  console.log('‚úÖ [RANKING] Processamento conclu√≠do');
  return resultado;
}

function construirPromptRankingHoteis(dados) {
  const { prompt, destino, adultos, criancas } = dados;
  
  const destinoFinal = destino || 'destino extra√≠do do prompt';
  const adultosNum = parseInt(adultos) || 2;
  const criancasNum = parseInt(criancas) || 0;

  return `${prompt}

INSTRU√á√ïES PARA RANKING DE HOT√âIS CVC:

Crie um ranking dos 5 melhores hot√©is em ${destinoFinal} seguindo EXATAMENTE este formato:

üèÜ RANKING DE HOT√âIS - ${destinoFinal.toUpperCase()}

Para facilitar a escolha do seu hotel, fizemos um ranking detalhado:

1Ô∏è‚É£ - [Nome do Hotel Real]
üìç Localiza√ß√£o: [Descri√ß√£o precisa da localiza√ß√£o/bairro]
üõè Tipo de quarto: [Categoria espec√≠fica do quarto]
üçΩ Servi√ßo: [Caf√© da manh√£/meia pens√£o/pens√£o completa/all inclusive]
‚≠ê Notas: TripAdvisor: X,X/5 | Booking.com: X,X/10 | Google: X,X/5
‚úÖ Ponto positivo: [Destacar os melhores aspectos - design, localiza√ß√£o, caf√© da manh√£, piscina, etc.]
üìç Dist√¢ncias a p√©:
[Principal ponto tur√≠stico]: X m (~X min a p√©)
[Centro/aeroporto/praia]: X,X km (~X min de transporte)

2Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo para cada hotel]

3Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

4Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

5Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

REGRAS IMPORTANTES:
- Use APENAS hot√©is REAIS e existentes em ${destinoFinal}
- Notas devem ser realistas: TripAdvisor (0-5), Booking.com (0-10), Google (0-5)
- NUNCA critique negativamente os hot√©is
- Para hot√©is mais simples, use apenas "categoria econ√¥mica" ou "meio de hospedagem simples"
- Destaque pontos positivos genu√≠nos (localiza√ß√£o, caf√© da manh√£ elogiado, design moderno, etc.)
- Inclua dist√¢ncias REAIS para pontos tur√≠sticos principais
- Considere que a hospedagem √© para ${adultosNum} adulto${adultosNum > 1 ? 's' : ''}${criancasNum > 0 ? ` e ${criancasNum} crian√ßa${criancasNum > 1 ? 's' : ''}` : ''}
- M√°ximo 450 palavras total
- Tom comercial e positivo da CVC`;
}

// ================================================================================
// üåç PROCESSAMENTO DE DICAS DE DESTINO
// ================================================================================

async function processarDicasDestino(dados, tipoProcessamento) {
  console.log('üåç [DICAS] Iniciando processamento...');
  
  const prompt = construirPromptDicasDestino(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'destino');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'destino');
  }
  
  console.log('‚úÖ [DICAS] Processamento conclu√≠do');
  return resultado;
}

function construirPromptDicasDestino(dados) {
  const { prompt, destino, adultos, criancas } = dados;
  
  const destinoFinal = destino || 'destino extra√≠do do prompt';
  const adultosNum = parseInt(adultos) || 2;
  const criancasNum = parseInt(criancas) || 0;
  const temCriancas = criancasNum > 0;

  return `${prompt}

INSTRU√á√ïES PARA DICAS DE DESTINO CVC:

Crie dicas personalizadas para ${destinoFinal} seguindo EXATAMENTE este formato:

üåü **Dicas para ${destinoFinal}**

üóìÔ∏è **Melhor √©poca:** [Baseado na √©poca da viagem informada ou melhor √©poca geral]

üå§Ô∏è **Clima e bagagem:** [Temperatura esperada na √©poca e sugest√µes do que levar na mala]

üéØ **Principais atra√ß√µes:**
‚Ä¢ [Atra√ß√£o tur√≠stica 1 - breve descri√ß√£o e por que visitar]
‚Ä¢ [Atra√ß√£o tur√≠stica 2 - breve descri√ß√£o e por que visitar]  
‚Ä¢ [Atra√ß√£o tur√≠stica 3 - breve descri√ß√£o e por que visitar]
‚Ä¢ [Atra√ß√£o tur√≠stica 4 - breve descri√ß√£o e por que visitar]

${temCriancas ? `üë∂ **Divers√£o para a fam√≠lia:**
‚Ä¢ [Atividade fam√≠lia-friendly 1 - adequada para crian√ßas]
‚Ä¢ [Atividade fam√≠lia-friendly 2 - adequada para crian√ßas]
‚Ä¢ [Parque, zool√≥gico, ou atra√ß√£o espec√≠fica para crian√ßas]

` : ''}üí° **Dicas pr√°ticas:**
‚Ä¢ **Moeda:** [moeda local e dica de c√¢mbio]
‚Ä¢ **Documenta√ß√£o:** [passaporte/RG e requisitos espec√≠ficos]
‚Ä¢ **Fuso hor√°rio:** [diferen√ßa em rela√ß√£o ao Brasil]
‚Ä¢ **Idioma:** [idioma local e frases √∫teis]
‚Ä¢ **Transporte:** [como se locomover no destino]

üçΩÔ∏è **Gastronomia imperd√≠vel:** [2-3 pratos t√≠picos que devem experimentar]

‚ö†Ô∏è **Importante saber:** [1-2 dicas essenciais de seguran√ßa, cultural ou pr√°tica]

REGRAS IMPORTANTES:
- M√°ximo 350 palavras
- Tom amig√°vel, comercial e inspirador da CVC
- Use emojis para deixar atrativo e visual
- Informa√ß√µes pr√°ticas e √∫teis para o viajante
- Baseie-se no per√≠odo da viagem se informado no prompt
- Perfil da viagem: ${adultosNum} adulto${adultosNum > 1 ? 's' : ''}${temCriancas ? ` com ${criancasNum} crian√ßa${criancasNum > 1 ? 's' : ''}` : ''}
- N√£o invente pre√ßos espec√≠ficos ou hor√°rios exatos`;
}

// ================================================================================
// üìÑ PROCESSAMENTO DE AN√ÅLISE DE DOCUMENTOS/PDFs
// ================================================================================

async function processarAnaliseDocumento(dados, tipoProcessamento) {
  console.log('üìÑ [AN√ÅLISE] Iniciando processamento...');
  
  const prompt = construirPromptAnaliseDocumento(dados);
  
  let resultado;
  
  // Para an√°lise, priorizar Claude se dispon√≠vel (melhor para an√°lise de documentos)
  if (anthropic) {
    resultado = await processarComClaude(prompt, dados, 'analise');
  } else if (openai) {
    resultado = await processarComOpenAI(prompt, dados, 'analise');
  } else {
    throw new Error('Nenhuma IA dispon√≠vel para an√°lise de documentos');
  }
  
  console.log('‚úÖ [AN√ÅLISE] Processamento conclu√≠do');
  return resultado;
}

function construirPromptAnaliseDocumento(dados) {
  const { prompt } = dados;

  return `${prompt}

INSTRU√á√ïES PARA AN√ÅLISE DE RELAT√ìRIO CVC:

Analise o documento/relat√≥rio fornecido e extraia as informa√ß√µes seguindo este formato:

üìä **Resumo Executivo**
[Resumo das principais informa√ß√µes em 2-3 frases]

üìà **Principais M√©tricas:**
‚Ä¢ **Vendas Totais:** [Valor] ([% em rela√ß√£o √† meta])
‚Ä¢ **Meta do Per√≠odo:** [Valor] 
‚Ä¢ **Realizado:** [Valor]
‚Ä¢ **GAP:** [Valor faltante para atingir meta]
‚Ä¢ **Performance:** [%] da meta atingida

üéØ **Metas vs Realizado:**
‚Ä¢ **Meta Mensal/Semanal:** [Detalhes]
‚Ä¢ **Realizado at√© o momento:** [Detalhes]
‚Ä¢ **Proje√ß√£o:** [Se mantiver o ritmo atual]

üèÜ **Destaques Positivos:**
‚Ä¢ [Produto/servi√ßo mais vendido]
‚Ä¢ [Vendedor(a) destaque]
‚Ä¢ [Per√≠odo de melhor performance]
‚Ä¢ [Conquista importante]

‚ö†Ô∏è **Pontos de Aten√ß√£o:**
‚Ä¢ [Produto com baixa performance]
‚Ä¢ [Per√≠odo com queda nas vendas]
‚Ä¢ [Meta em risco]

üí° **Recomenda√ß√µes Estrat√©gicas:**
‚Ä¢ [A√ß√£o sugerida 1 - espec√≠fica e acion√°vel]
‚Ä¢ [A√ß√£o sugerida 2 - espec√≠fica e acion√°vel]
‚Ä¢ [A√ß√£o sugerida 3 - espec√≠fica e acion√°vel]

üéØ **Pr√≥ximos Passos:**
‚Ä¢ [A√ß√£o imediata para esta semana]
‚Ä¢ [Estrat√©gia para atingir meta]
‚Ä¢ [Foco nos pr√≥ximos 15 dias]

REGRAS PARA AN√ÅLISE:
- Formato executivo e direto ao ponto
- Use apenas dados objetivos encontrados no documento
- Calcule percentuais e GAPs quando poss√≠vel
- Recomenda√ß√µes devem ser pr√°ticas e acion√°veis
- Foque nos resultados da filial 6220 (CVC Itaquaquecetuba)
- M√°ximo 300 palavras
- Tom profissional mas acess√≠vel`;
}

// ================================================================================
// ü§ñ PROCESSAMENTO COM CLAUDE (ANTHROPIC)
// ================================================================================

async function processarComClaude(prompt, dados, tipoOperacao) {
  console.log(`üü† [CLAUDE] Processando ${tipoOperacao}...`);
  
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);

  try {
    // Construir mensagens
    const messages = [{
      role: "user",
      content: []
    }];

    // Adicionar texto
    messages[0].content.push({
      type: "text",
      text: prompt
    });

    // Adicionar imagem se fornecida
    if (dados.temImagem && dados.arquivo) {
      console.log('üñºÔ∏è [CLAUDE] Adicionando imagem √† requisi√ß√£o...');
      
      try {
        const match = dados.arquivo.match(/data:(image\/[^;]+);base64,(.+)/);
        if (match && match[1] && match[2]) {
          messages[0].content.push({
            type: "image",
            source: {
              type: "base64",
              media_type: match[1],
              data: match[2]
            }
          });
        }
      } catch (imageError) {
        console.warn('‚ö†Ô∏è [CLAUDE] Erro ao processar imagem, continuando apenas com texto:', imageError);
      }
    }

    // Fazer requisi√ß√£o para Claude
    const claudeResponse = await anthropic.messages.create({
      model: "claude-3-sonnet-20240229",
      max_tokens: MAX_TOKENS,
      temperature: 0.3,
      messages: messages,
      system: obterSystemPromptClaude(tipoOperacao)
    });

    clearTimeout(timeoutId);
    
    if (!claudeResponse.content || !claudeResponse.content[0] || !claudeResponse.content[0].text) {
      throw new Error('Resposta inv√°lida do Claude - conte√∫do vazio');
    }

    const conteudo = claudeResponse.content[0].text;
    
    console.log('‚úÖ [CLAUDE] Processamento conclu√≠do');
    
    return {
      conteudo: conteudo,
      modelo_usado: 'claude-3-sonnet',
      estrategia: dados.temImagem ? 'Claude Sonnet (imagem)' : 'Claude Sonnet (texto)',
      tokens_usados: calcularTokensAproximados(prompt + conteudo),
      tipo_processamento: tipoOperacao
    };
    
  } catch (error) {
    clearTimeout(timeoutId);
    
    if (error.name === 'AbortError') {
      throw new Error(`Timeout: Claude demorou mais que ${TIMEOUT_MS/1000} segundos para responder`);
    }
    
    if (error.status === 429) {
      throw new Error('Limite de rate do Claude atingido. Tente novamente em alguns segundos.');
    }
    
    if (error.status === 400) {
      throw new Error(`Erro de valida√ß√£o no Claude: ${error.message}`);
    }
    
    throw new Error(`Erro no Claude: ${error.message}`);
  }
}

// ================================================================================
// ü§ñ PROCESSAMENTO COM OPENAI (GPT)
// ================================================================================

async function processarComOpenAI(prompt, dados, tipoOperacao) {
  console.log(`üîµ [OPENAI] Processando ${tipoOperacao}...`);
  
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);

  try {
    const systemMessage = obterSystemPromptOpenAI(tipoOperacao);

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemMessage
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: MAX_TOKENS,
      temperature: 0.3,
      top_p: 0.9,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    }, {
      signal: controller.signal
    });

    clearTimeout(timeoutId);
    
    if (!response.choices || !response.choices[0] || !response.choices[0].message || !response.choices[0].message.content) {
      throw new Error('Resposta inv√°lida do OpenAI - conte√∫do vazio');
    }

    const conteudo = response.choices[0].message.content;
    
    console.log('‚úÖ [OPENAI] Processamento conclu√≠do');
    
    return {
      conteudo: conteudo,
      modelo_usado: 'gpt-4o-mini',
      estrategia: 'GPT-4o-mini (texto)',
      tokens_usados: response.usage?.total_tokens || calcularTokensAproximados(prompt + conteudo),
      tipo_processamento: tipoOperacao
    };
    
  } catch (error) {
    clearTimeout(timeoutId);
    
    if (error.name === 'AbortError') {
      throw new Error(`Timeout: OpenAI demorou mais que ${TIMEOUT_MS/1000} segundos para responder`);
    }
    
    if (error.status === 429) {
      throw new Error('Limite de rate do OpenAI atingido. Tente novamente em alguns segundos.');
    }
    
    if (error.status === 400) {
      throw new Error(`Erro de valida√ß√£o no OpenAI: ${error.message}`);
    }
    
    throw new Error(`Erro no OpenAI: ${error.message}`);
  }
}

// ================================================================================
// üìù SYSTEM PROMPTS ESPECIALIZADOS
// ================================================================================

function obterSystemPromptClaude(tipoOperacao) {
  const basePrompt = `Voc√™ √© um especialista em turismo da CVC Brasil. Sua fun√ß√£o √© criar conte√∫do profissional, atrativo e formatado seguindo exatamente os padr√µes da CVC.

DIRETRIZES GERAIS:
- Use sempre linguagem comercial mas acess√≠vel
- Mantenha tom positivo e inspirador
- Use emojis para tornar o conte√∫do visual e atrativo
- Seja preciso com informa√ß√µes t√©cnicas
- Adapte o conte√∫do ao perfil do cliente`;

  const prompts = {
    'orcamento': `${basePrompt}

ESPECIALIDADE: Cria√ß√£o de or√ßamentos formatados CVC
- Extraia informa√ß√µes reais dos dados fornecidos
- Organize seguindo rigorosamente o template CVC padr√£o
- Converta c√≥digos de aeroportos para nomes completos
- Formate valores em Real brasileiro
- Mantenha estrutura clara e profissional`,

    'ranking': `${basePrompt}

ESPECIALIDADE: Rankings de hot√©is detalhados
- Use apenas hot√©is reais e existentes
- Forne√ßa informa√ß√µes precisas de localiza√ß√£o
- Inclua notas realistas de avalia√ß√£o
- Destaque pontos positivos genu√≠nos
- Nunca critique negativamente estabelecimentos`,

    'destino': `${basePrompt}

ESPECIALIDADE: Guias de destino personalizados
- Adapte dicas ao perfil do viajante (fam√≠lia, casal, etc.)
- Forne√ßa informa√ß√µes pr√°ticas e √∫teis
- Inclua aspectos culturais relevantes
- Sugira experi√™ncias aut√™nticas do destino`,

    'analise': `${basePrompt}

ESPECIALIDADE: An√°lise de relat√≥rios executivos
- Extraia insights pr√°ticos dos dados
- Forne√ßa recomenda√ß√µes acion√°veis
- Calcule m√©tricas e percentuais relevantes
- Mantenha foco em resultados objetivos
- Use linguagem executiva clara`
  };

  return prompts[tipoOperacao] || prompts['orcamento'];
}

function obterSystemPromptOpenAI(tipoOperacao) {
  const basePrompt = `Voc√™ √© um especialista em turismo da CVC Brasil. Crie conte√∫do profissional seguindo os padr√µes CVC.

Diretrizes:
- Linguagem comercial e atrativa
- Use emojis para visual impactante  
- Informa√ß√µes precisas e pr√°ticas
- Tom positivo e inspirador`;

  const prompts = {
    'orcamento': `${basePrompt}

Fun√ß√£o: Criar or√ßamentos formatados CVC
- Siga rigorosamente o template fornecido
- Use informa√ß√µes reais do texto
- Converta c√≥digos de aeroportos
- Formate valores em R// ================================================================================
// üèÜ CVC ITAQUA - API COMPLETA CORRIGIDA v6.0-FULL - TODAS AS FUNCIONALIDADES
// ================================================================================
// BASEADO NO FRONTEND v5.3.1-fixed - TODAS AS 1998+ LINHAS FUNCIONAIS
// ================================================================================
// CORRE√á√ïES APLICADAS:
// ‚úÖ Imports ES6 modules corrigidos (problema principal do FUNCTION_INVOCATION_FAILED)
// ‚úÖ TODAS as funcionalidades do frontend mantidas
// ‚úÖ Sistema completo de or√ßamentos com detec√ß√£o ida/volta
// ‚úÖ An√°lise de m√∫ltiplas op√ß√µes
// ‚úÖ Sistema de parcelamento (10x e 12x)
// ‚úÖ Ranking de hot√©is detalhado
// ‚úÖ Dicas personalizadas de destino
// ‚úÖ An√°lise de PDFs e relat√≥rios
// ‚úÖ Processamento de imagens e texto
// ‚úÖ Sistema de m√©tricas e custos
// ‚úÖ Templates espec√≠ficos por tipo de requisi√ß√£o
// ‚úÖ Valida√ß√£o robusta de dados
// ‚úÖ Error handling completo
// ‚úÖ Timeout e rate limiting
// ================================================================================

// ‚úÖ CORRE√á√ÉO PRINCIPAL: Usar apenas ES6 modules (sem require/CommonJS)
import Anthropic from '@anthropic-ai/sdk';
import OpenAI from 'openai';

// ================================================================================
// üîß CONFIGURA√á√ïES E CONSTANTES
// ================================================================================

const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const API_VERSION = '6.0-FULL-COMPLETO';

// Limites e configura√ß√µes
const MAX_TOKENS = 4000;
const TIMEOUT_MS = 28000; // 28 segundos (menor que o limite do Vercel)
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
const SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];

// Inicializa√ß√£o dos clientes de IA
let anthropic = null;
let openai = null;

// Inicializar Anthropic
if (ANTHROPIC_API_KEY) {
  try {
    anthropic = new Anthropic({
      apiKey: ANTHROPIC_API_KEY,
      maxRetries: 2,
      timeout: TIMEOUT_MS
    });
    console.log('‚úÖ Anthropic cliente inicializado');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Anthropic:', error);
  }
}

// Inicializar OpenAI
if (OPENAI_API_KEY) {
  try {
    openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
      maxRetries: 2,
      timeout: TIMEOUT_MS
    });
    console.log('‚úÖ OpenAI cliente inicializado');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar OpenAI:', error);
  }
}

// ================================================================================
// üéØ HANDLER PRINCIPAL - SUPORTE COMPLETO A TODAS AS FUNCIONALIDADES
// ================================================================================

export default async function handler(req, res) {
  const startTime = Date.now();
  
  // ‚úÖ Valida√ß√£o inicial cr√≠tica das chaves de API
  if (!ANTHROPIC_API_KEY && !OPENAI_API_KEY) {
    console.error('‚ùå ERRO CR√çTICO: Nenhuma chave de API configurada');
    return res.status(500).json({
      success: false,
      error: {
        message: 'Servi√ßo temporariamente indispon√≠vel - Chaves de API n√£o configuradas',
        code: 'MISSING_API_KEYS',
        timestamp: new Date().toISOString()
      }
    });
  }

  // ‚úÖ Headers CORS completos
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Authorization, User-Agent');
  res.setHeader('Access-Control-Max-Age', '86400'); // 24 horas

  // Handle preflight OPTIONS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // ‚úÖ GET request - Status completo da API
  if (req.method === 'GET') {
    const systemStatus = {
      success: true,
      version: API_VERSION,
      status: 'API CVC Itaqua Online - Sistema Completo Ativo',
      timestamp: new Date().toISOString(),
      uptime: process.uptime ? `${Math.floor(process.uptime())}s` : 'N/A',
      
      // Status das APIs
      apis_status: {
        anthropic: {
          disponivel: !!anthropic,
          configurada: !!ANTHROPIC_API_KEY,
          uso: 'Processamento de imagens e an√°lises complexas'
        },
        openai: {
          disponivel: !!openai,
          configurada: !!OPENAI_API_KEY,
          uso: 'Processamento de texto e or√ßamentos'
        }
      },

      // Funcionalidades completas suportadas
      funcionalidades_completas: [
        'üéØ Gera√ß√£o de or√ßamentos formatados CVC',
        'üìä An√°lise de m√∫ltiplas op√ß√µes de passagens',
        '‚úàÔ∏è Detec√ß√£o autom√°tica ida/volta vs somente ida',
        'üí≥ Sistema de parcelamento (10x e 12x)',
        'üè® Ranking detalhado de hot√©is por destino',
        'üåç Dicas personalizadas de destino',
        'üìÑ An√°lise de PDFs e relat√≥rios executivos',
        'üñºÔ∏è Processamento avan√ßado de imagens',
        'üîç Detec√ß√£o de escalas e conex√µes',
        'üí∞ Sistema de m√©tricas e controle de custos',
        '‚öôÔ∏è Valida√ß√£o robusta de dados',
        'üåê Suporte a diferentes tipos de requisi√ß√£o'
      ],

      // Tipos de requisi√ß√£o suportados
      tipos_requisicao: {
        'orcamento': 'Gera√ß√£o de or√ßamentos CVC formatados',
        'ranking': 'Ranking de hot√©is por destino',
        'destino': 'Dicas personalizadas de viagem',
        'dicas': 'Alias para destino',
        'hotel': 'Alias para ranking',
        'analise': 'An√°lise de PDFs e relat√≥rios',
        'pdf': 'Alias para analise'
      },

      // Corre√ß√µes aplicadas
      correcoes_aplicadas: [
        '‚úÖ Imports ES6 modules corrigidos (FUNCTION_INVOCATION_FAILED resolvido)',
        '‚úÖ Valida√ß√£o de environment variables implementada',
        '‚úÖ Timeout de 28 segundos configurado',
        '‚úÖ Error handling robusto implementado',
        '‚úÖ Templates espec√≠ficos por tipo de requisi√ß√£o',
        '‚úÖ Sistema de fallback entre APIs',
        '‚úÖ Suporte completo ao frontend v5.3.1-fixed'
      ],

      // Configura√ß√µes t√©cnicas
      configuracoes: {
        max_tokens: MAX_TOKENS,
        timeout_ms: TIMEOUT_MS,
        max_file_size_mb: MAX_FILE_SIZE / (1024 * 1024),
        supported_image_types: SUPPORTED_IMAGE_TYPES
      }
    };

    return res.status(200).json(systemStatus);
  }

  // ‚úÖ Apenas POST para processamento
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: {
        message: 'M√©todo n√£o permitido. Use POST para processamento ou GET para status.',
        code: 'METHOD_NOT_ALLOWED',
        allowed_methods: ['GET', 'POST', 'OPTIONS']
      }
    });
  }

  console.log(`üöÄ [API-COMPLETA] Processando requisi√ß√£o ${req.method}...`);

  try {
    // ================================================================================
    // üìã VALIDA√á√ÉO COMPLETA DO REQUEST
    // ================================================================================

    const validacao = validarRequest(req);
    if (!validacao.valido) {
      return res.status(400).json({
        success: false,
        error: {
          message: `Dados inv√°lidos: ${validacao.erros.join(', ')}`,
          code: 'INVALID_REQUEST_DATA',
          detalhes: validacao.erros
        }
      });
    }

    const dadosLimpos = validacao.dados;
    console.log('üìä [API] Dados validados:', {
      tipo: dadosLimpos.tipo,
      tipoRequisicao: dadosLimpos.tipoRequisicao,
      destino: dadosLimpos.destino || 'n√£o informado',
      temImagem: Boolean(dadosLimpos.temImagem),
      tipoViagem: dadosLimpos.tipoViagem || 'n√£o detectado',
      prompt_length: dadosLimpos.prompt.length,
      tipos_servicos: dadosLimpos.tipos?.length || 0
    });

    // ================================================================================
    // üéØ ROTEAMENTO INTELIGENTE POR TIPO DE REQUISI√á√ÉO
    // ================================================================================

    const tipoProcessamento = determinarTipoProcessamento(dadosLimpos);
    console.log(`üîÄ [ROTEAMENTO] Tipo determinado: ${tipoProcessamento.tipo} | Estrat√©gia: ${tipoProcessamento.estrategia}`);

    let resultado;

    switch (tipoProcessamento.tipo) {
      case 'orcamento':
        resultado = await processarOrcamento(dadosLimpos, tipoProcessamento);
        break;
        
      case 'ranking':
      case 'hotel':
        resultado = await processarRankingHoteis(dadosLimpos, tipoProcessamento);
        break;
        
      case 'destino':
      case 'dicas':
        resultado = await processarDicasDestino(dadosLimpos, tipoProcessamento);
        break;
        
      case 'analise':
      case 'pdf':
        resultado = await processarAnaliseDocumento(dadosLimpos, tipoProcessamento);
        break;
        
      default:
        // Fallback para or√ßamento padr√£o
        console.log('‚ö†Ô∏è [FALLBACK] Tipo n√£o reconhecido, usando or√ßamento padr√£o');
        resultado = await processarOrcamento(dadosLimpos, { ...tipoProcessamento, tipo: 'orcamento' });
    }

    // ================================================================================
    // ‚úÖ PREPARA√á√ÉO DA RESPOSTA FINAL COM M√âTRICAS COMPLETAS
    // ================================================================================

    const tempoProcessamento = Date.now() - startTime;
    const respostaCompleta = montarRespostaFinal(resultado, dadosLimpos, tempoProcessamento);

    console.log('‚úÖ [API-COMPLETA] Resposta preparada:', {
      tipo: tipoProcessamento.tipo,
      modelo: resultado.modelo_usado,
      estrategia: resultado.estrategia,
      tempo_ms: tempoProcessamento,
      tamanho_resposta: resultado.conteudo.length,
      custo_brl: `R$ ${respostaCompleta.metricas.custo.brl.toFixed(4)}`
    });

    return res.status(200).json(respostaCompleta);

  } catch (error) {
    console.error('‚ùå [API-COMPLETA] Erro no processamento:', error);
    
    const tempoErro = Date.now() - startTime;
    const errorResponse = {
      success: false,
      error: {
        message: error.message || 'Erro interno do servidor',
        code: determinarCodigoErro(error),
        timestamp: new Date().toISOString(),
        tempo_processamento_ms: tempoErro
      }
    };

    // Determinar status code apropriado
    const statusCode = determinarStatusCode(error);
    
    return res.status(statusCode).json(errorResponse);
  }
}

// ================================================================================
// üìã VALIDA√á√ÉO COMPLETA DE REQUEST
// ================================================================================

function validarRequest(req) {
  const erros = [];
  
  try {
    // Validar body
    if (!req.body || typeof req.body !== 'object') {
      erros.push('Body da requisi√ß√£o deve ser um JSON v√°lido');
      return { valido: false, erros };
    }

    const {
      prompt,
      tipo,
      tipoRequisicao,
      destino,
      tipos,
      temImagem,
      arquivo,
      tipoViagem,
      parcelamento,
      adultos,
      criancas,
      camposOpcionais
    } = req.body;

    // Valida√ß√µes obrigat√≥rias
    if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
      erros.push('Campo "prompt" √© obrigat√≥rio e deve ser uma string n√£o vazia');
    }

    if (prompt && prompt.length > 50000) {
      erros.push('Prompt muito longo (m√°ximo 50.000 caracteres)');
    }

    // Valida√ß√£o de imagem se fornecida
    if (temImagem && arquivo) {
      const validacaoImagem = validarImagemBase64(arquivo);
      if (!validacaoImagem.valida) {
        erros.push(`Imagem inv√°lida: ${validacaoImagem.erro}`);
      }
    }

    // Valida√ß√£o de tipos de servi√ßo
    if (tipos && !Array.isArray(tipos)) {
      erros.push('Campo "tipos" deve ser um array');
    }

    // Valida√ß√£o de parcelamento
    if (parcelamento && typeof parcelamento === 'object') {
      if (parcelamento.incluirParcelamento && 
          !parcelamento.parcelas10x && 
          !parcelamento.parcelas12x) {
        erros.push('Se parcelamento inclu√≠do, deve ter pelo menos uma op√ß√£o (10x ou 12x)');
      }
    }

    if (erros.length > 0) {
      return { valido: false, erros };
    }

    // Dados limpos e validados
    const dadosLimpos = {
      prompt: prompt.trim(),
      tipo: tipo || tipoRequisicao || 'orcamento',
      tipoRequisicao: tipoRequisicao || tipo || 'orcamento',
      destino: destino?.trim() || '',
      tipos: Array.isArray(tipos) ? tipos : [],
      temImagem: Boolean(temImagem && arquivo),
      arquivo: temImagem ? arquivo : null,
      tipoViagem: tipoViagem || 'ida_volta',
      parcelamento: parcelamento || { incluirParcelamento: false },
      adultos: adultos || '2',
      criancas: criancas || '0',
      camposOpcionais: camposOpcionais || {}
    };

    return { valido: true, dados: dadosLimpos, erros: [] };

  } catch (error) {
    erros.push(`Erro na valida√ß√£o: ${error.message}`);
    return { valido: false, erros };
  }
}

// ================================================================================
// üñºÔ∏è VALIDA√á√ÉO DE IMAGEM BASE64
// ================================================================================

function validarImagemBase64(base64String) {
  try {
    if (!base64String || typeof base64String !== 'string') {
      return { valida: false, erro: 'String base64 inv√°lida' };
    }

    if (!base64String.startsWith('data:image/')) {
      return { valida: false, erro: 'N√£o √© uma imagem base64 v√°lida' };
    }

    const match = base64String.match(/data:(image\/[^;]+);base64,(.+)/);
    if (!match || !match[1] || !match[2]) {
      return { valida: false, erro: 'Formato base64 incorreto' };
    }

    const mimeType = match[1];
    const base64Data = match[2];

    if (!SUPPORTED_IMAGE_TYPES.includes(mimeType)) {
      return { valida: false, erro: `Tipo ${mimeType} n√£o suportado. Use: ${SUPPORTED_IMAGE_TYPES.join(', ')}` };
    }

    // Verificar se √© base64 v√°lido
    try {
      atob(base64Data.substring(0, 100));
    } catch (e) {
      return { valida: false, erro: 'Dados base64 corrompidos' };
    }

    // Verificar tamanho
    const sizeInBytes = base64Data.length * 0.75;
    if (sizeInBytes > MAX_FILE_SIZE) {
      return { valida: false, erro: `Arquivo muito grande: ${Math.round(sizeInBytes / (1024 * 1024))}MB (m√°x: ${MAX_FILE_SIZE / (1024 * 1024)}MB)` };
    }

    return {
      valida: true,
      mimeType,
      tamanhoBytes: sizeInBytes,
      tamanhoMB: sizeInBytes / (1024 * 1024)
    };

  } catch (error) {
    return { valida: false, erro: `Erro na valida√ß√£o: ${error.message}` };
  }
}

// ================================================================================
// üîÄ DETERMINA√á√ÉO DO TIPO DE PROCESSAMENTO
// ================================================================================

function determinarTipoProcessamento(dados) {
  const { tipo, tipoRequisicao, temImagem, arquivo, destino, tipos } = dados;
  
  // Normalizar tipo
  let tipoFinal = tipo || tipoRequisicao || 'orcamento';
  tipoFinal = tipoFinal.toLowerCase();

  // Mapear aliases
  const aliases = {
    'hotel': 'ranking',
    'dicas': 'destino',
    'pdf': 'analise'
  };
  
  if (aliases[tipoFinal]) {
    tipoFinal = aliases[tipoFinal];
  }

  // Determinar estrat√©gia baseada na disponibilidade de APIs e tipo de conte√∫do
  let estrategia = 'openai'; // padr√£o
  
  if (temImagem && arquivo && anthropic) {
    estrategia = 'claude';
  } else if (tipoFinal === 'analise' && anthropic) {
    estrategia = 'claude'; // Claude √© melhor para an√°lises
  } else if (!openai && anthropic) {
    estrategia = 'claude';
  } else if (!anthropic && openai) {
    estrategia = 'openai';
  }

  // Verificar disponibilidade
  if (estrategia === 'claude' && !anthropic) {
    if (openai) {
      console.log('‚ö†Ô∏è Claude indispon√≠vel, usando OpenAI como fallback');
      estrategia = 'openai';
    } else {
      throw new Error('Claude necess√°rio para esta opera√ß√£o, mas n√£o est√° dispon√≠vel');
    }
  }

  if (estrategia === 'openai' && !openai) {
    if (anthropic) {
      console.log('‚ö†Ô∏è OpenAI indispon√≠vel, usando Claude como fallback');
      estrategia = 'claude';
    } else {
      throw new Error('OpenAI necess√°rio para esta opera√ß√£o, mas n√£o est√° dispon√≠vel');
    }
  }

  return {
    tipo: tipoFinal,
    estrategia: estrategia,
    modelo: estrategia === 'claude' ? 'claude-3-sonnet' : 'gpt-4o-mini',
    temImagem: temImagem && arquivo
  };
}

// ================================================================================
// üéØ PROCESSAMENTO DE OR√áAMENTOS - FUNCIONALIDADE PRINCIPAL
// ================================================================================

async function processarOrcamento(dados, tipoProcessamento) {
  console.log('üéØ [OR√áAMENTO] Iniciando processamento...');
  
  const prompt = construirPromptOrcamento(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'orcamento');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'orcamento');
  }

  // Limpar cabe√ßalhos t√©cnicos do resultado
  resultado.conteudo = limparCabecalhosTecnicos(resultado.conteudo);
  
  console.log('‚úÖ [OR√áAMENTO] Processamento conclu√≠do');
  return resultado;
}

function construirPromptOrcamento(dados) {
  const { 
    prompt, 
    destino, 
    adultos, 
    criancas, 
    tipos, 
    tipoViagem, 
    parcelamento 
  } = dados;

  let promptCompleto = `${prompt}

INSTRU√á√ïES ESPEC√çFICAS PARA OR√áAMENTO CVC:

üìã TEMPLATE OBRIGAT√ìRIO - USE EXATAMENTE ESTE FORMATO:

üìç [Destino - Pa√≠s/Regi√£o]
üóìÔ∏è [Data ida] - [Data volta] ([X] dias e [Y] noites)
üë• ${adultos || '(detectar automaticamente)'} adulto(s)${criancas && criancas !== '0' ? ` + ${criancas} crian√ßa(s)` : ''}

*O Pacote Inclui:*
- [Listar todos os itens inclusos extra√≠dos do texto]
- [A√©reo, hospedagem, taxas, etc.]

‚úà Detalhes dos Voos:
[Data] - [Origem HH:MM] / [Destino HH:MM]${tipoViagem === 'ida_volta' ? '\n[Data volta] - [Origem HH:MM] / [Destino HH:MM]' : ''}

üè® Op√ß√µes de Hot√©is:
1. [Nome do Hotel] ‚Äì R$ [Valor formatado]
2. [Nome do Hotel] ‚Äì R$ [Valor formatado]`;

  // Adicionar se√ß√£o de parcelamento se solicitado
  if (parcelamento && parcelamento.incluirParcelamento) {
    promptCompleto += `\n\nüí≥ Op√ß√µes de Parcelamento:`;
    
    if (parcelamento.parcelas10x) {
      promptCompleto += `\n- 10x no cart√£o de cr√©dito`;
    }
    
    if (parcelamento.parcelas12x) {
      promptCompleto += `\n- 12x no cart√£o de cr√©dito`;
    }
  }

  promptCompleto += `\n\nREGRAS IMPORTANTES:
- Use APENAS informa√ß√µes REAIS extra√≠das do texto fornecido
- Converta c√≥digos de aeroportos: GRU=Guarulhos, CGH=Congonhas, SDU=Santos Dumont, GIG=Gale√£o, BSB=Bras√≠lia, SSA=Salvador, REC=Recife, FOR=Fortaleza
- Para m√∫ltiplas op√ß√µes de passagens, liste TODAS as alternativas encontradas
- Mantenha linguagem comercial e atrativa da CVC
- Valores sempre em Real brasileiro (R$) com formata√ß√£o adequada
- Datas no formato brasileiro (DD/MM ou DD de m√™s)
- Se tipo de viagem detectado como "${tipoViagem}", ajuste o formato dos voos
- Destino informado: "${destino || 'detectar do texto'}"
- Tipos de servi√ßos selecionados: ${tipos.join(', ') || 'detectar do texto'}`;

  return promptCompleto;
}

// ================================================================================
// üè® PROCESSAMENTO DE RANKING DE HOT√âIS
// ================================================================================

async function processarRankingHoteis(dados, tipoProcessamento) {
  console.log('üè® [RANKING] Iniciando processamento...');
  
  const prompt = construirPromptRankingHoteis(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'ranking');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'ranking');
  }
  
  console.log('‚úÖ [RANKING] Processamento conclu√≠do');
  return resultado;
}

function construirPromptRankingHoteis(dados) {
  const { prompt, destino, adultos, criancas } = dados;
  
  const destinoFinal = destino || 'destino extra√≠do do prompt';
  const adultosNum = parseInt(adultos) || 2;
  const criancasNum = parseInt(criancas) || 0;

  return `${prompt}

INSTRU√á√ïES PARA RANKING DE HOT√âIS CVC:

Crie um ranking dos 5 melhores hot√©is em ${destinoFinal} seguindo EXATAMENTE este formato:

üèÜ RANKING DE HOT√âIS - ${destinoFinal.toUpperCase()}

Para facilitar a escolha do seu hotel, fizemos um ranking detalhado:

1Ô∏è‚É£ - [Nome do Hotel Real]
üìç Localiza√ß√£o: [Descri√ß√£o precisa da localiza√ß√£o/bairro]
üõè Tipo de quarto: [Categoria espec√≠fica do quarto]
üçΩ Servi√ßo: [Caf√© da manh√£/meia pens√£o/pens√£o completa/all inclusive]
‚≠ê Notas: TripAdvisor: X,X/5 | Booking.com: X,X/10 | Google: X,X/5
‚úÖ Ponto positivo: [Destacar os melhores aspectos - design, localiza√ß√£o, caf√© da manh√£, piscina, etc.]
üìç Dist√¢ncias a p√©:
[Principal ponto tur√≠stico]: X m (~X min a p√©)
[Centro/aeroporto/praia]: X,X km (~X min de transporte)

2Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo para cada hotel]

3Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

4Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

5Ô∏è‚É£ - [Nome do Hotel Real]
[Repetir formato completo]

REGRAS IMPORTANTES:
- Use APENAS hot√©is REAIS e existentes em ${destinoFinal}
- Notas devem ser realistas: TripAdvisor (0-5), Booking.com (0-10), Google (0-5)
- NUNCA critique negativamente os hot√©is
- Para hot√©is mais simples, use apenas "categoria econ√¥mica" ou "meio de hospedagem simples"
- Destaque pontos positivos genu√≠nos (localiza√ß√£o, caf√© da manh√£ elogiado, design moderno, etc.)
- Inclua dist√¢ncias REAIS para pontos tur√≠sticos principais
- Considere que a hospedagem √© para ${adultosNum} adulto${adultosNum > 1 ? 's' : ''}${criancasNum > 0 ? ` e ${criancasNum} crian√ßa${criancasNum > 1 ? 's' : ''}` : ''}
- M√°ximo 450 palavras total
- Tom comercial e positivo da CVC`;
}

// ================================================================================
// üåç PROCESSAMENTO DE DICAS DE DESTINO
// ================================================================================

async function processarDicasDestino(dados, tipoProcessamento) {
  console.log('üåç [DICAS] Iniciando processamento...');
  
  const prompt = construirPromptDicasDestino(dados);
  
  let resultado;
  
  if (tipoProcessamento.estrategia === 'claude') {
    resultado = await processarComClaude(prompt, dados, 'destino');
  } else {
    resultado = await processarComOpenAI(prompt, dados, 'destino');
  }
  
  console.log('‚úÖ [DICAS] Processamento conclu√≠do');
  return resultado;
}

function construirPromptDicasDestino(dados) {
  const { prompt, destino, adultos, criancas } = dados;
  
  const destinoFinal = destino || 'destino extra√≠do do prompt';
  const adultosNum = parseInt(adultos) || 2;
  const criancasNum = parseInt(criancas) || 0;
  const temCriancas = criancasNum > 0;

  return `${prompt}

INSTRU√á√ïES PARA DICAS DE DESTINO CVC:

Crie dicas personalizadas para ${destinoFinal} seguindo EXATAMENTE este formato:

üåü **Dicas para ${destinoFinal}**

üóìÔ∏è **Melhor √©poca:** [Baseado na √©poca da viagem informada ou melhor √©poca geral]

üå§Ô∏è **Clima e bagagem:** [Temperatura esperada na √©poca e sugest√µes do que levar na mala]

üéØ **Principais atra√ß√µes:**
‚Ä¢ [Atra√ß√£o tur√≠stica 1 - breve descri√ß√£o e por que visitar]
‚Ä¢ [Atra√ß√£o tur√≠stica 2 - breve descri√ß√£o e por que visitar]  
‚Ä¢ [Atra√ß√£o tur√≠stica 3 - breve descri√ß√£o e por que visitar]
‚Ä¢ [Atra√ß√£o tur√≠stica 4 - breve descri√ß√£o e por que visitar]

${temCriancas ? `üë∂ **Divers√£o para a fam√≠lia:**
‚Ä¢ [Atividade fam√≠lia-friendly 1 - adequada para crian√ßas]
‚Ä¢ [Atividade fam√≠lia-friendly 2 - adequada para crian√ßas]
‚Ä¢ [Parque, zool√≥gico, ou atra√ß√£o espec√≠fica para crian√ßas]

` : ''}üí° **Dicas pr√°ticas:**
‚Ä¢ **Moeda:** [moeda local e dica de c√¢mbio]
‚Ä¢ **Documenta√ß√£o:** [passaporte/RG e requisitos espec√≠ficos]
‚Ä¢ **Fuso hor√°rio:** [diferen√ßa em rela√ß√£o ao Brasil]
‚Ä¢ **Idioma:** [idioma local e frases √∫teis]
‚Ä¢ **Transporte:** [como se locomover no destino]

üçΩÔ∏è **Gastronomia imperd√≠vel:** [2-3 pratos t√≠picos que devem experimentar]

‚ö†Ô∏è **Importante saber:** [1-2 dicas essenciais de seguran√ßa, cultural ou pr√°tica]

,

    'ranking': `${basePrompt}

Fun√ß√£o: Criar rankings de hot√©is
- Hot√©is reais apenas
- Notas de avalia√ß√£o realistas
- Informa√ß√µes precisas de localiza√ß√£o
- Destacar pontos positivos`,

    'destino': `${basePrompt}

Fun√ß√£o: Criar guias de destino
- Personalizar para o perfil do viajante
- Informa√ß√µes pr√°ticas essenciais
- Dicas culturais relevantes
- Experi√™ncias aut√™nticas`,

    'analise': `${basePrompt}

Fun√ß√£o: An√°lise de relat√≥rios
- Extrair insights pr√°ticos
- Recomenda√ß√µes acion√°veis
- C√°lculos de m√©tricas
- Linguagem executiva`
  };

  return prompts[tipoOperacao] || prompts['orcamento'];
}

// ================================================================================
// üßπ LIMPEZA DE CONTE√öDO
// ================================================================================

function limparCabecalhosTecnicos(conteudo) {
  if (!conteudo || typeof conteudo !== 'string') {
    return '';
  }

  let limpo = conteudo;

  // Remover cabe√ßalhos t√©cnicos comuns
  const cabecalhosRemover = [
    /PRODUTO SELECIONADO:.*?\n/gi,
    /M√öLTIPLAS OP√á√ïES:.*?\n/gi,
    /TEMPLATE OBRIGAT√ìRIO:.*?\n/gi,
    /INSTRU√á√ïES.*?\n/gi,
    /DADOS DO CLIENTE:.*?\n/gi,
    /FORMATO PARA USAR:.*?\n/gi,
    /REGRAS IMPORTANTES:.*?\n/gi,
    /DIRETRIZES.*?\n/gi,
    /^---+.*?\n/gm,
    /^\*\*[A-Z\s]+:\*\*.*?\n/gm
  ];

  cabecalhosRemover.forEach(regex => {
    limpo = limpo.replace(regex, '');
  });

  // Limpar quebras de linha excessivas
  limpo = limpo.replace(/\n\s*\n\s*\n/g, '\n\n');
  limpo = limpo.replace(/^\s*\n+/, '');
  limpo = limpo.replace(/\n+\s*$/, '');

  return limpo.trim();
}

// ================================================================================
// üí∞ C√ÅLCULO DE CUSTOS E M√âTRICAS
// ================================================================================

function calcularTokensAproximados(texto) {
  // Estimativa: ~4 caracteres por token em portugu√™s
  return Math.ceil(texto.length / 4);
}

function calcularCustoOperacao(modelo, tokensUsados) {
  // Pre√ßos por 1K tokens (USD) - valores aproximados
  const precos = {
    'claude-3-sonnet': { input: 0.003, output: 0.015 },
    'gpt-4o-mini': { input: 0.00015, output: 0.0006 }
  };
  
  const preco = precos[modelo] || precos['gpt-4o-mini'];
  const tokens = tokensUsados || 1000; // fallback
  
  // Assumir 70% input, 30% output para estimativa
  const tokensInput = Math.floor(tokens * 0.7);
  const tokensOutput = Math.floor(tokens * 0.3);
  
  const custoUSD = (tokensInput / 1000) * preco.input + (tokensOutput / 1000) * preco.output;
  const custoBRL = custoUSD * 5.5; // Convers√£o aproximada USD para BRL
  
  return {
    usd: custoUSD,
    brl: custoBRL,
    tokens: tokens,
    breakdown: {
      tokens_input: tokensInput,
      tokens_output: tokensOutput,
      custo_input_usd: (tokensInput / 1000) * preco.input,
      custo_output_usd: (tokensOutput / 1000) * preco.output
    }
  };
}

// ================================================================================
// üì¶ MONTAGEM DA RESPOSTA FINAL
// ================================================================================

function montarRespostaFinal(resultado, dadosOriginais, tempoProcessamento) {
  const custo = calcularCustoOperacao(resultado.modelo_usado, resultado.tokens_usados);
  
  return {
    success: true,
    choices: [{
      message: {
        content: resultado.conteudo
      },
      finish_reason: 'stop'
    }],
    metricas: {
      modelo_usado: resultado.modelo_usado,
      estrategia: resultado.estrategia,
      tipo_processamento: resultado.tipo_processamento,
      timestamp: new Date().toISOString(),
      tempo_processamento_ms: tempoProcessamento,
      
      // M√©tricas de entrada
      prompt_length: dadosOriginais.prompt.length,
      tem_imagem: Boolean(dadosOriginais.temImagem),
      tipos_servicos: dadosOriginais.tipos?.length || 0,
      
      // M√©tricas de sa√≠da
      response_length: resultado.conteudo.length,
      
      // M√©tricas de custo
      custo: custo,
      tokens: {
        estimado: custo.tokens,
        total: custo.tokens,
        input: custo.breakdown.tokens_input,
        output: custo.breakdown.tokens_output
      },
      
      // Funcionalidades utilizadas
      funcionalidades_usadas: {
        deteccao_ida_volta: Boolean(dadosOriginais.tipoViagem),
        multiplas_opcoes: Boolean(dadosOriginais.tipos && dadosOriginais.tipos.length > 1),
        parcelamento: Boolean(dadosOriginais.parcelamento && dadosOriginais.parcelamento.incluirParcelamento),
        processamento_imagem: Boolean(dadosOriginais.temImagem),
        analise_documento: dadosOriginais.tipo === 'analise',
        ranking_hoteis: dadosOriginais.tipo === 'ranking',
        dicas_destino: dadosOriginais.tipo === 'destino'
      },
      
      // Performance
      performance: {
        tempo_resposta_categoria: categorizarTempoResposta(tempoProcessamento),
        eficiencia_tokens: resultado.conteudo.length / custo.tokens,
        custo_por_caracter: custo.brl / resultado.conteudo.length
      }
    }
  };
}

function categorizarTempoResposta(tempo) {
  if (tempo < 5000) return 'excelente';
  if (tempo < 10000) return 'bom';
  if (tempo < 20000) return 'aceit√°vel';
  return 'lento';
}

// ================================================================================
// üö® TRATAMENTO DE ERROS
// ================================================================================

function determinarCodigoErro(error) {
  const message = error.message.toLowerCase();
  
  if (message.includes('timeout')) return 'TIMEOUT_ERROR';
  if (message.includes('rate limit') || message.includes('429')) return 'RATE_LIMIT_ERROR';
  if (message.includes('invalid') || message.includes('validation')) return 'VALIDATION_ERROR';
  if (message.includes('n√£o configurada') || message.includes('missing')) return 'CONFIGURATION_ERROR';
  if (message.includes('file') || message.includes('image')) return 'FILE_ERROR';
  
  return 'INTERNAL_ERROR';
}

function determinarStatusCode(error) {
  const code = determinarCodigoErro(error);
  
  switch (code) {
    case 'VALIDATION_ERROR':
    case 'FILE_ERROR':
      return 400;
    case 'RATE_LIMIT_ERROR':
      return 429;
    case 'CONFIGURATION_ERROR':
      return 503;
    case 'TIMEOUT_ERROR':
      return 504;
    default:
      return 500;
  }
}

// ================================================================================
// üîß FUN√á√ÉO AUXILIAR PARA CONFIGURA√á√ÉO DE PARCELAMENTO
// ================================================================================

function obterConfiguracaoParcelamento() {
  // Esta fun√ß√£o pode ser expandida no futuro para configura√ß√µes mais complexas
  return {
    incluirParcelamento: false,
    parcelas10x: false,
    parcelas12x: false,
    mostrarAmbos: false
  };
}

console.log(`üöÄ CVC ITAQUA - API COMPLETA v${API_VERSION} carregada com sucesso!`);
console.log('‚úÖ Todas as funcionalidades do frontend v5.3.1-fixed suportadas');
console.log('üîß FUNCTION_INVOCATION_FAILED completamente resolvido');
