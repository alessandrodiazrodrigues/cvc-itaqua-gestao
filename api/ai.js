// üöÄ api/ai.js - v8.1 - ORQUESTRADOR CORRIGIDO COM √çNDICE E NUMERA√á√ÉO
// CORRE√á√ÉO CR√çTICA: processarRespostaCompleta agora recebe 3 argumentos
// CORRE√á√ÉO CR√çTICA: Compatibilidade ES6 completa
// ARQUITETURA: 100% modular - apenas orquestra, nunca implementa

console.log("üöÄ CVC ITAQUA API v8.1 - ORQUESTRADOR CORRIGIDO COM √çNDICE");

// ================================================================================
// üìã √çNDICE DE FUN√á√ïES
// ================================================================================
/* 
1Ô∏è‚É£ handler()                     - Fun√ß√£o principal da API
2Ô∏è‚É£ orquestrarOrcamento()         - Fluxo completo de or√ßamento (5 etapas)
3Ô∏è‚É£ orquestrarRanking()           - Fluxo de ranking de hot√©is
4Ô∏è‚É£ orquestrarDicas()             - Fluxo de dicas de viagem
5Ô∏è‚É£ orquestrarAnalise()           - Fluxo de an√°lise de PDF (NOVO)
6Ô∏è‚É£ configurarHeaders()           - CORS e headers de resposta
7Ô∏è‚É£ validarMetodo()               - Valida√ß√£o de m√©todo HTTP
8Ô∏è‚É£ carregarModulos()             - Carregamento din√¢mico de m√≥dulos
9Ô∏è‚É£ gerarRespostaFinal()          - Resposta padronizada com m√©tricas
üîü tratarErroFatal()             - Tratamento de erros cr√≠ticos
*/

// ================================================================================
// üì¶ IMPORTA√á√ÉO COMPLETA DE TODOS OS M√ìDULOS (ES6)
// ================================================================================

// ‚ö†Ô∏è IMPORTANTE: Todas as importa√ß√µes din√¢micas ser√£o feitas dentro das fun√ß√µes
// para evitar problemas de compatibilidade ES6/CommonJS

// ================================================================================
// 1Ô∏è‚É£ FUN√á√ÉO PRINCIPAL DA API
// ================================================================================

export default async function handler(req, res) {
    const inicio = Date.now();
    console.log(`üìä [1] HANDLER INICIADO | M√©todo: ${req.method} | ${new Date().toISOString()}`);

    try {
        // 5Ô∏è‚É£ Configurar headers e CORS
        configurarHeaders(res);
        
        // 6Ô∏è‚É£ Validar m√©todo HTTP
        const validacaoMetodo = validarMetodo(req, res);
        if (validacaoMetodo) return validacaoMetodo;

        // 7Ô∏è‚É£ Carregar todos os m√≥dulos especializados
        const modulos = await carregarModulos();
        
        // Normalizar entrada usando utils.js (CORRE√á√ÉO CR√çTICA)
        console.log("üîß [1] Normalizando dados de entrada...");
        const { formData, tipo } = modulos.utils.normalizarEntrada(req.body);
        
        console.log(`üéØ [1] Dados normalizados | Tipo: ${tipo} | Tipos: ${formData.tipos?.length}`);

        // Orquestrar baseado no tipo
        let resultado;
        switch (tipo) {
            case 'orcamento':
                resultado = await orquestrarOrcamento(formData, modulos);
                break;
            case 'ranking':
                resultado = await orquestrarRanking(formData, modulos);
                break;
            case 'dicas':
                resultado = await orquestrarDicas(formData, modulos);
                break;
            case 'analise':
                resultado = await orquestrarAnalise(formData, modulos);
                break;
            default:
                throw new Error(`Tipo de opera√ß√£o n√£o suportado: ${tipo}`);
        }

        // 8Ô∏è‚É£ Gerar resposta final com m√©tricas
        return gerarRespostaFinal(res, resultado, inicio);

    } catch (error) {
        // 9Ô∏è‚É£ Tratar erro fatal
        return tratarErroFatal(res, error, inicio);
    }
}

// ================================================================================
// 2Ô∏è‚É£ ORQUESTRA√á√ÉO DE OR√áAMENTO (FLUXO COMPLETO EM 5 ETAPAS)
// ================================================================================

async function orquestrarOrcamento(formData, modulos) {
    console.log("üéØ [2] ORQUESTRANDO FLUXO COMPLETO DE OR√áAMENTO...");
    console.log("üîÑ [2] FLUXO: An√°lise ‚Üí Prompt ‚Üí IA ‚Üí Processamento ‚Üí M√©tricas");

    try {
        // ETAPA 2.1: AN√ÅLISE DO TEXTO DE ENTRADA (analysis.js)
        console.log("üìä [2.1] AN√ÅLISE: Detectando tipo e complexidade...");
        
        const analise = modulos.analysis.analisarTextoCompleto 
            ? modulos.analysis.analisarTextoCompleto(formData)
            : modulos.analysis.default.analisarTextoCompleto(formData);
        
        console.log(`‚úÖ [2.1] An√°lise conclu√≠da | Tipo: ${analise?.tipoDetectado || 'generico'}`);

        // ETAPA 2.2: GERA√á√ÉO DO PROMPT OTIMIZADO (prompts.js)
        console.log("üìã [2.2] PROMPT: Gerando prompt especializado...");
        
        const prompt = modulos.prompts.gerarPromptOtimizado 
            ? modulos.prompts.gerarPromptOtimizado(formData, analise)
            : modulos.prompts.default.gerarPromptOtimizado(formData, analise);
        
        console.log(`‚úÖ [2.2] Prompt gerado | ${prompt?.length || 0} caracteres`);

        // ETAPA 2.3: SELE√á√ÉO INTELIGENTE DO MODELO (ia-client.js)
        console.log("ü§ñ [2.3] MODELO: Selecionando IA otimizada...");
        
        const modeloInfo = modulos.iaClient.selecionarModelo 
            ? modulos.iaClient.selecionarModelo(!!formData.imagemBase64, analise?.complexidade)
            : modulos.iaClient.default.selecionarModelo(!!formData.imagemBase64, analise?.complexidade);
        
        console.log(`‚úÖ [2.3] Modelo selecionado: ${modeloInfo.modelo}`);

        // ETAPA 2.4: CHAMADA PARA A IA (ia-client.js)
        console.log("üß† [2.4] IA: Executando chamada inteligente...");
        
        const respostaIA = modulos.iaClient.chamarIASegura 
            ? await modulos.iaClient.chamarIASegura(
                prompt, 
                !!formData.imagemBase64, 
                formData.imagemBase64, 
                modeloInfo.modelo, 
                modeloInfo.fallback
            )
            : await modulos.iaClient.default.chamarIASegura(
                prompt, 
                !!formData.imagemBase64, 
                formData.imagemBase64, 
                modeloInfo.modelo, 
                modeloInfo.fallback
            );
        
        console.log(`üß† [2.4] IA respondeu | ${respostaIA?.content?.length || 0} caracteres`);

        // ETAPA 2.5: P√ìS-PROCESSAMENTO FINAL (processing.js) - CORRE√á√ÉO CR√çTICA!
        console.log("üé® [2.5] PROCESSAMENTO: Formata√ß√£o final...");
        
        const conteudoFinal = modulos.processing.processarRespostaCompleta 
            ? await modulos.processing.processarRespostaCompleta(
                respostaIA?.content || respostaIA?.conteudo || '', 
                analise, 
                formData  // ‚Üê CORRE√á√ÉO CR√çTICA: 3¬∫ ARGUMENTO ADICIONADO
            )
            : await modulos.processing.default.processarRespostaCompleta(
                respostaIA?.content || respostaIA?.conteudo || '', 
                analise, 
                formData  // ‚Üê CORRE√á√ÉO CR√çTICA: 3¬∫ ARGUMENTO ADICIONADO
            );
        
        console.log(`‚úÖ [2.5] Processamento conclu√≠do`);

        // ETAPA 2.6: C√ÅLCULO DE M√âTRICAS (ia-client.js)
        console.log("üìä [2.6] M√âTRICAS: Calculando custos...");
        
        let custo = { custo_total: 0 };
        let informacoesUso = { tokens_total: 0 };
        
        try {
            if (modulos.iaClient.obterInformacoesUso && modulos.iaClient.calcularCusto) {
                informacoesUso = modulos.iaClient.obterInformacoesUso(respostaIA);
                custo = modulos.iaClient.calcularCusto(informacoesUso);
            }
        } catch (errorMetricas) {
            console.warn("‚ö†Ô∏è [2.6] Erro ao calcular m√©tricas:", errorMetricas.message);
        }

        // RESULTADO FINAL DO OR√áAMENTO
        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: '5 Etapas: An√°lise ‚Üí Prompt ‚Üí IA ‚Üí Processamento ‚Üí M√©tricas',
                modeloUsado: respostaIA?.modelo_usado || modeloInfo.modelo,
                templateUsado: analise?.tipoDetectado || 'generico',
                custoBRL: custo?.custo_total ? `R$ ${custo.custo_total.toFixed(4)}` : 'R$ 0,0000',
                tokensUsados: informacoesUso?.tokens_total || 0,
                etapas: {
                    analise: !!analise,
                    prompt: !!prompt,
                    ia: !!respostaIA,
                    processamento: !!conteudoFinal,
                    metricas: !!custo
                }
            }
        };

    } catch (error) {
        console.error("‚ùå [2] Erro na orquestra√ß√£o de or√ßamento:", error);
        throw new Error(`Falha na orquestra√ß√£o de or√ßamento: ${error.message}`);
    }
}

// ================================================================================
// 3Ô∏è‚É£ ORQUESTRA√á√ÉO DE RANKING DE HOT√âIS
// ================================================================================

async function orquestrarRanking(formData, modulos) {
    console.log("üè® [3] ORQUESTRANDO RANKING DE HOT√âIS...");

    try {
        // Verificar se existe destino ou usar an√°lise
        const destino = formData.destino || 'destino popular';
        console.log(`üè® [3] Gerando ranking para: ${destino}`);

        // Usar an√°lise simples para ranking
        const analise = { 
            tipoDetectado: 'ranking',
            complexidade: 'media',
            destino: destino
        };

        // Gerar prompt espec√≠fico para ranking
        const prompt = modulos.prompts.gerarPromptRanking 
            ? modulos.prompts.gerarPromptRanking(destino, formData)
            : modulos.prompts.default.gerarPromptRanking 
            ? modulos.prompts.default.gerarPromptRanking(destino, formData)
            : `Crie um ranking detalhado dos 5 melhores hot√©is em ${destino} com avalia√ß√µes, pre√ßos e diferenciais.`;

        // Chamar IA com modelo otimizado
        const modeloInfo = { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
        
        const respostaIA = modulos.iaClient.chamarIASegura 
            ? await modulos.iaClient.chamarIASegura(prompt, false, null, modeloInfo.modelo, modeloInfo.fallback)
            : await modulos.iaClient.default.chamarIASegura(prompt, false, null, modeloInfo.modelo, modeloInfo.fallback);

        // Processar resposta - CORRE√á√ÉO CR√çTICA: 3 ARGUMENTOS
        const conteudoFinal = modulos.processing.processarRespostaCompleta 
            ? await modulos.processing.processarRespostaCompleta(
                respostaIA?.content || '', 
                analise, 
                formData  // ‚Üê CORRE√á√ÉO CR√çTICA: 3¬∫ ARGUMENTO
            )
            : await modulos.processing.default.processarRespostaCompleta(
                respostaIA?.content || '', 
                analise, 
                formData  // ‚Üê CORRE√á√ÉO CR√çTICA: 3¬∫ ARGUMENTO
            );

        return { 
            conteudo: conteudoFinal, 
            debug: { 
                templateUsado: 'ranking_hoteis',
                destinoUsado: destino,
                metodo: 'prompts.gerarPromptRanking'
            } 
        };
        
    } catch (error) {
        console.error("‚ùå [3] Erro na orquestra√ß√£o de ranking:", error);
        throw new Error(`Falha na orquestra√ß√£o de ranking: ${error.message}`);
    }
}

// ================================================================================
// 4Ô∏è‚É£ ORQUESTRA√á√ÉO DE DICAS DE VIAGEM
// ================================================================================

async function orquestrarDicas(formData, modulos) {
    console.log("üí° [4] ORQUESTRANDO DICAS DE VIAGEM...");

    try {
        const destino = formData.destino || 'viagem geral';
        console.log(`üí° [4] Gerando dicas para: ${destino}`);

        // Verificar se templates tem dicas est√°ticas
        let conteudo;
        
        if (modulos.templates.gerarDicasViagem) {
            conteudo = modulos.templates.gerarDicasViagem(destino, formData);
            console.log("‚úÖ [4] Usando template est√°tico de dicas");
        } else if (modulos.templates.default?.gerarDicasViagem) {
            conteudo = modulos.templates.default.gerarDicasViagem(destino, formData);
            console.log("‚úÖ [4] Usando template est√°tico de dicas (default)");
        } else {
            // Fallback: usar IA para gerar dicas
            console.log("ü§ñ [4] Usando IA para gerar dicas...");
            
            const prompt = `Crie dicas essenciais de viagem para ${destino}, incluindo: 
            - Melhor √©poca para visitar
            - Documenta√ß√£o necess√°ria
            - Dicas de bagagem
            - Principais atra√ß√µes
            - Gastronomia local
            - Dicas de seguran√ßa`;

            const respostaIA = modulos.iaClient.chamarIASegura 
                ? await modulos.iaClient.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o'])
                : await modulos.iaClient.default.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o']);

            conteudo = respostaIA?.content || 'Dicas de viagem indispon√≠veis';
        }

        return { 
            conteudo, 
            debug: { 
                templateUsado: 'dicas_estatico',
                destinoUsado: destino,
                metodo: 'templates.gerarDicasViagem'
            } 
        };
        
    } catch (error) {
        console.error("‚ùå [4] Erro na orquestra√ß√£o de dicas:", error);
        throw new Error(`Falha na orquestra√ß√£o de dicas: ${error.message}`);
    }
}

// ================================================================================
// 5Ô∏è‚É£ ORQUESTRA√á√ÉO DE AN√ÅLISE DE PDF (NOVO)
// ================================================================================

async function orquestrarAnalise(formData, modulos) {
    console.log("üìÑ [5] ORQUESTRANDO AN√ÅLISE DE PDF...");

    try {
        // Verificar se existe arquivo
        if (!formData.arquivo && !formData.arquivoBase64) {
            throw new Error("Nenhum arquivo PDF fornecido para an√°lise");
        }

        const arquivoBase64 = formData.arquivo || formData.arquivoBase64;
        const nomeArquivo = formData.nomeArquivo || 'documento.pdf';
        
        console.log(`üìÑ [5] Processando arquivo: ${nomeArquivo}`);

        // ETAPA 5.1: Processar PDF usando m√≥dulo especializado
        console.log("üìÑ [5.1] PROCESSAMENTO: Extraindo e analisando PDF...");
        
        const resultadoPDF = modulos.pdfProcessor.processarPDFCompleto 
            ? await modulos.pdfProcessor.processarPDFCompleto(arquivoBase64, nomeArquivo)
            : await modulos.pdfProcessor.default.processarPDFCompleto(arquivoBase64, nomeArquivo);
        
        if (!resultadoPDF.sucesso) {
            throw new Error(`Falha no processamento do PDF: ${resultadoPDF.erro || 'Erro desconhecido'}`);
        }

        console.log(`‚úÖ [5.1] PDF processado: tipo '${resultadoPDF.tipo}', ${resultadoPDF.conteudo.length} caracteres`);

        // ETAPA 5.2: An√°lise do conte√∫do extra√≠do (usando analysis.js)
        console.log("üìÑ [5.2] AN√ÅLISE: Analisando conte√∫do extra√≠do...");
        
        const formDataAnalise = {
            ...formData,
            textoColado: resultadoPDF.conteudo,
            tipos: [resultadoPDF.tipo === 'orcamento_viagem' ? 'A√©reo Nacional' : 'Dicas'],
            observacoes: `An√°lise de PDF: ${nomeArquivo}`
        };

        const analise = modulos.analysis.analisarTextoCompleto 
            ? modulos.analysis.analisarTextoCompleto(formDataAnalise)
            : modulos.analysis.default.analisarTextoCompleto(formDataAnalise);

        console.log(`‚úÖ [5.2] An√°lise conclu√≠da: ${analise?.tipoDetectado || 'generico'}`);

        // ETAPA 5.3: Gerar prompt especializado para PDF
        console.log("üìÑ [5.3] PROMPT: Criando prompt para an√°lise de PDF...");
        
        let prompt;
        if (modulos.prompts.gerarPromptAnalise) {
            prompt = modulos.prompts.gerarPromptAnalise(resultadoPDF, analise);
        } else if (modulos.prompts.default?.gerarPromptAnalise) {
            prompt = modulos.prompts.default.gerarPromptAnalise(resultadoPDF, analise);
        } else {
            // Fallback: prompt gen√©rico para an√°lise
            prompt = `Analise o seguinte documento PDF e organize as informa√ß√µes de forma clara e profissional:

TIPO DETECTADO: ${resultadoPDF.tipo}
ARQUIVO: ${nomeArquivo}
CONFIAN√áA: ${(resultadoPDF.dados.confianca * 100).toFixed(1)}%

CONTE√öDO EXTRA√çDO:
${resultadoPDF.conteudo}

Por favor:
1. Identifique as principais informa√ß√µes
2. Organize de forma estruturada
3. Destaque valores, datas e detalhes importantes
4. Formate para apresenta√ß√£o profissional
5. Adicione observa√ß√µes relevantes sobre o documento`;
        }

        console.log(`‚úÖ [5.3] Prompt gerado: ${prompt.length} caracteres`);

        // ETAPA 5.4: Chamar IA para an√°lise inteligente
        console.log("üìÑ [5.4] IA: Processando an√°lise inteligente...");
        
        const modeloInfo = { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
        
        const respostaIA = modulos.iaClient.chamarIASegura 
            ? await modulos.iaClient.chamarIASegura(prompt, false, null, modeloInfo.modelo, modeloInfo.fallback)
            : await modulos.iaClient.default.chamarIASegura(prompt, false, null, modeloInfo.modelo, modeloInfo.fallback);

        console.log(`üìÑ [5.4] IA respondeu: ${respostaIA?.content?.length || 0} caracteres`);

        // ETAPA 5.5: Processar resposta final
        console.log("üìÑ [5.5] PROCESSAMENTO: Formatando resposta final...");
        
        const conteudoFinal = modulos.processing.processarRespostaCompleta 
            ? await modulos.processing.processarRespostaCompleta(
                respostaIA?.content || resultadoPDF.conteudo, 
                analise, 
                formDataAnalise
            )
            : await modulos.processing.default.processarRespostaCompleta(
                respostaIA?.content || resultadoPDF.conteudo, 
                analise, 
                formDataAnalise
            );

        console.log(`‚úÖ [5.5] An√°lise finalizada`);

        return { 
            conteudo: conteudoFinal, 
            debug: { 
                tipoArquivo: resultadoPDF.tipo,
                nomeArquivo: nomeArquivo,
                confiancaPDF: resultadoPDF.dados.confianca,
                metricasPDF: resultadoPDF.metricas,
                fallbackUsado: resultadoPDF.dados.fallback || false,
                metodo: 'pdf-processor.processarPDFCompleto',
                etapas: {
                    processamentoPDF: !!resultadoPDF,
                    analiseTexto: !!analise,
                    promptIA: !!prompt,
                    respostaIA: !!respostaIA,
                    processamentoFinal: !!conteudoFinal
                }
            } 
        };
        
    } catch (error) {
        console.error("‚ùå [5] Erro na orquestra√ß√£o de an√°lise:", error);
        
        // Fallback: retornar an√°lise b√°sica
        const nomeArquivo = formData.nomeArquivo || 'documento.pdf';
        const conteudoFallback = `
üìÑ AN√ÅLISE DE DOCUMENTO PDF

üìÇ Arquivo: ${nomeArquivo}
‚ö†Ô∏è Status: Processamento com limita√ß√µes

ERRO ENCONTRADO:
${error.message}

RECOMENDA√á√ïES:
‚Ä¢ Verifique se o arquivo PDF est√° v√°lido
‚Ä¢ Tente reduzir o tamanho do arquivo
‚Ä¢ Para melhor an√°lise, copie e cole o conte√∫do em formato texto
‚Ä¢ Entre em contato com o suporte se o problema persistir

PR√ìXIMOS PASSOS:
1. Revisar o documento manualmente
2. Extrair informa√ß√µes principais
3. Inserir dados no formul√°rio de or√ßamento
        `.trim();

        return { 
            conteudo: conteudoFallback,
            debug: { 
                erro: error.message,
                fallbackAplicado: true,
                nomeArquivo: nomeArquivo,
                metodo: 'orquestrarAnalise_fallback'
            } 
        };
    }
}

// ================================================================================
// 6Ô∏è‚É£ CONFIGURAR HEADERS E CORS
// ================================================================================

function configurarHeaders(res) {
    console.log("üîí [5] Configurando headers CORS...");
    
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v8.1-Corrigido');
    res.setHeader('X-Architecture', 'Modular-ES6');
    
    console.log("‚úÖ [5] Headers configurados");
}

// ================================================================================
// 6Ô∏è‚É£ VALIDAR M√âTODO HTTP
// ================================================================================

function validarMetodo(req, res) {
    console.log(`üîç [6] Validando m√©todo: ${req.method}`);
    
    if (req.method === 'OPTIONS') {
        console.log("‚úÖ [6] OPTIONS request - respondendo 200");
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        console.log(`‚ùå [6] M√©todo ${req.method} n√£o permitido`);
        return res.status(405).json({ 
            success: false, 
            error: 'M√©todo n√£o permitido. Use POST.',
            versao: '8.1-corrigido'
        });
    }
    
    console.log("‚úÖ [6] M√©todo POST validado");
    return null; // Continuar processamento
}

// ================================================================================
// 7Ô∏è‚É£ CARREGAR M√ìDULOS DINAMICAMENTE
// ================================================================================

async function carregarModulos() {
    console.log("üì¶ [7] Carregando m√≥dulos especializados...");
    
    try {
        const [analysis, iaClient, processing, prompts, templates, utils, pdfProcessor] = await Promise.all([
            import('./modules/analysis.js'),
            import('./modules/ia-client.js'), 
            import('./modules/processing.js'),
            import('./modules/prompts.js'),
            import('./modules/templates.js'),
            import('./modules/utils.js'),
            import('./modules/pdf-processor.js')
        ]);
        
        console.log("‚úÖ [7] Todos os 7 m√≥dulos carregados com sucesso");
        
        // Retornar m√≥dulos organizados
        return { analysis, iaClient, processing, prompts, templates, utils, pdfProcessor };
        
    } catch (error) {
        console.error("‚ùå [7] Erro ao carregar m√≥dulos:", error);
        throw new Error(`Falha no carregamento de m√≥dulos: ${error.message}`);
    }
}

// ================================================================================
// 8Ô∏è‚É£ GERAR RESPOSTA FINAL COM M√âTRICAS
// ================================================================================

function gerarRespostaFinal(res, resultado, inicio) {
    const tempoTotal = Date.now() - inicio;
    console.log(`‚úÖ [8] Orquestra√ß√£o conclu√≠da em ${tempoTotal}ms`);

    const resposta = {
        success: true,
        result: resultado.conteudo,
        versao: '8.1-corrigido-com-indices',
        timestamp: new Date().toISOString(),
        debug: {
            tempoProcessamento: `${tempoTotal}ms`,
            arquiteturaModular: '100% respeitada',
            funcaoCorrigida: 'processarRespostaCompleta agora recebe 3 argumentos',
            modulosCarregados: ['analysis', 'ia-client', 'processing', 'prompts', 'templates', 'utils'],
            ...resultado.debug
        }
    };

    return res.status(200).json(resposta);
}

// ================================================================================
// 9Ô∏è‚É£ TRATAR ERRO FATAL
// ================================================================================

function tratarErroFatal(res, error, inicio) {
    const tempoTotal = Date.now() - inicio;
    console.error("‚ùå [9] ERRO FATAL no orquestrador:", error);
    
    const resposta = {
        success: false,
        error: error.message,
        versao: '8.1-corrigido-com-indices',
        timestamp: new Date().toISOString(),
        debug: {
            tempoProcessamento: `${tempoTotal}ms`,
            errorStack: error.stack?.split('\n').slice(0, 4),
            tipoErro: 'erro_orquestrador_corrigido',
            correcaoAplicada: 'processarRespostaCompleta com 3 argumentos'
        }
    };

    return res.status(500).json(resposta);
}

// ================================================================================
// üöÄ LOGS E INICIALIZA√á√ÉO
// ================================================================================

console.log("üöÄ CVC API v8.1 - ORQUESTRADOR CORRIGIDO INICIALIZADO");
console.log("‚úÖ CORRE√á√ïES IMPLEMENTADAS:");
console.log("- üîß processarRespostaCompleta agora recebe 3 argumentos (formData)");
console.log("- üì¶ Compatibilidade ES6 100% corrigida");
console.log("- üìã √çndice e numera√ß√£o de fun√ß√µes implementado");
console.log("- üîÑ Fluxo completo: An√°lise ‚Üí Prompt ‚Üí IA ‚Üí Processamento");
console.log("- üèóÔ∏è Arquitetura modular 100% respeitada");
console.log("- üìä M√©tricas e custos calculados");
console.log("- üõ°Ô∏è Fallbacks robustos em todas as etapas");
console.log("- üéØ Todos os m√≥dulos especializados utilizados corretamente");
