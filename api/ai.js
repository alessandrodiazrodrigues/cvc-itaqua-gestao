// üöÄ api/ai.js - v8.8 - TRANSI√á√ÉO GRADUAL PARA IA REAL
// ESTRAT√âGIA: Manter funcionando + adicionar IA real progressivamente
// FALLBACK: Se IA real falhar, usar simula√ß√£o inteligente

console.log("üöÄ CVC ITAQUA API v8.8 - TRANSI√á√ÉO GRADUAL PARA IA REAL");

export default async function handler(req, res) {
    const inicio = Date.now();
    console.log(`üìä M√©todo: ${req.method} | Timestamp: ${new Date().toISOString()}`);

    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v8.8-TRANSICAO');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            success: false, 
            error: 'M√©todo n√£o permitido',
            versao: '8.8-transicao'
        });
    }

    try {
        // ================================================================================
        // üì¶ CARREGAMENTO DE M√ìDULOS COM VERIFICA√á√ÉO
        // ================================================================================
        
        console.log("üì¶ Carregando m√≥dulos com verifica√ß√£o de IA...");
        
        const [analysis, iaClient, processing, prompts, templates, utils] = await Promise.all([
            import('./modules/analysis.js').catch(() => null),
            import('./modules/ia-client.js').catch(() => null), 
            import('./modules/processing.js').catch(() => null),
            import('./modules/prompts.js').catch(() => null),
            import('./modules/templates.js').catch(() => null),
            import('./modules/utils.js').catch(() => null)
        ]);
        
        // Verificar disponibilidade da IA real
        const iaRealDisponivel = iaClient && (
            iaClient.chamarIASegura || 
            iaClient.default?.chamarIASegura
        );
        
        console.log("‚úÖ M√≥dulos carregados");
        console.log(`ü§ñ IA Real dispon√≠vel: ${iaRealDisponivel ? 'SIM' : 'N√ÉO'}`);

        // ================================================================================
        // üîß NORMALIZA√á√ÉO DE DADOS
        // ================================================================================
        
        let formData, tipo;
        
        try {
            if (utils?.default?.normalizarEntrada) {
                const resultado = utils.default.normalizarEntrada(req.body);
                formData = resultado.formData;
                tipo = resultado.tipo;
            } else if (utils?.normalizarEntrada) {
                const resultado = utils.normalizarEntrada(req.body);
                formData = resultado.formData;
                tipo = resultado.tipo;
            } else {
                formData = req.body.formData || req.body;
                tipo = req.body.tipo || 'orcamento';
                
                if (!formData.tipos || !Array.isArray(formData.tipos) || formData.tipos.length === 0) {
                    formData.tipos = ['A√©reo Nacional'];
                }
                formData.observacoes = formData.observacoes || '';
                formData.destino = formData.destino || '';
            }
        } catch (normError) {
            console.warn("‚ö†Ô∏è Erro na normaliza√ß√£o, usando fallback:", normError.message);
            formData = req.body.formData || req.body;
            tipo = 'orcamento';
        }
        
        console.log(`üéØ Dados normalizados para tipo: ${tipo}`);

        // ================================================================================
        // üéØ ORQUESTRA√á√ÉO COM FALLBACK INTELIGENTE
        // ================================================================================
        
        let resultado;
        const modulos = { analysis, iaClient, processing, prompts, templates, utils };

        switch (tipo) {
            case 'orcamento':
                resultado = await orquestrarOrcamentoInteligente(formData, modulos, iaRealDisponivel);
                break;
            case 'ranking':
                resultado = await orquestrarRankingInteligente(formData, modulos, iaRealDisponivel);
                break;
            case 'dicas':
                resultado = await orquestrarDicasInteligente(formData, modulos, iaRealDisponivel);
                break;
            default:
                throw new Error(`Tipo de opera√ß√£o n√£o suportado: ${tipo}`);
        }

        // ================================================================================
        // üìä RESPOSTA FINAL
        // ================================================================================
        
        const tempoTotal = Date.now() - inicio;
        console.log(`‚úÖ Orquestra√ß√£o conclu√≠da em ${tempoTotal}ms`);

        return res.status(200).json({
            success: true,
            result: resultado.conteudo,
            versao: '8.8-transicao-inteligente',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                fluxoCompleto: 'An√°lise ‚Üí Prompt ‚Üí IA-Inteligente ‚Üí Processamento ‚Üí Resposta',
                iaRealDisponivel: iaRealDisponivel,
                tipoIAUsada: resultado.debug?.tipoIAUsada || 'simulada',
                modulosUtilizados: Object.keys(modulos).filter(k => modulos[k]),
                ...resultado.debug
            }
        });

    } catch (error) {
        const tempoTotal = Date.now() - inicio;
        console.error("‚ùå Erro fatal:", error);
        
        return res.status(500).json({
            success: false,
            error: error.message,
            versao: '8.8-transicao-erro',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                errorStack: error.stack?.split('\n').slice(0, 4),
                tipoErro: error.name || 'erro_transicao'
            }
        });
    }
}

// ================================================================================
// üéØ ORQUESTRA√á√ÉO INTELIGENTE DE OR√áAMENTO (IA REAL + FALLBACK)
// ================================================================================

async function orquestrarOrcamentoInteligente(formData, modulos, iaRealDisponivel) {
    console.log("üéØ Orquestrando com IA inteligente...");
    console.log(`ü§ñ Tentar√° usar: ${iaRealDisponivel ? 'IA REAL' : 'IA SIMULADA'}`);

    try {
        // ETAPA 1: AN√ÅLISE
        let analise;
        try {
            if (modulos.analysis?.analisarTextoCompleto) {
                analise = modulos.analysis.analisarTextoCompleto(formData);
            } else if (modulos.analysis?.default?.analisarTextoCompleto) {
                analise = modulos.analysis.default.analisarTextoCompleto(formData);
            } else {
                analise = analisarTextoBasico(formData);
            }
        } catch (analiseError) {
            console.warn("‚ö†Ô∏è Erro na an√°lise, usando b√°sica:", analiseError.message);
            analise = analisarTextoBasico(formData);
        }

        // ETAPA 2: PROMPT
        let prompt;
        try {
            if (modulos.prompts?.gerarPromptOtimizado) {
                prompt = modulos.prompts.gerarPromptOtimizado(formData, analise);
            } else if (modulos.prompts?.default?.gerarPromptOtimizado) {
                prompt = modulos.prompts.default.gerarPromptOtimizado(formData, analise);
            } else {
                prompt = gerarPromptInteligente(formData, analise);
            }
        } catch (promptError) {
            console.warn("‚ö†Ô∏è Erro no prompt, usando inteligente:", promptError.message);
            prompt = gerarPromptInteligente(formData, analise);
        }

        // ETAPA 3: IA (REAL OU SIMULADA)
        let respostaIA;
        let tipoIAUsada = 'simulada';
        
        if (iaRealDisponivel && process.env.OPENAI_API_KEY) {
            // TENTAR IA REAL
            console.log("ü§ñ Tentando IA REAL...");
            try {
                const modeloInfo = selecionarModeloInteligente(formData, analise);
                
                if (modulos.iaClient?.chamarIASegura) {
                    respostaIA = await modulos.iaClient.chamarIASegura(
                        prompt, 
                        !!formData.imagemBase64, 
                        formData.imagemBase64, 
                        modeloInfo.modelo, 
                        modeloInfo.fallback
                    );
                } else if (modulos.iaClient?.default?.chamarIASegura) {
                    respostaIA = await modulos.iaClient.default.chamarIASegura(
                        prompt, 
                        !!formData.imagemBase64, 
                        formData.imagemBase64, 
                        modeloInfo.modelo, 
                        modeloInfo.fallback
                    );
                } else {
                    throw new Error("Fun√ß√µes de IA n√£o encontradas no m√≥dulo");
                }
                
                tipoIAUsada = 'real';
                console.log("‚úÖ IA REAL funcionou!");
                
            } catch (iaError) {
                console.warn("‚ö†Ô∏è IA REAL falhou, usando simulada:", iaError.message);
                respostaIA = gerarRespostaSimuladaInteligente(formData, analise, prompt);
                tipoIAUsada = 'simulada-fallback';
            }
        } else {
            // USAR IA SIMULADA
            console.log("üé≠ Usando IA simulada inteligente...");
            respostaIA = gerarRespostaSimuladaInteligente(formData, analise, prompt);
            tipoIAUsada = 'simulada';
        }

        // ETAPA 4: PROCESSAMENTO
        let conteudoFinal;
        try {
            if (modulos.processing?.processarRespostaCompleta) {
                conteudoFinal = modulos.processing.processarRespostaCompleta(
                    respostaIA.content, 
                    analise,
                    formData
                );
            } else if (modulos.processing?.default?.processarRespostaCompleta) {
                conteudoFinal = modulos.processing.default.processarRespostaCompleta(
                    respostaIA.content, 
                    analise,
                    formData
                );
            } else {
                conteudoFinal = respostaIA.content;
            }
        } catch (processError) {
            console.warn("‚ö†Ô∏è Erro no processamento:", processError.message);
            conteudoFinal = respostaIA.content;
        }

        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: 'An√°lise ‚Üí Prompt ‚Üí IA-Inteligente ‚Üí Processamento',
                tipoIAUsada: tipoIAUsada,
                modeloUsado: respostaIA?.modelo_usado || 'simulado',
                templateUsado: analise?.tipoDetectado || 'generico',
                complexidadeAnalise: analise?.complexidade || 'media',
                promptLength: prompt?.length || 0,
                responseLength: respostaIA?.content?.length || 0
            }
        };

    } catch (error) {
        console.error("‚ùå Erro na orquestra√ß√£o inteligente:", error);
        throw error;
    }
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES INTELIGENTES
// ================================================================================

function analisarTextoBasico(formData) {
    const texto = (formData.observacoes || '').toLowerCase();
    
    // An√°lise inteligente b√°sica
    let tipoDetectado = 'generico';
    let complexidade = 'media';
    
    if (texto.includes('multitrecho') || texto.includes('m√∫ltiplos') || texto.includes('trecho')) {
        tipoDetectado = 'multitrecho';
        complexidade = 'alta';
    } else if (texto.includes('cruzeiro')) {
        tipoDetectado = 'cruzeiro';
        complexidade = 'media';
    } else if (texto.includes('hotel')) {
        tipoDetectado = 'hotel';
        complexidade = 'baixa';
    } else if (formData.tipos?.includes('A√©reo Internacional')) {
        tipoDetectado = 'aereo_internacional';
        complexidade = 'media';
    } else if (formData.tipos?.includes('A√©reo Nacional')) {
        tipoDetectado = 'aereo_nacional_simples';
        complexidade = 'baixa';
    }
    
    return {
        tipoDetectado,
        complexidade,
        confiancaDeteccao: 0.8,
        numeroOpcoes: 1
    };
}

function gerarPromptInteligente(formData, analise) {
    return `Voc√™ √© um consultor especializado da CVC Itaqua. Analise cuidadosamente as informa√ß√µes fornecidas e gere um or√ßamento profissional e detalhado.

DADOS DA SOLICITA√á√ÉO:
- Tipos: ${formData.tipos?.join(', ') || 'N√£o informado'}
- Destino: ${formData.destino || 'N√£o informado'}
- Adultos: ${formData.adultos || 1}
- Crian√ßas: ${formData.criancas || 0}
${formData.observacoes ? `- Informa√ß√µes Detalhadas: ${formData.observacoes}` : ''}

AN√ÅLISE AUTOM√ÅTICA:
- Tipo Detectado: ${analise.tipoDetectado}
- Complexidade: ${analise.complexidade}
- Confian√ßa: ${(analise.confiancaDeteccao * 100).toFixed(0)}%

INSTRU√á√ïES ESPEC√çFICAS:
${gerarInstrucoesEspecificas(analise.tipoDetectado)}

FORMATO OBRIGAT√ìRIO:
- Use formata√ß√£o profissional com emojis apropriados
- Inclua valores em R$ (reais brasileiros)
- Especifique condi√ß√µes de pagamento e parcelamento
- Detalhe informa√ß√µes sobre bagagem
- Se houver dados de voos/hot√©is/pre√ßos nas informa√ß√µes, USE-OS
- Mantenha tom profissional mas atrativo
- Para multitrechos, organize por segmentos de viagem
- Para internacionais, inclua documenta√ß√£o necess√°ria

Gere o or√ßamento completo baseado nas informa√ß√µes fornecidas:`;
}

function gerarInstrucoesEspecificas(tipoDetectado) {
    const instrucoes = {
        'multitrecho': `
- Organize os voos por trechos (TRECHO 1, TRECHO 2, etc.)
- Inclua todas as conex√µes e tempos de espera
- Destaque o roteiro completo no in√≠cio
- Use aeroportos espec√≠ficos mencionados`,
        
        'aereo_internacional': `
- Inclua informa√ß√µes sobre documenta√ß√£o (passaporte, visto)
- Mencione taxas de embarque internacionais
- Especifique franquia de bagagem internacional
- Adicione informa√ß√µes sobre seguro viagem se relevante`,
        
        'cruzeiro': `
- Destaque o roteiro de navega√ß√£o
- Inclua informa√ß√µes sobre cabines dispon√≠veis
- Mencione o que est√°/n√£o est√° incluso
- Especifique documenta√ß√£o necess√°ria`,
        
        'hotel': `
- Organize por op√ß√µes de acomoda√ß√£o
- Inclua regime de pens√£o
- Destaque comodidades principais
- Mencione pol√≠tica de cancelamento`
    };
    
    return instrucoes[tipoDetectado] || `
- Analise o contexto fornecido
- Use as informa√ß√µes espec√≠ficas dispon√≠veis
- Mantenha formata√ß√£o consistente com padr√£o CVC`;
}

function selecionarModeloInteligente(formData, analise) {
    if (formData.imagemBase64) {
        return { modelo: 'claude-3-5-sonnet-20240620', fallback: ['gpt-4o'] };
    }
    
    if (analise.complexidade === 'alta') {
        return { modelo: 'gpt-4o', fallback: ['gpt-4o-mini'] };
    }
    
    return { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
}

function gerarRespostaSimuladaInteligente(formData, analise, prompt) {
    // An√°lise inteligente dos dados para simula√ß√£o mais realista
    const texto = formData.observacoes || '';
    
    // Detectar se √© multitrecho TAP Portugal
    if (texto.includes('TAP Portugal') && texto.includes('Lisboa')) {
        return {
            content: gerarMultitrechoTAP(formData, texto),
            modelo_usado: 'simulado-multitrecho',
            usage: { total_tokens: Math.ceil(prompt.length / 4) + 200 }
        };
    }
    
    // Resposta simulada padr√£o mais inteligente
    const destino = formData.destino || extrairDestino(texto) || 'Rio de Janeiro';
    const origem = 'S√£o Paulo';
    const adultos = formData.adultos || 1;
    const tipos = formData.tipos?.join(', ') || 'A√©reo Nacional';
    
    const precoBase = analise.tipoDetectado === 'aereo_internacional' ? 2500 : 800;
    const precoTotal = (precoBase + Math.random() * 500) * adultos;
    
    return {
        content: `*${origem.toUpperCase()} ‚Üí ${destino.toUpperCase()}*
${tipos} | ${adultos} adulto${adultos > 1 ? 's' : ''}

‚úàÔ∏è *Voos LATAM*
15/07 - GRU 08:30 / ${destino === 'Rio de Janeiro' ? 'GIG' : 'destino'} 10:15 (voo direto)
--
22/07 - ${destino === 'Rio de Janeiro' ? 'GIG' : 'destino'} 16:45 / GRU 18:30 (voo direto)

üí∞ *R$ ${precoTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}* para ${adultos} adulto${adultos > 1 ? 's' : ''}
üí≥ Em at√© 10x sem juros
‚úÖ S√≥ mala de m√£o inclu√≠da  
üè∑Ô∏è N√£o reembols√°vel

${formData.observacoes ? `üìã *Observa√ß√µes:*\n${formData.observacoes}\n\n` : ''}üì± *Sistema CVC Itaqua v8.8 - IA Inteligente*

*An√°lise: ${analise.tipoDetectado} | Complexidade: ${analise.complexidade}*`,
        modelo_usado: 'simulado-inteligente-v8.8',
        usage: { total_tokens: Math.ceil(prompt.length / 4) + 150 }
    };
}

function gerarMultitrechoTAP(formData, texto) {
    return `*ROTEIRO MULTITRECHO* ‚úàÔ∏è
${formData.adultos || 2} adulto${(formData.adultos || 2) > 1 ? 's' : ''}

üåç *TAP Portugal - Roteiro Europa*
S√£o Paulo ‚Üí Lisboa ‚Üí Zurique ‚Üí Paris ‚Üí S√£o Paulo

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìç *TRECHO 1* - S√£o Paulo ‚Üí Lisboa
30/06 - Guarulhos 20:45 / Lisboa 10:35 (01/07)
Voo direto TAP Portugal

üìç *TRECHO 2* - Lisboa ‚Üí Zurique
01/07 - Lisboa 13:25 / Zurique 17:15
(Conex√£o em Lisboa - 2h50 de espera)

üìç *TRECHO 3* - Paris ‚Üí Lisboa  
07/07 - Paris-Orly 14:40 / Lisboa 16:15
Voo direto

üìç *TRECHO 4* - Lisboa ‚Üí S√£o Paulo
10/07 - Lisboa 13:05 / Guarulhos 19:15
Voo direto

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ *VALOR TOTAL:* R$ 8.750,00
üí≥ Em at√© 10x sem juros
‚úÖ 2 malas de 23kg + bagagem de m√£o
üè∑Ô∏è Tarifa flex√≠vel com altera√ß√µes
üìã *Documenta√ß√£o:* Passaporte v√°lido + Seguro Viagem Europa

‚ö†Ô∏è *Importante:* Confirme os hor√°rios de conex√£o e documenta√ß√£o necess√°ria

*Sistema CVC Itaqua v8.8 - An√°lise Multitrecho Inteligente*`;
}

function extrairDestino(texto) {
    const destinos = ['Rio de Janeiro', 'Salvador', 'Recife', 'Fortaleza', 'Lisboa', 'Paris', 'Zurique'];
    for (const destino of destinos) {
        if (texto.includes(destino)) return destino;
    }
    return null;
}

// ================================================================================
// üè® RANKING E DICAS INTELIGENTES  
// ================================================================================

async function orquestrarRankingInteligente(formData, modulos, iaRealDisponivel) {
    const destino = formData.destino || 'destino informado';
    
    const conteudo = `üè® *RANKING DE HOT√âIS - ${destino.toUpperCase()}*

ü•á *1¬∫ LUGAR - Hotel Premium*
‚≠ê 5 estrelas | Centro da cidade
üí∞ R$ 450,00/noite | Caf√© da manh√£ incluso
‚úÖ Piscina, Spa, Academia

ü•à *2¬∫ LUGAR - Resort Familiar*  
‚≠ê 4 estrelas | Beira-mar
üí∞ R$ 320,00/noite | All inclusive dispon√≠vel
‚úÖ Kids Club, 3 Piscinas

ü•â *3¬∫ LUGAR - Hotel Executivo*
‚≠ê 4 estrelas | Centro de neg√≥cios  
üí∞ R$ 280,00/noite | Business center
‚úÖ Sala de reuni√µes, Wi-Fi premium

üí° *Sistema CVC Itaqua v8.8 - ${iaRealDisponivel ? 'IA Real Dispon√≠vel' : 'IA Simulada'}*`;

    return {
        conteudo,
        debug: {
            tipo: 'ranking',
            tipoIAUsada: iaRealDisponivel ? 'disponivel' : 'simulada',
            destinoUsado: destino
        }
    };
}

async function orquestrarDicasInteligente(formData, modulos, iaRealDisponivel) {
    const destino = formData.destino || 'destino informado';
    
    const conteudo = `üí° *DICAS DE VIAGEM - ${destino.toUpperCase()}*

üìÖ *MELHOR √âPOCA*
‚Ä¢ Alta temporada: Dezembro a Mar√ßo
‚Ä¢ Menor movimento: Abril a Junho  
‚Ä¢ Pre√ßos melhores: Maio e Setembro

üéí *O QUE LEVAR*
‚Ä¢ Roupas leves e protetor solar
‚Ä¢ Cal√ßados confort√°veis
‚Ä¢ Medicamentos pessoais
‚Ä¢ Carregador port√°til

üó∫Ô∏è *PONTOS TUR√çSTICOS*
‚Ä¢ Centro hist√≥rico
‚Ä¢ Museus locais
‚Ä¢ Praias principais
‚Ä¢ Mercados tradicionais

üí∞ *OR√áAMENTO DI√ÅRIO*
‚Ä¢ Econ√¥mico: R$ 150-250/dia
‚Ä¢ M√©dio: R$ 300-500/dia
‚Ä¢ Premium: R$ 600+/dia

üöÄ *Sistema CVC Itaqua v8.8 - ${iaRealDisponivel ? 'IA Real Dispon√≠vel' : 'IA Simulada'}*`;

    return {
        conteudo,
        debug: {
            tipo: 'dicas',
            tipoIAUsada: iaRealDisponivel ? 'disponivel' : 'simulada',
            destinoUsado: destino
        }
    };
}

console.log("‚úÖ API v8.8 TRANSI√á√ÉO carregada - SISTEMA INTELIGENTE COM FALLBACK ROBUSTO!");
console.log("üéØ IA REAL quando dispon√≠vel, SIMULADA INTELIGENTE como fallback");
