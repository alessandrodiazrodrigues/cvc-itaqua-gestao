// ================================================================================
// üåç FUN√á√ÉO MELHORADA - GERAR DICAS DO DESTINO AUTOMATICAMENTE
// ================================================================================
// Extrai destino do or√ßamento gerado + informa√ß√µes de crian√ßas para dicas personalizadas

/**
 * Gera dicas do destino automaticamente baseado no or√ßamento j√° criado
 */
async function gerarDicasDestino() {
  const btnGerar = document.getElementById('btnGerarDicas');
  const btnCopiar = document.getElementById('btnCopiarDicas');
  
  if (!btnGerar) {
    console.error('‚ùå Bot√£o gerar dicas n√£o encontrado');
    return;
  }
  
  try {
    btnGerar.disabled = true;
    btnGerar.innerHTML = 'ü§ñ Analisando or√ßamento...';
    
    // ================================================================================
    // üéØ EXTRAIR INFORMA√á√ïES DO OR√áAMENTO GERADO
    // ================================================================================
    
    const orcamentoTexto = document.getElementById('orcamentoIA')?.innerText || '';
    const destinoManual = document.getElementById('destino')?.value?.trim() || '';
    
    if (!orcamentoTexto || orcamentoTexto === 'Preencha o formul√°rio acima para gerar o or√ßamento...') {
      throw new Error('Gere um or√ßamento primeiro para extrair as informa√ß√µes do destino!');
    }
    
    console.log('üîç Extraindo informa√ß√µes do or√ßamento gerado...');
    
    // ================================================================================
    // üåç EXTRA√á√ÉO INTELIGENTE DE DESTINO
    // ================================================================================
    
    let destinoDetectado = destinoManual; // Prioridade para destino manual
    
    if (!destinoDetectado) {
      // Procurar por padr√µes de destino no or√ßamento
      const padroes = [
        /üìç\s*([^üóì\n]+)/i,  // üìç Orlando - Fl√≥rida
        /üåç\s*([^üóì\n]+)/i,  // üåç Paris
        /destino[:\s]*([^üóì\n]+)/i,
        /.*?-\s*([A-Za-z√Ä-√ø\s,.-]+?)(?:\n|üóì)/i // Linha com destino antes de data
      ];
      
      for (const padrao of padroes) {
        const match = orcamentoTexto.match(padrao);
        if (match && match[1]) {
          destinoDetectado = match[1].trim();
          console.log(`‚úÖ Destino detectado: "${destinoDetectado}"`);
          break;
        }
      }
    }
    
    if (!destinoDetectado) {
      throw new Error('N√£o foi poss√≠vel detectar o destino. Informe o destino no campo "Destino" e tente novamente.');
    }
    
    // ================================================================================
    // üìÖ EXTRA√á√ÉO DE PER√çODO/DATAS
    // ================================================================================
    
    let periodoDetectado = '';
    const padroesDatas = [
      /üóìÔ∏è\s*([^üë•\n]+)/i, // üóìÔ∏è 05 de mar - 15 de mar
      /(\d{1,2}\s+de\s+\w+\s*-\s*\d{1,2}\s+de\s+\w+)/i, // 05 de mar - 15 de mar
      /(\d{1,2}\/\d{1,2}\s*-\s*\d{1,2}\/\d{1,2})/i // 05/03 - 15/03
    ];
    
    for (const padrao of padroesDatas) {
      const match = orcamentoTexto.match(padrao);
      if (match && match[1]) {
        periodoDetectado = match[1].trim();
        console.log(`üìÖ Per√≠odo detectado: "${periodoDetectado}"`);
        break;
      }
    }
    
    // ================================================================================
    // üë∂ EXTRA√á√ÉO DE INFORMA√á√ïES DE CRIAN√áAS
    // ================================================================================
    
    let temCriancas = false;
    let idadesCriancas = [];
    
    // Verificar no formul√°rio primeiro
    const criancasFormulario = parseInt(document.getElementById('criancas')?.value) || 0;
    if (criancasFormulario > 0) {
      temCriancas = true;
      for (let i = 1; i <= criancasFormulario; i++) {
        const idadeInput = document.getElementById(`idade_crianca_${i}`);
        if (idadeInput && idadeInput.value) {
          idadesCriancas.push(parseInt(idadeInput.value));
        }
      }
    }
    
    // Se n√£o encontrou no formul√°rio, procurar no or√ßamento
    if (!temCriancas) {
      const padroesCriancas = [
        /(\d+)\s*crian[√ßc]as?\s*\(([^)]+)\)/i, // 2 crian√ßas (02 e 04 anos)
        /üë∂\s*(\d+)/i, // üë∂ 2
        /crian[√ßc]as?[:\s]*(\d+)/i
      ];
      
      for (const padrao of padroesCriancas) {
        const match = orcamentoTexto.match(padrao);
        if (match && match[1] && parseInt(match[1]) > 0) {
          temCriancas = true;
          if (match[2]) {
            // Extrair idades: "02 e 04 anos" -> [2, 4]
            const idades = match[2].match(/\d+/g);
            if (idades) {
              idadesCriancas = idades.map(idade => parseInt(idade));
            }
          }
          console.log(`üë∂ Crian√ßas detectadas: ${match[1]}, idades: ${idadesCriancas.join(', ')}`);
          break;
        }
      }
    }
    
    // ================================================================================
    // üè® VERIFICAR SE √â PACOTE COM HOTEL
    // ================================================================================
    
    const tipos = Array.from(document.querySelectorAll('input[name="tipo"]:checked')).map(el => el.value);
    const temHotel = tipos.includes('Hotel') || orcamentoTexto.toLowerCase().includes('hotel') || orcamentoTexto.toLowerCase().includes('hospedagem');
    
    // ================================================================================
    // ü§ñ GERAR PROMPT PERSONALIZADO PARA DICAS
    // ================================================================================
    
    btnGerar.innerHTML = 'üåç Gerando dicas personalizadas...';
    
    let prompt = `Crie dicas de viagem personalizadas para ${destinoDetectado} para envio via WhatsApp da CVC.

INFORMA√á√ïES DA VIAGEM:
- Destino: ${destinoDetectado}`;

    if (periodoDetectado) {
      prompt += `\n- Per√≠odo: ${periodoDetectado}`;
    }

    if (temCriancas) {
      prompt += `\n- Viajam com ${idadesCriancas.length || 'crian√ßas'}`;
      if (idadesCriancas.length > 0) {
        prompt += ` (idades: ${idadesCriancas.join(' e ')} anos)`;
      }
    }

    if (temHotel) {
      prompt += `\n- Pacote inclui hospedagem`;
    }

    prompt += `

FORMATO DAS DICAS:
üåü **Dicas para ${destinoDetectado}**

üóìÔ∏è **Melhor √©poca:** [Baseado no per√≠odo informado ou √©poca geral]

üå§Ô∏è **Clima e bagagem:** [Temperatura esperada e o que levar]

üéØ **Principais atra√ß√µes:**
‚Ä¢ [Atra√ß√£o 1 - breve descri√ß√£o]
‚Ä¢ [Atra√ß√£o 2 - breve descri√ß√£o]
‚Ä¢ [Atra√ß√£o 3 - breve descri√ß√£o]`;

    if (temCriancas) {
      prompt += `

üë∂ **Com crian√ßas:**
‚Ä¢ [Atividade fam√≠lia-friendly 1]
‚Ä¢ [Atividade fam√≠lia-friendly 2]`;
    }

    prompt += `

üí° **Dicas pr√°ticas:**
‚Ä¢ Moeda: [moeda local]
‚Ä¢ Documenta√ß√£o: [passaporte/RG]
‚Ä¢ Fuso hor√°rio: [diferen√ßa do Brasil]
‚Ä¢ Idioma: [idioma local]

üçΩÔ∏è **Gastronomia:** [1-2 pratos t√≠picos imperd√≠veis]

‚ö†Ô∏è **Importante:** [1 dica essencial de seguran√ßa ou cultural]

INSTRU√á√ïES:
- M√°ximo 300 palavras
- Tom amig√°vel e vendedor
- Use emojis para deixar atrativo
- Informa√ß√µes pr√°ticas e √∫teis
- Baseie-se no per√≠odo da viagem se informado
- Se h√° crian√ßas, priorize atividades familiares
- N√£o invente informa√ß√µes espec√≠ficas sobre pre√ßos ou hor√°rios`;

    // ================================================================================
    // üîó CHAMAR A IA PARA GERAR AS DICAS
    // ================================================================================
    
    console.log('ü§ñ Enviando prompt para IA:', prompt.substring(0, 100) + '...');
    
    // Usar o sistema de IA existente
    const response = await chamarIAParaDicas(prompt, 'destino', { 
      destino: destinoDetectado,
      temCriancas: temCriancas,
      periodo: periodoDetectado
    });
    
    // ================================================================================
    // ‚úÖ EXIBIR RESULTADO E HABILITAR BOT√ÉO COPIAR
    // ================================================================================
    
    document.getElementById('destinoIA').innerText = response;
    
    // Mostrar bot√£o copiar
    if (btnCopiar) {
      btnCopiar.style.display = 'inline-block';
    }
    
    console.log('‚úÖ Dicas geradas automaticamente:', {
      destino: destinoDetectado,
      periodo: periodoDetectado || 'n√£o detectado',
      criancas: temCriancas ? `${idadesCriancas.length} crian√ßas` : 'sem crian√ßas',
      hotel: temHotel ? 'com hotel' : 'sem hotel',
      tamanho: response.length
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar dicas:', error);
    document.getElementById('destinoIA').innerText = `‚ùå Erro: ${error.message}`;
    
    // Esconder bot√£o copiar se houver erro
    const btnCopiar = document.getElementById('btnCopiarDicas');
    if (btnCopiar) {
      btnCopiar.style.display = 'none';
    }
    
  } finally {
    btnGerar.disabled = false;
    btnGerar.innerHTML = 'üéØ Gerar Dicas';
  }
}

// ================================================================================
// üè® FUN√á√ÉO MELHORADA - GERAR RANKING DE HOT√âIS
// ================================================================================

async function gerarRankingHoteis() {
  const btnGerar = document.getElementById('btnGerarRanking');
  const btnCopiar = document.getElementById('btnCopiarRanking');
  
  if (!btnGerar) {
    console.error('‚ùå Bot√£o gerar ranking n√£o encontrado');
    return;
  }
  
  try {
    btnGerar.disabled = true;
    btnGerar.innerHTML = 'ü§ñ Analisando destino...';
    
    // ================================================================================
    // üéØ EXTRAIR DESTINO DO OR√áAMENTO OU FORMUL√ÅRIO
    // ================================================================================
    
    const orcamentoTexto = document.getElementById('orcamentoIA')?.innerText || '';
    const destinoManual = document.getElementById('destino')?.value?.trim() || '';
    
    let destinoDetectado = destinoManual;
    
    // Se n√£o foi informado manualmente, extrair do or√ßamento
    if (!destinoDetectado && orcamentoTexto && orcamentoTexto !== 'Preencha o formul√°rio acima para gerar o or√ßamento...') {
      const padroes = [
        /üìç\s*([^üóì\n]+)/i,
        /üåç\s*([^üóì\n]+)/i,
        /destino[:\s]*([^üóì\n]+)/i,
        /.*?-\s*([A-Za-z√Ä-√ø\s,.-]+?)(?:\n|üóì)/i
      ];
      
      for (const padrao of padroes) {
        const match = orcamentoTexto.match(padrao);
        if (match && match[1]) {
          destinoDetectado = match[1].trim();
          console.log(`üè® Destino detectado para ranking: "${destinoDetectado}"`);
          break;
        }
      }
    }
    
    if (!destinoDetectado) {
      throw new Error('Informe o destino no campo "Destino" ou gere um or√ßamento primeiro para detectar automaticamente.');
    }
    
    // ================================================================================
    // üë• EXTRAIR INFORMA√á√ïES DOS H√ìSPEDES
    // ================================================================================
    
    const adultos = parseInt(document.getElementById('adultos')?.value) || 2;
    const criancas = parseInt(document.getElementById('criancas')?.value) || 0;
    
    let idadesCriancas = [];
    if (criancas > 0) {
      for (let i = 1; i <= criancas; i++) {
        const idadeInput = document.getElementById(`idade_crianca_${i}`);
        if (idadeInput && idadeInput.value) {
          idadesCriancas.push(parseInt(idadeInput.value));
        }
      }
    }
    
    // ================================================================================
    // ü§ñ GERAR PROMPT PARA RANKING
    // ================================================================================
    
    btnGerar.innerHTML = 'üèÜ Gerando ranking...';
    
    let prompt = `Crie um ranking detalhado dos 5 melhores hot√©is em ${destinoDetectado} para envio via WhatsApp.

INFORMA√á√ïES DOS H√ìSPEDES:
- ${adultos} adulto${adultos > 1 ? 's' : ''}`;

    if (criancas > 0) {
      prompt += `\n- ${criancas} crian√ßa${criancas > 1 ? 's' : ''}`;
      if (idadesCriancas.length > 0) {
        prompt += ` (${idadesCriancas.join(' e ')} anos)`;
      }
    }

    prompt += `

FORMATO OBRIGAT√ìRIO:
Para facilitar a escolha do seu hotel, fizemos um ranking detalhado sobre os hot√©is de ${destinoDetectado}:

1Ô∏è‚É£ - [Nome do Hotel]
üìç Localiza√ß√£o: [Descri√ß√£o da localiza√ß√£o]
üõè Tipo de quarto: [Categoria do quarto]
üçΩ Servi√ßo: [Caf√© da manh√£/meia pens√£o/etc]
‚≠ê Notas: TripAdvisor: X,X/5 | Booking.com: X,X/10 | Google: X,X/5
‚úÖ Ponto positivo: [Destacar os melhores aspectos - design, localiza√ß√£o, caf√© da manh√£ elogiado, etc.]
‚ö†Ô∏è Aten√ß√£o: [APENAS se for hotel simples/econ√¥mico: "Este √© um hotel de categoria econ√¥mica, √© um meio de hospedagem simples." - NUNCA fale mal do hotel]
üìç Dist√¢ncias a p√©:
[Principal ponto tur√≠stico]: X m (~X min)
[Centro/ponto importante]: X,X km (~X min)

2Ô∏è‚É£ - [Repetir formato para hotel 2]
[etc...]

INSTRU√á√ïES IMPORTANTES:
- Use informa√ß√µes realistas sobre hot√©is reais de ${destinoDetectado}
- Notas devem ser coerentes (TripAdvisor at√© 5, Booking at√© 10, Google at√© 5)
- NUNCA critique negativamente os hot√©is
- Para hot√©is simples, use apenas "categoria econ√¥mica" ou "meio de hospedagem simples"
- Destaque pontos positivos genu√≠nos (localiza√ß√£o, caf√©, design, atendimento)
- Inclua dist√¢ncias reais para pontos tur√≠sticos principais
- Considere que √© para ${adultos} adulto${adultos > 1 ? 's' : ''}${criancas > 0 ? ` e ${criancas} crian√ßa${criancas > 1 ? 's' : ''}` : ''}
- M√°ximo 400 palavras total`;

    // ================================================================================
    // üîó CHAMAR A IA
    // ================================================================================
    
    console.log('üè® Gerando ranking para:', destinoDetectado);
    
    const response = await chamarIAParaDicas(prompt, 'ranking', { 
      destino: destinoDetectado,
      adultos: adultos,
      criancas: criancas
    });
    
    // ================================================================================
    // ‚úÖ EXIBIR RESULTADO
    // ================================================================================
    
    document.getElementById('rankingIA').innerText = response;
    
    // Mostrar bot√£o copiar
    if (btnCopiar) {
      btnCopiar.style.display = 'inline-block';
    }
    
    console.log('‚úÖ Ranking gerado:', {
      destino: destinoDetectado,
      hospedes: `${adultos} adultos, ${criancas} crian√ßas`,
      tamanho: response.length
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao gerar ranking:', error);
    document.getElementById('rankingIA').innerText = `‚ùå Erro: ${error.message}`;
    
    // Esconder bot√£o copiar se houver erro
    const btnCopiar = document.getElementById('btnCopiarRanking');
    if (btnCopiar) {
      btnCopiar.style.display = 'none';
    }
    
  } finally {
    btnGerar.disabled = false;
    btnGerar.innerHTML = 'üèÜ Gerar Ranking';
  }
}

// ================================================================================
// üîß FUN√á√ÉO AUXILIAR PARA CHAMAR A IA (compatibilidade com sistema existente)
// ================================================================================

/**
 * Chama a API de IA usando o sistema existente
 */
async function chamarIAParaDicas(prompt, tipo, extraData = {}) {
  try {
    // Verificar se existe a fun√ß√£o callAICorrigida (sistema mais novo)
    if (typeof callAICorrigida === 'function') {
      const formData = {
        tipos: [tipo === 'destino' ? 'Destino' : 'Hotel'],
        destino: extraData.destino || '',
        observacoes: prompt,
        textoColado: '',
        temImagem: false,
        parcelamento: { incluirParcelamento: false }
      };
      
      const analise = {
        multiplasOpcoes: false,
        temEscalas: false,
        tipoViagem: tipo === 'destino' ? 'destino' : 'hotel'
      };
      
      const response = await callAICorrigida(formData, analise);
      return response.choices[0].message.content;
      
    } else if (typeof callAI === 'function') {
      // Fallback para sistema antigo
      return await callAI(prompt, tipo, extraData);
      
    } else {
      // Fallback direto para API
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: prompt,
          tipo: tipo,
          destino: extraData.destino,
          temCriancas: extraData.temCriancas,
          periodo: extraData.periodo,
          adultos: extraData.adultos,
          criancas: extraData.criancas
        })
      });
      
      if (!response.ok) {
        throw new Error(`Erro HTTP ${response.status}`);
      }
      
      const data = await response.json();
      if (!data.success || !data.choices?.[0]?.message?.content) {
        throw new Error(data.error?.message || 'Erro na resposta da API');
      }
      
      return data.choices[0].message.content;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao chamar IA:', error);
    throw new Error(`Falha na comunica√ß√£o com IA: ${error.message}`);
  }
}

// ================================================================================
// üéØ INTEGRA√á√ÉO COM CHECKBOXES - HABILITAR RANKING QUANDO HOTEL SELECIONADO
// ================================================================================

// Adicionar event listeners quando o DOM carregar
document.addEventListener('DOMContentLoaded', function() {
  // Aguardar um pouco para garantir que outros scripts carregaram
  setTimeout(() => {
    console.log('üîß Configurando event listeners para checkboxes...');
    
    // Escutar mudan√ßas nos checkboxes de tipo
    const checkboxesTipo = document.querySelectorAll('input[name="tipo"]');
    if (checkboxesTipo.length > 0) {
      checkboxesTipo.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          const btnRanking = document.getElementById('btnGerarRanking');
          if (btnRanking) {
            const tipos = Array.from(document.querySelectorAll('input[name="tipo"]:checked')).map(el => el.value);
            const temHotel = tipos.includes('Hotel');
            
            if (temHotel) {
              btnRanking.disabled = false;
              btnRanking.title = 'Gerar ranking baseado no destino';
              console.log('‚úÖ Bot√£o ranking habilitado');
            } else {
              btnRanking.disabled = true;
              btnRanking.title = 'Selecione "Hotel" primeiro';
            }
          }
        });
      });
      console.log(`‚úÖ Event listeners configurados para ${checkboxesTipo.length} checkboxes`);
    } else {
      console.warn('‚ö†Ô∏è Checkboxes de tipo n√£o encontrados');
    }
  }, 1000);
});

// ================================================================================
// üîß MELHORAR A FUN√á√ÉO HABILITAR BOT√ÉO DICAS EXISTENTE
// ================================================================================

// Substituir a fun√ß√£o habilitarBotaoDicas existente
function habilitarBotaoDicas() {
  const btnGerar = document.getElementById('btnGerarDicas');
  if (btnGerar) {
    btnGerar.disabled = false;
    btnGerar.title = 'Gerar dicas baseadas no or√ßamento criado - Extra√ß√£o autom√°tica ativa';
    console.log('‚úÖ Bot√£o dicas habilitado - Sistema de extra√ß√£o autom√°tica pronto');
  }
}

// ================================================================================
// üöÄ LOG DE INICIALIZA√á√ÉO
// ================================================================================

console.log('üåç Sistema de Dicas e Ranking Melhorado Carregado!');
console.log('‚ú® Funcionalidades:');
console.log('   üéØ Extra√ß√£o autom√°tica de destino do or√ßamento');
console.log('   üìÖ Detec√ß√£o autom√°tica de per√≠odo da viagem');
console.log('   üë∂ Detec√ß√£o de crian√ßas para dicas fam√≠lia-friendly');
console.log('   üè® Ranking de hot√©is com formato espec√≠fico');
console.log('   üìã Bot√µes "Copiar" din√¢micos');
console.log('   üîó Compatibilidade com sistema existente');
console.log('üöÄ Pronto para uso!');
