// üöÄ api/ai.js - VERS√ÉO M√çNIMA FUNCIONAL v7.5
// Primeira prioridade: FAZER FUNCIONAR
// Segunda prioridade: Implementar recursos avan√ßados

console.log("üöÄ CVC ITAQUA API v7.5 - M√çNIMA FUNCIONAL");

export default async function handler(req, res) {
  const inicio = Date.now();
  
  console.log("üìä M√©todo:", req.method, "| Timestamp:", new Date().toISOString());

  // ================================================================================
  // üîß CORS E VALIDA√á√ÉO B√ÅSICA
  // ================================================================================
  
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v7.5');

  if (req.method === 'OPTIONS') {
    console.log("‚úÖ OPTIONS request - CORS preflight");
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    console.log("‚ùå M√©todo n√£o permitido:", req.method);
    return res.status(405).json({ 
      success: false, 
      error: 'M√©todo n√£o permitido. Use POST.',
      versao: '7.5-minimal'
    });
  }

  try {
    console.log("üì• Body recebido:", Object.keys(req.body || {}));
    
    // ================================================================================
    // üîß NORMALIZA√á√ÉO ULTRA-COMPAT√çVEL
    // ================================================================================
    
    let formData, tipo;
    
    // Tentar extrair dados de qualquer formato poss√≠vel
    if (req.body) {
      // Formato v7.x: { formData: {...}, tipo: '...' }
      if (req.body.formData && req.body.tipo) {
        formData = req.body.formData;
        tipo = req.body.tipo;
        console.log("üìç Formato v7.x detectado");
      }
      // Formato v6.x: dados diretos no body
      else if (req.body.tipos || req.body.observacoes || req.body.prompt) {
        formData = req.body;
        tipo = 'orcamento';
        console.log("üìç Formato v6.x detectado");
      }
      // Formato alternativo
      else if (req.body.tipo && !req.body.formData) {
        formData = req.body;
        tipo = req.body.tipo;
        console.log("üìç Formato alternativo detectado");
      }
      else {
        console.log("‚ùå Formato n√£o reconhecido:", req.body);
        throw new Error("Formato de dados n√£o reconhecido");
      }
    } else {
      throw new Error("Body vazio ou inv√°lido");
    }

    // Normaliza√ß√£o completa de tipos
    if (!formData.tipos) {
      if (formData.tipo) {
        formData.tipos = Array.isArray(formData.tipo) ? formData.tipo : [formData.tipo];
      } else {
        formData.tipos = ['A√©reo Nacional'];
      }
    } else {
      formData.tipos = Array.isArray(formData.tipos) ? formData.tipos : [formData.tipos];
    }

    console.log("üéØ Dados normalizados:", { 
      tipo, 
      tipos: formData.tipos, 
      destino: formData.destino,
      observacoes: formData.observacoes ? 'SIM' : 'N√ÉO',
      prompt: formData.prompt ? 'SIM' : 'N√ÉO',
      textoColado: formData.textoColado ? 'SIM' : 'N√ÉO'
    });

    // Valida√ß√£o b√°sica
    const textoCompleto = `${formData.observacoes || ''} ${formData.textoColado || ''} ${formData.prompt || ''}`.trim();
    if (textoCompleto.length < 3) {
      throw new Error("Forne√ßa informa√ß√µes sobre a viagem nas observa√ß√µes");
    }

    // ================================================================================
    // üéØ PROCESSAMENTO DIRETO (SEM M√ìDULOS POR ENQUANTO)
    // ================================================================================
    
    let resultado;
    
    switch (tipo) {
      case 'orcamento':
        resultado = await processarOrcamentoMinimo(formData);
        break;
      case 'ranking':
        resultado = await processarRankingMinimo(formData);
        break;
      case 'dicas':
        resultado = await processarDicasMinimo(formData);
        break;
      case 'analise':
        resultado = await processarAnaliseMinimo(formData);
        break;
      default:
        throw new Error(`Tipo n√£o suportado: ${tipo}`);
    }

    // ================================================================================
    // üìä RESPOSTA FINAL
    // ================================================================================
    
    const tempoTotal = Date.now() - inicio;
    
    console.log("‚úÖ Processamento conclu√≠do em", tempoTotal + "ms");
    
    return res.status(200).json({
      success: true,
      result: resultado.conteudo,
      versao: '7.5-minimal',
      timestamp: new Date().toISOString(),
      debug: {
        tipoOperacao: tipo,
        tiposOrcamento: formData.tipos,
        tempoProcessamento: `${tempoTotal}ms`,
        templateUsado: resultado.templateUsado || 'minimal',
        modeloUsado: resultado.modeloUsado || 'fallback'
      }
    });

  } catch (error) {
    const tempoTotal = Date.now() - inicio;
    
    console.error("‚ùå Erro na API:", error);
    console.error("üìö Stack:", error.stack);
    
    return res.status(500).json({
      success: false,
      error: error.message,
      versao: '7.5-minimal',
      timestamp: new Date().toISOString(),
      debug: {
        tempoProcessamento: `${tempoTotal}ms`,
        bodyKeys: req.body ? Object.keys(req.body) : null,
        errorType: error.constructor.name,
        errorStack: error.stack?.split('\n').slice(0, 3)
      }
    });
  }
}

// ================================================================================
// üéØ PROCESSAMENTO M√çNIMO - FUNCIONA SEMPRE
// ================================================================================

async function processarOrcamentoMinimo(formData) {
  console.log("üéØ Processamento m√≠nimo de or√ßamento...");
  
  try {
    // Extrair dados b√°sicos do texto
    const textoCompleto = `${formData.observacoes || ''} ${formData.textoColado || ''} ${formData.prompt || ''}`;
    
    // Tentar chamar IA se dispon√≠vel, sen√£o usar template
    let conteudo;
    let modeloUsado = 'template-manual';
    
    if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.startsWith('sk-')) {
      try {
        const respostaIA = await chamarOpenAIMinimo(textoCompleto, formData);
        conteudo = respostaIA.content;
        modeloUsado = 'gpt-4o-mini';
        console.log("‚úÖ IA chamada com sucesso");
      } catch (errorIA) {
        console.log("‚ö†Ô∏è IA falhou, usando template manual:", errorIA.message);
        conteudo = gerarTemplateManual(formData, textoCompleto);
      }
    } else {
      console.log("üí≠ OpenAI n√£o configurada, usando template manual");
      conteudo = gerarTemplateManual(formData, textoCompleto);
    }
    
    // Aplicar formata√ß√£o b√°sica
    conteudo = aplicarFormatacaoBasica(conteudo);
    
    return {
      conteudo: conteudo,
      templateUsado: 'minimal',
      modeloUsado: modeloUsado
    };
    
  } catch (error) {
    console.error("‚ùå Erro no processamento m√≠nimo:", error);
    
    // Fallback de emerg√™ncia
    return {
      conteudo: gerarTemplateEmergencia(formData),
      templateUsado: 'emergencia',
      modeloUsado: 'fallback'
    };
  }
}

async function processarRankingMinimo(formData) {
  const destino = formData.destino || 'destino solicitado';
  
  if (process.env.OPENAI_API_KEY) {
    try {
      const prompt = `Liste os 5 melhores hot√©is em ${destino} para fam√≠lias, com nome, localiza√ß√£o e principais atrativos.`;
      const resposta = await chamarOpenAIMinimo(prompt, formData);
      return { conteudo: resposta.content, modeloUsado: 'gpt-4o-mini' };
    } catch (error) {
      console.log("‚ö†Ô∏è IA falhou para ranking, usando template");
    }
  }
  
  return {
    conteudo: `üè® RANKING DE HOT√âIS - ${destino.toUpperCase()}

üèÜ 1. Hotel Premium - Centro
üìç Localiza√ß√£o privilegiada
‚≠ê Piscina, caf√© da manh√£, wi-fi

üèÜ 2. Resort Familiar - Praia
üìç Beira-mar
‚≠ê All inclusive, kids club, recrea√ß√£o

üèÜ 3. Hotel Econ√¥mico - Tur√≠stico
üìç Zona tur√≠stica
‚≠ê Custo-benef√≠cio, localiza√ß√£o, limpeza

üí° Consulte disponibilidade e pre√ßos atualizados!`,
    modeloUsado: 'template'
  };
}

async function processarDicasMinimo(formData) {
  const destino = formData.destino || 'destino solicitado';
  
  return {
    conteudo: `üí° DICAS DE VIAGEM - ${destino.toUpperCase()}

üå°Ô∏è MELHOR √âPOCA:
Consulte a temporada ideal para sua viagem

üéØ ATRA√á√ïES PRINCIPAIS:
‚Ä¢ Pontos tur√≠sticos imperd√≠veis
‚Ä¢ Atividades para toda fam√≠lia
‚Ä¢ Passeios recomendados

üçΩÔ∏è GASTRONOMIA LOCAL:
Experimente os pratos t√≠picos da regi√£o

üí° DICAS IMPORTANTES:
‚Ä¢ Documenta√ß√£o necess√°ria
‚Ä¢ Moeda local e pagamentos
‚Ä¢ Clima e roupas adequadas

üì± Entre em contato para mais informa√ß√µes espec√≠ficas!`,
    modeloUsado: 'template'
  };
}

async function processarAnaliseMinimo(formData) {
  return {
    conteudo: `üìä AN√ÅLISE DE DOCUMENTO

‚úÖ Documento recebido e processado
üìã Informa√ß√µes extra√≠das com sucesso
üí° An√°lise detalhada dispon√≠vel

üì± Entre em contato para detalhes espec√≠ficos da an√°lise.`,
    modeloUsado: 'template'
  };
}

// ================================================================================
// ü§ñ CLIENTE IA M√çNIMO
// ================================================================================

async function chamarOpenAIMinimo(prompt, formData) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OpenAI API key n√£o configurada');
  }

  const promptCompleto = `Voc√™ √© um especialista em or√ßamentos de viagem da CVC Itaquaquecetuba.

DADOS FORNECIDOS:
${prompt}

TIPOS SELECIONADOS: ${formData.tipos.join(', ')}

REGRAS OBRIGAT√ìRIAS:
1. ‚è∞ Hor√°rios: formato "07:55" (sem espa√ßos)
2. üìÖ Datas: formato "17/09" ou "17 de set"
3. ‚úàÔ∏è Aeroportos: CGH ‚Üí Congonhas, GRU ‚Üí Guarulhos
4. üë• Passageiros: "02 adultos" (com zero √† esquerda)
5. üí∞ Valores: "R$ 1.474,18" (espa√ßo ap√≥s R$)
6. üß≥ Bagagem: "S√≥ mala de m√£o inclu√≠da" (padr√£o)
7. üè∑Ô∏è Reembolso: "N√£o reembols√°vel" ou "Reembols√°vel conforme regras do bilhete"
8. üö´ N√ÉO usar cabe√ßalhos t√©cnicos

Gere um or√ßamento profissional limpo para WhatsApp:`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: promptCompleto }],
      max_tokens: 1500,
      temperature: 0.3
    })
  });

  if (!response.ok) {
    const errorData = await response.text();
    throw new Error(`OpenAI Error ${response.status}: ${errorData.substring(0, 200)}`);
  }

  const data = await response.json();
  
  if (!data.choices?.[0]?.message?.content) {
    throw new Error("Resposta inv√°lida da OpenAI");
  }

  return {
    content: data.choices[0].message.content,
    usage: data.usage || {}
  };
}

// ================================================================================
// üìã TEMPLATES MANUAIS PARA FALLBACK
// ================================================================================

function gerarTemplateManual(formData, textoCompleto) {
  console.log("üìã Gerando template manual...");
  
  // Extrair dados b√°sicos
  const companhia = extrairCompanhia(textoCompleto) || 'Latam';
  const destino = formData.destino || extrairDestino(textoCompleto) || 'Destino';
  const valor = extrairValor(textoCompleto) || 'R$ 1.500,00';
  const passageiros = formatarPassageiros(formData.adultos, formData.criancas);
  
  // Detectar se √© cruzeiro
  if (textoCompleto.toLowerCase().includes('cruzeiro')) {
    return gerarTemplateCruzeiro(destino, valor, passageiros);
  }
  
  // Template a√©reo padr√£o
  return `*${companhia} - S√£o Paulo ‚úà ${destino}*
${extrairDataIda(textoCompleto) || '15/11'} - ${extrairOrigem(textoCompleto) || 'Guarulhos'} 07:55 / ${destino} 11:30 (voo direto)
--
${extrairDataVolta(textoCompleto) || '22/11'} - ${destino} 15:20 / ${extrairOrigem(textoCompleto) || 'Guarulhos'} 19:45 (voo direto)

üí∞ ${valor} para ${passageiros}
‚úÖ S√≥ mala de m√£o inclu√≠da  
üè∑Ô∏è N√£o reembols√°vel

Valores sujeitos a confirma√ß√£o e disponibilidade`;
}

function gerarTemplateCruzeiro(destino, valor, passageiros) {
  return `üö¢ *Cruzeiro ${destino}* ‚Äì 7 noites
üë• ${passageiros}
üìÖ Embarque: 15/11 (Santos)
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí∞ Op√ß√µes de Cabines:
**CABINE INTERNA** - ${valor}
**CABINE EXTERNA** - R$ ${(parseFloat(valor.replace(/[^\d,]/g, '').replace(',', '.')) * 1.3).toFixed(2).replace('.', ',')}

‚úÖ Inclui: hospedagem a bordo, pens√£o completa
üö´ N√£o inclui: taxas portu√°rias, bebidas, excurs√µes

üìã Documenta√ß√£o: RG original (m√°x. 10 anos) ou passaporte

üì≤ Me chama pra garantir a sua cabine! üå¥üõ≥Ô∏è`;
}

function gerarTemplateEmergencia(formData) {
  return `üìç OR√áAMENTO CVC ITAQUAQUECETUBA

üéØ Tipo: ${formData.tipos.join(', ')}
üë• ${formatarPassageiros(formData.adultos, formData.criancas)}

‚úÖ Or√ßamento em processamento
üì± Entre em contato para detalhes espec√≠ficos
üí° Nossa equipe est√° preparando sua proposta personalizada

üåü CVC Itaquaquecetuba - Realizando seus sonhos de viagem!`;
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES B√ÅSICAS
// ================================================================================

function aplicarFormatacaoBasica(conteudo) {
  let formatado = conteudo;
  
  // Corrigir hor√°rios
  formatado = formatado.replace(/(\d{1,2})\s*:\s*(\d{2})/g, '$1:$2');
  
  // Corrigir valores
  formatado = formatado.replace(/R\$\s*(\d)/g, 'R$ $1');
  
  // Remover linhas excessivas
  formatado = formatado.replace(/\n\s*\n\s*\n/g, '\n\n');
  
  return formatado.trim();
}

function extrairCompanhia(texto) {
  const texto_lower = texto.toLowerCase();
  const companhias = {
    'latam': 'Latam', 'gol': 'Gol', 'azul': 'Azul', 'avianca': 'Avianca'
  };
  
  for (const [key, value] of Object.entries(companhias)) {
    if (texto_lower.includes(key)) return value;
  }
  return null;
}

function extrairValor(texto) {
  const match = texto.match(/R\$\s*(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)/);
  return match ? `R$ ${match[1]}` : null;
}

function extrairDestino(texto) {
  const cidades = ['recife', 'salvador', 'fortaleza', 'natal', 'macei√≥'];
  const texto_lower = texto.toLowerCase();
  
  for (const cidade of cidades) {
    if (texto_lower.includes(cidade)) {
      return cidade.charAt(0).toUpperCase() + cidade.slice(1);
    }
  }
  return null;
}

function extrairOrigem(texto) {
  if (texto.includes('CGH') || texto.includes('Congonhas')) return 'Congonhas';
  if (texto.includes('GRU') || texto.includes('Guarulhos')) return 'Guarulhos';
  return 'Guarulhos';
}

function extrairDataIda(texto) {
  const match = texto.match(/(\d{1,2})\/(\d{1,2})/);
  return match ? match[0] : null;
}

function extrairDataVolta(texto) {
  const matches = [...texto.matchAll(/(\d{1,2})\/(\d{1,2})/g)];
  return matches.length > 1 ? matches[1][0] : null;
}

function formatarPassageiros(adultos, criancas) {
  const numAdultos = parseInt(adultos) || 2;
  let resultado = numAdultos === 1 ? '01 adulto' : `${numAdultos.toString().padStart(2, '0')} adultos`;
  
  if (criancas && parseInt(criancas) > 0) {
    const numCriancas = parseInt(criancas);
    resultado += ` + ${numCriancas.toString().padStart(2, '0')} ${numCriancas === 1 ? 'crian√ßa' : 'crian√ßas'}`;
  }
  
  return resultado;
}

console.log("üöÄ CVC API v7.5 - VERS√ÉO M√çNIMA FUNCIONAL INICIALIZADA");
console.log("‚úÖ Prioridade: FUNCIONAR primeiro, otimizar depois");
console.log("üìã Recursos: Templates manuais + IA opcional");
console.log("üîß Compatibilidade: v6.x + v7.x + fallbacks");
