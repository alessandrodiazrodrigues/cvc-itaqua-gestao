// üöÄ api/ai.js - SISTEMA CVC ITAQUA v7.3 FUNCIONAL
// Volta ao que funcionava + organiza√ß√£o modular interna
// Corre√ß√µes dos problemas identificados

export default async function handler(req, res) {
  const inicio = Date.now();
  
  console.log("üöÄ CVC ITAQUA API v7.3 - Sistema Funcional Organizado");
  console.log("üìä M√©todo:", req.method, "| Timestamp:", new Date().toISOString());

  // ================================================================================
  // üîß CONFIGURA√á√ÉO CORS
  // ================================================================================
  
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v7.3');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      success: false, 
      error: 'M√©todo n√£o permitido',
      versao: '7.3'
    });
  }

  try {
    console.log("üì• Dados recebidos:", req.body ? Object.keys(req.body) : null);

    // ================================================================================
    // üîß NORMALIZA√á√ÉO DE DADOS
    // ================================================================================
    
    let formData, tipo;
    
    if (req.body.formData && req.body.tipo) {
      formData = req.body.formData;
      tipo = req.body.tipo;
      console.log("üìç Formato v7.x detectado");
    } else if (req.body.tipos || req.body.observacoes) {
      formData = req.body;
      tipo = 'orcamento';
      console.log("üìç Formato legado convertido");
    } else {
      throw new Error("Formato de dados n√£o reconhecido");
    }

    // Normalizar tipos
    if (formData.tipos) {
      formData.tipos = Array.isArray(formData.tipos) ? formData.tipos : [formData.tipos];
    } else {
      formData.tipos = ['A√©reo Nacional'];
    }

    console.log("üéØ Processando:", { tipo, tipos: formData.tipos, destino: formData.destino });

    // Valida√ß√£o b√°sica
    if (!formData.tipos || formData.tipos.length === 0) {
      throw new Error("Pelo menos um tipo deve ser selecionado");
    }

    const textoCompleto = `${formData.observacoes || ''} ${formData.textoColado || ''} ${formData.prompt || ''}`;
    if (textoCompleto.trim().length < 5) {
      throw new Error("Forne√ßa informa√ß√µes sobre a viagem");
    }

    // ================================================================================
    // üéØ PROCESSAMENTO BASEADO NO TIPO
    // ================================================================================
    
    let resultado;
    switch (tipo) {
      case 'orcamento':
        resultado = await processarOrcamentoCompleto(formData);
        break;
      case 'ranking':
        resultado = await processarRanking(formData);
        break;
      case 'dicas':
        resultado = await processarDicas(formData);
        break;
      case 'analise':
        resultado = await processarAnalise(formData);
        break;
      default:
        throw new Error(`Tipo n√£o suportado: ${tipo}`);
    }

    // ================================================================================
    // üìä RESPOSTA FINAL
    // ================================================================================
    
    const tempoTotal = Date.now() - inicio;
    
    console.log("‚úÖ Processamento conclu√≠do");
    console.log(`‚è±Ô∏è Tempo: ${tempoTotal}ms`);
    
    return res.status(200).json({
      success: true,
      result: resultado.conteudo,
      versao: '7.3',
      timestamp: new Date().toISOString(),
      debug: {
        tipoOperacao: tipo,
        tiposOrcamento: formData.tipos,
        tempoProcessamento: `${tempoTotal}ms`,
        templateUsado: resultado.templateUsado || 'basico',
        modeloUsado: resultado.modeloUsado || 'gpt-4o-mini'
      }
    });

  } catch (error) {
    const tempoTotal = Date.now() - inicio;
    
    console.error("‚ùå Erro:", error);
    console.error("üìö Stack:", error.stack?.split('\n').slice(0, 3).join('\n'));
    
    return res.status(500).json({
      success: false,
      error: error.message,
      versao: '7.3',
      timestamp: new Date().toISOString(),
      debug: {
        tempoProcessamento: `${tempoTotal}ms`,
        bodyKeys: req.body ? Object.keys(req.body) : null
      }
    });
  }
}

// ================================================================================
// üí∞ PROCESSAMENTO COMPLETO DE OR√áAMENTOS
// ================================================================================

async function processarOrcamentoCompleto(formData) {
  console.log("üí∞ Processando or√ßamento completo...");
  
  try {
    // ETAPA 1: An√°lise inteligente
    const analise = analisarTextoInteligente(formData);
    console.log(`üìä An√°lise: ${analise.tipoDetectado}, m√∫ltiplas: ${analise.multiplasOpcoes}`);
    
    // ETAPA 2: Aplicar template correto
    const template = selecionarTemplateInteligente(analise, formData);
    const prompt = construirPromptOtimizado(formData, template, analise);
    
    console.log(`üìã Template: ${template.nome}`);
    
    // ETAPA 3: Chamar IA
    const resposta = await chamarIA(prompt, formData.temImagem, formData.arquivo);
    
    // ETAPA 4: Processar resposta com corre√ß√µes
    const conteudoFinal = processarRespostaCorrigida(resposta.content, template, analise);
    
    // ETAPA 5: Registrar custos
    await registrarCustos(resposta, formData, template.nome);
    
    return {
      conteudo: conteudoFinal,
      templateUsado: template.nome,
      modeloUsado: resposta.modelo_usado
    };
    
  } catch (error) {
    console.error("‚ùå Erro no or√ßamento:", error);
    throw new Error(`Falha no or√ßamento: ${error.message}`);
  }
}

// ================================================================================
// üîç AN√ÅLISE INTELIGENTE (CORRIGIDA)
// ================================================================================

function analisarTextoInteligente(formData) {
  const textoCompleto = `${formData.observacoes || ''} ${formData.textoColado || ''} ${formData.prompt || ''}`.toLowerCase();
  
  console.log("üîç Analisando texto:", textoCompleto.substring(0, 100) + "...");
  
  // CORRE√á√ÉO 1: Detec√ß√£o melhorada de m√∫ltiplas op√ß√µes
  const multiplasOpcoes = 
    textoCompleto.includes('op√ß√£o 1') || textoCompleto.includes('op√ß√£o 2') ||
    textoCompleto.includes('passageiro 1') || textoCompleto.includes('passageiro 2') ||
    (textoCompleto.match(/r\$\s*\d+[\.,]\d+/g) || []).length >= 2 ||
    (textoCompleto.match(/\d{1,3}[\.,]\d{3}[\.,]\d{2}/g) || []).length >= 2;
  
  // CORRE√á√ÉO 2: Detec√ß√£o melhorada de cruzeiros
  const ehCruzeiro = 
    textoCompleto.includes('cruzeiro') || textoCompleto.includes('msc') || 
    textoCompleto.includes('costa') || textoCompleto.includes('navio') ||
    textoCompleto.includes('embarque: santos') || textoCompleto.includes('cabine') ||
    textoCompleto.includes('desembarque: santos');
  
  // Detec√ß√£o de outros tipos
  const ehHotel = textoCompleto.includes('hotel') || textoCompleto.includes('resort');
  const ehMultitrecho = textoCompleto.includes('trecho') || textoCompleto.includes('multitrecho');
  
  // Determinar tipo principal
  let tipoDetectado = 'aereo_ida_volta';
  if (ehCruzeiro) tipoDetectado = 'cruzeiro';
  else if (multiplasOpcoes) tipoDetectado = 'multiplas_opcoes';
  else if (ehHotel) tipoDetectado = 'hotel';
  else if (ehMultitrecho) tipoDetectado = 'multitrecho';
  
  const quantidadeOpcoes = Math.max(
    (textoCompleto.match(/op√ß√£o\s+\d+/g) || []).length,
    (textoCompleto.match(/passageiro\s+\d+/g) || []).length,
    (textoCompleto.match(/r\$\s*\d+[\.,]\d+/g) || []).length,
    1
  );
  
  return {
    tipoDetectado,
    multiplasOpcoes,
    quantidadeOpcoes,
    ehCruzeiro,
    ehHotel,
    ehMultitrecho,
    tamanhoTexto: textoCompleto.length
  };
}

// ================================================================================
// üìã SELE√á√ÉO INTELIGENTE DE TEMPLATES (CORRIGIDA)
// ================================================================================

function selecionarTemplateInteligente(analise, formData) {
  console.log("üìã Selecionando template para:", analise.tipoDetectado);
  
  if (analise.ehCruzeiro) {
    return {
      nome: 'cruzeiro',
      template: TEMPLATE_CRUZEIRO_CORRIGIDO
    };
  }
  
  if (analise.multiplasOpcoes) {
    return {
      nome: `multiplas_opcoes_${analise.quantidadeOpcoes}`,
      template: TEMPLATE_MULTIPLAS_OPCOES_CORRIGIDO
    };
  }
  
  if (analise.ehHotel) {
    return {
      nome: 'hotel',
      template: TEMPLATE_HOTEL
    };
  }
  
  // Template padr√£o (ida e volta)
  return {
    nome: 'ida_volta',
    template: TEMPLATE_IDA_VOLTA_CORRIGIDO
  };
}

// ================================================================================
// üìã TEMPLATES CORRIGIDOS
// ================================================================================

const TEMPLATE_CRUZEIRO_CORRIGIDO = `
OR√áAMENTO CRUZEIRO CVC ITAQUAQUECETUBA

DADOS: {dadosViagem}

FORMATO OBRIGAT√ìRIO CRUZEIRO:

üö¢ Cruzeiro [NAVIO] ‚Äì [DURACAO] noites
üë• [PASSAGEIROS]
üìÖ Embarque: [DATA] ([PORTO])
üåä Roteiro: [ROTEIRO]

üí∞ Op√ß√µes de Cabines:
**CABINE INTERNA** - R$ [VALOR] por pessoa
**CABINE EXTERNA** - R$ [VALOR] por pessoa
**CABINE VARANDA** - R$ [VALOR] por pessoa

Taxas: R$ [TAXAS] total
üí∞ Valor Total: R$ [VALOR_TOTAL]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa
üö´ N√£o inclui: taxas portu√°rias, bebidas, excurs√µes

IMPORTANTE: Este √© um CRUZEIRO, N√ÉO um voo. N√ÉO mencionar aeroportos ou detalhes de voos.
PASSAGEIROS: "02 adultos" (apenas UM zero √† esquerda)`;

const TEMPLATE_MULTIPLAS_OPCOES_CORRIGIDO = `
OR√áAMENTO M√öLTIPLAS OP√á√ïES CVC ITAQUAQUECETUBA

DADOS: {dadosViagem}

FORMATO OBRIGAT√ìRIO M√öLTIPLAS OP√á√ïES:

üìç [Destino]
üóìÔ∏è [Datas] ([X] dias e [Y] noites)
üë• [PASSAGEIROS]

**OP√á√ÉO 1:** R$ [VALOR_1]
‚úà [COMPANHIA] - [ORIGEM] [HORA] / [DESTINO] [HORA]
‚úà [COMPANHIA] - [DESTINO] [HORA] / [ORIGEM] [HORA]
‚úÖ [BAGAGEM_1]

**OP√á√ÉO 2:** R$ [VALOR_2]
‚úà [COMPANHIA] - [ORIGEM] [HORA] / [DESTINO] [HORA]
‚úà [COMPANHIA] - [DESTINO] [HORA] / [ORIGEM] [HORA]
‚úÖ [BAGAGEM_2]

IMPORTANTE: Detectar e apresentar TODAS as op√ß√µes com pre√ßos diferentes.
PASSAGEIROS: "02 adultos" (apenas UM zero √† esquerda)`;

const TEMPLATE_IDA_VOLTA_CORRIGIDO = `
OR√áAMENTO CVC ITAQUAQUECETUBA

DADOS: {dadosViagem}

FORMATO OBRIGAT√ìRIO:

üìç [Destino]
üóìÔ∏è [Datas] ([X] dias e [Y] noites)
üë• [PASSAGEIROS]

*O Pacote Inclui:*
- A√©reo ida e volta com [Companhia]
- Taxas de embarque
- [Bagagem inclu√≠da]

‚úà Detalhes dos Voos:
[Data ida] - [Origem] [Hora] / [Destino] [Hora]
[Data volta] - [Destino] [Hora] / [Origem] [Hora]

üí∞ Valor Total: R$ [Valor]
[Condi√ß√µes]

PASSAGEIROS: "02 adultos" (apenas UM zero √† esquerda)`;

const TEMPLATE_HOTEL = `
OR√áAMENTO HOTEL CVC ITAQUAQUECETUBA

DADOS: {dadosViagem}

FORMATO OBRIGAT√ìRIO:

üè® [NOME_HOTEL] - [CATEGORIA]
üìç [CIDADE/REGI√ÉO]
üóìÔ∏è [DATAS] ([X] di√°rias)
üë• [PASSAGEIROS]

üõèÔ∏è Acomoda√ß√£o: [TIPO_QUARTO]
üçΩÔ∏è Regime: [PENSAO]
‚úÖ Facilidades: [SERVICOS]

üí∞ Valor Total: R$ [VALOR]

PASSAGEIROS: "02 adultos" (apenas UM zero √† esquerda)`;

// ================================================================================
// üìã CONSTRU√á√ÉO DE PROMPT OTIMIZADA
// ================================================================================

function construirPromptOtimizado(formData, template, analise) {
  const dadosViagem = formatarDadosViagem(formData);
  const promptBase = template.template.replace('{dadosViagem}', dadosViagem);
  
  const promptCompleto = `${promptBase}

REGRAS CR√çTICAS CVC:
1. ‚è∞ HOR√ÅRIOS: "07:55" (nunca "07: 55")
2. üìÖ DATAS: "17 de set" ou "17/09" 
3. ‚úàÔ∏è AEROPORTOS: CGH ‚Üí S√£o Paulo, GRU ‚Üí S√£o Paulo
4. üë• PASSAGEIROS: "02 adultos" (apenas UM zero √† esquerda, nunca "002")
5. üí∞ VALORES: "R$ 3.752,55" (espa√ßo ap√≥s R$)
6. üß≥ BAGAGEM: "S√≥ mala de m√£o inclu√≠da" (padr√£o)
7. üè∑Ô∏è REEMBOLSO: "N√£o reembols√°vel" OU "Reembols√°vel conforme regras"
8. üö´ PROIBIDO: separadores (---), formata√ß√£o markdown

AN√ÅLISE DETECTADA:
- Tipo: ${analise.tipoDetectado}
- M√∫ltiplas op√ß√µes: ${analise.multiplasOpcoes ? 'SIM' : 'N√ÉO'}
- Quantidade: ${analise.quantidadeOpcoes}
- √â cruzeiro: ${analise.ehCruzeiro ? 'SIM' : 'N√ÉO'}

GERAR OR√áAMENTO PROFISSIONAL:`;

  return promptCompleto;
}

// ================================================================================
// üîß PROCESSAMENTO COM CORRE√á√ïES
// ================================================================================

function processarRespostaCorrigida(conteudo, template, analise) {
  console.log(`üîß Processando resposta (template: ${template.nome})...`);
  
  let processado = conteudo.trim();
  
  // Limpeza geral
  processado = processado.replace(/OR√áAMENTO CVC.*?\n/gi, '');
  processado = processado.replace(/DADOS.*?\n/gi, '');
  processado = processado.replace(/FORMATO.*?\n/gi, '');
  processado = processado.replace(/REGRAS.*?\n/gi, '');
  processado = processado.replace(/GERAR.*?\n/gi, '');
  
  // CORRE√á√ÉO PRINCIPAL: Formato de passageiros
  processado = processado.replace(/(\d+)\s+(adulto|crian√ßa)/g, (match, num, tipo) => {
    // Se √© um d√≠gito, adicionar um zero √† esquerda
    if (num.length === 1) {
      return `0${num} ${tipo}`;
    }
    // Se j√° tem dois ou mais d√≠gitos, manter como est√°
    return `${num} ${tipo}`;
  });
  
  // Corrigir formato incorreto espec√≠fico (002 ‚Üí 02, 003 ‚Üí 03, etc)
  processado = processado.replace(/0{2,}(\d)\s+(adulto|crian√ßa)/g, '0$1 $2');
  
  // Outras corre√ß√µes de formata√ß√£o
  processado = processado.replace(/(\d{1,2})\s*:\s*(\d{2})/g, '$1:$2'); // Hor√°rios
  processado = processado.replace(/R\$\s*(\d)/g, 'R$ $1'); // Valores
  processado = processado.replace(/\n\s*\n\s*\n/g, '\n\n'); // Linhas extras
  
  // Corre√ß√µes espec√≠ficas por template
  if (template.nome === 'cruzeiro') {
    // Remover men√ß√µes a voos se for cruzeiro
    processado = processado.replace(/‚úà.*?\n/g, '');
    processado = processado.replace(/.*aeroporto.*?\n/gi, '');
    processado = processado.replace(/.*voo.*?\n/gi, '');
  }
  
  return processado;
}

// ================================================================================
// ü§ñ CLIENTE DE IA
// ================================================================================

async function chamarIA(prompt, temImagem = false, arquivo = null) {
  console.log("ü§ñ Chamando IA...");
  
  try {
    if (temImagem && arquivo && process.env.ANTHROPIC_API_KEY) {
      return await chamarClaude(prompt, arquivo);
    } else {
      return await chamarOpenAI(prompt);
    }
  } catch (error) {
    console.error("‚ùå Erro na IA:", error);
    throw new Error(`Falha na IA: ${error.message}`);
  }
}

async function chamarOpenAI(prompt) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY n√£o configurada');
  }

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 2000,
      temperature: 0.3
    })
  });

  if (!response.ok) {
    const errorData = await response.text();
    throw new Error(`OpenAI Error ${response.status}: ${errorData.substring(0, 200)}`);
  }

  const data = await response.json();
  
  if (!data.choices?.[0]?.message?.content) {
    throw new Error("Resposta inv√°lida da OpenAI");
  }

  return {
    content: data.choices[0].message.content,
    usage: data.usage || { prompt_tokens: 0, completion_tokens: 0 },
    modelo_usado: 'gpt-4o-mini'
  };
}

async function chamarClaude(prompt, arquivo) {
  if (!process.env.ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY n√£o configurada');
  }

  const base64Data = arquivo.split(',')[1];
  const mediaType = arquivo.split(':')[1].split(';')[0];

  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-3-5-sonnet-20240620',
      max_tokens: 2000,
      messages: [{
        role: 'user',
        content: [
          { type: 'text', text: prompt },
          {
            type: 'image',
            source: {
              type: 'base64',
              media_type: mediaType,
              data: base64Data
            }
          }
        ]
      }]
    })
  });

  if (!response.ok) {
    const errorData = await response.text();
    throw new Error(`Claude Error ${response.status}: ${errorData.substring(0, 200)}`);
  }

  const data = await response.json();
  
  if (!data.content?.[0]?.text) {
    throw new Error("Resposta inv√°lida do Claude");
  }

  return {
    content: data.content[0].text,
    usage: data.usage || { input_tokens: 0, output_tokens: 0 },
    modelo_usado: 'claude-3-5-sonnet-20240620'
  };
}

// ================================================================================
// üè® OUTROS PROCESSAMENTOS
// ================================================================================

async function processarRanking(formData) {
  const destino = formData.destino || 'destino solicitado';
  const prompt = `Ranking dos 5 melhores hot√©is em ${destino} para fam√≠lias.

Formato:
üèÜ 1. Nome do Hotel - ‚≠ê‚≠ê‚≠ê‚≠ê
üìç Regi√£o/Localiza√ß√£o
üí∞ Faixa de pre√ßo aproximada
‚≠ê Principais diferenciais`;

  const resposta = await chamarIA(prompt);
  return { conteudo: resposta.content, modeloUsado: resposta.modelo_usado };
}

async function processarDicas(formData) {
  const destino = formData.destino || 'destino solicitado';
  const prompt = `Dicas de viagem para ${destino}, focadas em fam√≠lias.

üå°Ô∏è Melhor √©poca para visitar
üéØ Atra√ß√µes imperd√≠veis para crian√ßas
üçΩÔ∏è Gastronomia local
üí° Dicas importantes`;

  const resposta = await chamarIA(prompt);
  return { conteudo: resposta.content, modeloUsado: resposta.modelo_usado };
}

async function processarAnalise(formData) {
  const prompt = `Analise este documento e extraia as principais informa√ß√µes.`;
  const resposta = await chamarIA(prompt, formData.temImagem, formData.arquivo);
  return { conteudo: resposta.content, modeloUsado: resposta.modelo_usado };
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES
// ================================================================================

function formatarDadosViagem(formData) {
  return `
Destino: ${formData.destino || 'N√£o informado'}
Adultos: ${formData.adultos || '2'}
Crian√ßas: ${formData.criancas || '0'}${formData.idades ? ` (idades: ${formData.idades} anos)` : ''}
Tipos: ${formData.tipos?.join(', ') || 'N√£o especificado'}

OBSERVA√á√ïES:
${formData.observacoes || 'Nenhuma observa√ß√£o'}

INFORMA√á√ïES:
${formData.textoColado || formData.prompt || 'Nenhuma informa√ß√£o adicional'}
`;
}

async function registrarCustos(resposta, formData, template) {
  try {
    console.log('üí∞ Registrando custos...');
    
    const tokensTotal = (resposta.usage?.prompt_tokens || 0) + (resposta.usage?.completion_tokens || 0);
    const custoUSD = tokensTotal * 0.0001; // Aproxima√ß√£o
    const custoBRL = custoUSD * 5.2;
    
    console.log(`üí∞ Custo: R$ ${custoBRL.toFixed(6)} (${tokensTotal} tokens) - Template: ${template}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao registrar custos:', error);
  }
}

console.log("üöÄ CVC API v7.3 - Sistema Funcional Organizado Inicializado");
console.log("‚úÖ Corre√ß√µes implementadas:");
console.log("- üîß Detec√ß√£o melhorada de m√∫ltiplas op√ß√µes e cruzeiros");
console.log("- üë• Formato correto de passageiros (02 adultos)");
console.log("- üìã Templates espec√≠ficos por tipo");
console.log("- üéØ An√°lise inteligente de conte√∫do");
