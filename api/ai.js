// ================================================================================
// üèÜ CVC ITAQUA - API CORRIGIDA v5.3.1-fixed
// ================================================================================
// CORRE√á√ïES: Detec√ß√£o ida/volta + Campos opcionais + Templates corretos
// ================================================================================

// ================================================================================
// üó∫Ô∏è MAPEAMENTO COMPLETO DE AEROPORTOS
// ================================================================================

const aeroportos = {
  // Principais aeroportos brasileiros
  'CGH': 'Congonhas (SP)', 'GRU': 'Guarulhos (SP)', 'VCP': 'Viracopos (SP)',
  'SDU': 'Santos Dumont (RJ)', 'GIG': 'Gale√£o (RJ)', 
  'BSB': 'Bras√≠lia (DF)', 'CNF': 'Confins (MG)', 'PLU': 'Pampulha (MG)',
  'CWB': 'Curitiba (PR)', 'IGU': 'Foz do Igua√ßu (PR)', 
  'REC': 'Recife (PE)', 'FOR': 'Fortaleza (CE)', 'SSA': 'Salvador (BA)',
  'MAO': 'Manaus (AM)', 'BEL': 'Bel√©m (PA)', 'CGB': 'Cuiab√° (MT)',
  'CGR': 'Campo Grande (MS)', 'AJU': 'Aracaju (SE)', 'MCZ': 'Macei√≥ (AL)',
  'JPA': 'Jo√£o Pessoa (PB)', 'NAT': 'Natal (RN)', 'THE': 'Teresina (PI)',
  'SLZ': 'S√£o Lu√≠s (MA)', 'VIX': 'Vit√≥ria (ES)', 'FLN': 'Florian√≥polis (SC)',
  'POA': 'Porto Alegre (RS)', 'BPS': 'Porto Seguro (BA)', 'IOS': 'Ilh√©us (BA)',
  'RAO': 'Ribeir√£o Preto (SP)', 'NVT': 'Navegantes (SC)', 'UDI': 'Uberl√¢ndia (MG)',
  'MOC': 'Montes Claros (MG)', 'JDF': 'Juiz de Fora (MG)', 'GYN': 'Goi√¢nia (GO)',
  'PNZ': 'Petrolina (PE)', 'JTC': 'Bauru (SP)', 'AQA': 'Araraquara (SP)',
  'PPB': 'Presidente Prudente (SP)', 'CXJ': 'Caxias do Sul (RS)',
  
  // Aeroportos internacionais importantes
  'EZE': 'Buenos Aires (Argentina)', 'MVD': 'Montevid√©u (Uruguai)',
  'ASU': 'Assun√ß√£o (Paraguai)', 'SCL': 'Santiago (Chile)', 'LIM': 'Lima (Peru)',
  'BOG': 'Bogot√° (Col√¥mbia)', 'UIO': 'Quito (Equador)', 'CCS': 'Caracas (Venezuela)',
  'MIA': 'Miami (EUA)', 'MCO': 'Orlando (EUA)', 'JFK': 'Nova York (EUA)',
  'LAX': 'Los Angeles (EUA)', 'CDG': 'Paris (Fran√ßa)', 'MAD': 'Madrid (Espanha)',
  'FCO': 'Roma (It√°lia)', 'LIS': 'Lisboa (Portugal)', 'LGW': 'Londres (Reino Unido)',
  'AMS': 'Amsterd√£ (Holanda)', 'FRA': 'Frankfurt (Alemanha)', 'ZUR': 'Zurich (Su√≠√ßa)',
  'DXB': 'Dubai (Emirados)', 'DOH': 'Doha (Catar)', 'IST': 'Istambul (Turquia)'
};

// ================================================================================
// üìã TEMPLATES CORRIGIDOS - IDA/VOLTA VS SOMENTE IDA
// ================================================================================

const TEMPLATES = {
  // ‚úÖ TEMPLATE CORRIGIDO PARA SOMENTE IDA
  'A√©reo Somente Ida': `*Passagem A√©rea - Somente Ida*
üè∑Ô∏è [COMPANHIA]
üóìÔ∏è [DATA] (Somente ida)
‚úàÔ∏è [DATA] - [ORIGEM] [HORA_IDA] / [DESTINO] [HORA_CHEGADA][DETALHES_VOO]
üí∞ R$ [VALOR] para [PASSAGEIROS]
üí≥ [PAGAMENTO]
üîó [LINK]

‚ö†Ô∏è Passagem somente de ida - sem retorno inclu√≠do`,

  // ‚úÖ TEMPLATE CORRIGIDO PARA IDA E VOLTA
  'A√©reo Ida e Volta': `*Passagem A√©rea - Ida e Volta*
üè∑Ô∏è [COMPANHIA]
üóìÔ∏è [DATA_IDA] a [DATA_VOLTA] ([DURACAO])
‚úàÔ∏è Ida: [DATA_IDA] - [ORIGEM] [HORA_IDA] / [DESTINO] [HORA_CHEGADA_IDA][DETALHES_VOO_IDA]
‚úàÔ∏è Volta: [DATA_VOLTA] - [DESTINO] [HORA_SAIDA_VOLTA] / [ORIGEM] [HORA_CHEGADA_VOLTA][DETALHES_VOO_VOLTA]

üí∞ R$ [VALOR] para [PASSAGEIROS]
üí≥ [PAGAMENTO]
üîó [LINK]

‚úÖ Passagem ida e volta inclu√≠da`,

  // ‚úÖ TEMPLATE PARA M√öLTIPLAS OP√á√ïES SOMENTE IDA
  'M√∫ltiplas Somente Ida': `*Passagens A√©reas - Op√ß√µes Somente Ida*

üìã *OP√á√ÉO 1: [COMPANHIA_1]*
üóìÔ∏è [DATA_1] (Somente ida)
‚úàÔ∏è [DATA_1] - [ORIGEM_1] [HORA_IDA_1] / [DESTINO_1] [HORA_CHEGADA_1][DETALHES_VOO_1]
üí∞ R$ [VALOR_1] para [PASSAGEIROS_1]
üí≥ [PAGAMENTO_1]
üîó [LINK_1]

üìã *OP√á√ÉO 2: [COMPANHIA_2]*
üóìÔ∏è [DATA_2] (Somente ida)
‚úàÔ∏è [DATA_2] - [ORIGEM_2] [HORA_IDA_2] / [DESTINO_2] [HORA_CHEGADA_2][DETALHES_VOO_2]
üí∞ R$ [VALOR_2] para [PASSAGEIROS_2]
üí≥ [PAGAMENTO_2]
üîó [LINK_2]

‚ö†Ô∏è Todas as op√ß√µes s√£o SOMENTE IDA - sem retorno inclu√≠do`,

  // ‚úÖ TEMPLATE PARA M√öLTIPLAS OP√á√ïES IDA E VOLTA
  'M√∫ltiplas Ida e Volta': `*Passagens A√©reas - Op√ß√µes Ida e Volta*

üìã *OP√á√ÉO 1: [COMPANHIA_1]*
üóìÔ∏è [DATA_IDA_1] a [DATA_VOLTA_1] ([DURACAO_1])
‚úàÔ∏è Ida: [DATA_IDA_1] - [ORIGEM_1] [HORA_IDA_1] / [DESTINO_1] [HORA_CHEGADA_IDA_1][DETALHES_IDA_1]
‚úàÔ∏è Volta: [DATA_VOLTA_1] - [DESTINO_1] [HORA_SAIDA_VOLTA_1] / [ORIGEM_1] [HORA_CHEGADA_VOLTA_1][DETALHES_VOLTA_1]
üí∞ R$ [VALOR_1] para [PASSAGEIROS_1]
üîó [LINK_1]

üìã *OP√á√ÉO 2: [COMPANHIA_2]*
üóìÔ∏è [DATA_IDA_2] a [DATA_VOLTA_2] ([DURACAO_2])
‚úàÔ∏è Ida: [DATA_IDA_2] - [ORIGEM_2] [HORA_IDA_2] / [DESTINO_2] [HORA_CHEGADA_IDA_2][DETALHES_IDA_2]
‚úàÔ∏è Volta: [DATA_VOLTA_2] - [DESTINO_2] [HORA_SAIDA_VOLTA_2] / [ORIGEM_2] [HORA_CHEGADA_VOLTA_2][DETALHES_VOLTA_2]
üí∞ R$ [VALOR_2] para [PASSAGEIROS_2]
üîó [LINK_2]

‚úÖ Todas as op√ß√µes incluem ida e volta`,

  // Outros templates mantidos
  'Hotel': `*Hospedagem*
üè® [NOME_HOTEL] - [CATEGORIA]‚≠ê
üìç [LOCALIZACAO]
üóìÔ∏è [CHECK_IN] a [CHECK_OUT] ([NOITES] noites)
üë• [ADULTOS] adultos[CRIANCAS_TEXTO]

üè† *Acomoda√ß√£o:*
[TIPO_QUARTO] com [REGIME_ALIMENTACAO]

‚úÖ *Inclui:*
‚Ä¢ [CAFE_MANHA]
‚Ä¢ [WIFI]
‚Ä¢ [SERVICOS_INCLUSOS]

üí∞ R$ [VALOR_TOTAL] para toda a estadia
üí≥ Parcelamento: [PARCELAS]x de R$ [VALOR_PARCELA]

‚ö†Ô∏è Tarifas sujeitas √† disponibilidade no momento da reserva`,

  'Cruzeiro': `üö¢ Cruzeiro [NOME_NAVIO] ‚Äì [DURACAO_NOITES] noites
[COMPOSICAO_PASSAGEIROS]
üìÖ Embarque: [DATA_EMBARQUE] ([DIA_SEMANA])
üìç Sa√≠da e chegada: [PORTO_EMBARQUE]
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üó∫ Itiner√°rio:
[ROTEIRO_DETALHADO]

üí• [TIPO_TARIFA]!
(Sujeita √† confirma√ß√£o de cabine e categoria)

[OPCOES_CABINES]

üìé Link para ver fotos, detalhes e reservar:
[LINK_CRUZEIRO]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa (refei√ß√µes), entretenimento e atividades para todas as idades!
üö´ N√£o inclui: taxas, bebidas, excurs√µes e transporte at√© o porto.

üì≤ Me chama pra garantir a sua cabine nesse cruzeiro incr√≠vel! üå¥üõ≥Ô∏è`,

  'Carro': `*Aluguel de Carro*
üöó [MODELO_CARRO] - [CATEGORIA]
üè¢ [LOCADORA]
üìç Retirada: [LOCAL_RETIRADA]
üìç Devolu√ß√£o: [LOCAL_DEVOLUCAO]
üóìÔ∏è [DATA_RETIRADA] √†s [HORA_RETIRADA] at√© [DATA_DEVOLUCAO] √†s [HORA_DEVOLUCAO]
‚è±Ô∏è [DURACAO_DIAS] dias

üîß *Especifica√ß√µes:*
‚Ä¢ [CAMBIO] | [COMBUSTIVEL]
‚Ä¢ [AR_CONDICIONADO]
‚Ä¢ [PORTAS] portas | [PASSAGEIROS] passageiros
‚Ä¢ [BAGAGEM]

‚úÖ *Inclui:*
‚Ä¢ [QUILOMETRAGEM]
‚Ä¢ [SEGUROS_INCLUSOS]
‚Ä¢ [TAXAS_INCLUIDAS]

üí∞ R$ [VALOR_TOTAL] para [DURACAO_DIAS] dias
üí≥ [FORMA_PAGAMENTO]
üîó [LINK]

‚ö†Ô∏è Valores sujeitos √† disponibilidade. Documenta√ß√£o obrigat√≥ria: CNH v√°lida`
};

const PRECOS_MODELOS = {
  'gpt-4o': { input: 0.005, output: 0.015 },
  'gpt-4o-mini': { input: 0.00015, output: 0.0006 },
  'claude-3-5-sonnet-20240620': { input: 0.003, output: 0.015 }
};

const USD_TO_BRL = 5.2;
const MAX_TOKENS = 2500;

// ================================================================================
// üéØ HANDLER PRINCIPAL CORRIGIDO
// ================================================================================

export default async function handler(req, res) {
  const startTime = Date.now();
  
  try {
    console.log('[API-CORRIGIDA] Iniciando processamento...');
    
    // Configura√ß√£o de CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    if (req.method === 'OPTIONS') {
      return res.status(200).json({ message: 'CORS OK' });
    }

    if (req.method === 'GET') {
      return res.status(200).json({
        message: 'CVC Itaqua API - Sistema Corrigido',
        version: '5.3.1-fixed',
        produtos_suportados: Object.keys(TEMPLATES),
        correcoes: [
          'Detec√ß√£o ida/volta vs somente ida corrigida',
          'Valida√ß√£o de campos opcionais corrigida',
          'Templates espec√≠ficos para cada tipo de viagem',
          'Sistema de parcelamento condicional',
          'Convers√£o completa de aeroportos'
        ],
        timestamp: new Date().toISOString()
      });
    }

    if (req.method !== 'POST') {
      return res.status(405).json({ 
        success: false,
        error: 'M√©todo n√£o permitido' 
      });
    }

    // VALIDA√á√ÉO
    if (!req.body?.prompt) {
      return res.status(400).json({
        success: false,
        error: 'Prompt obrigat√≥rio'
      });
    }

    const { prompt, temImagem, arquivo, tipos, tipoViagem, parcelamento, camposOpcionais } = req.body;
    console.log(`[API-CORRIGIDA] Prompt: ${prompt.length} chars, Tipos: ${tipos?.join(', ')}, TipoViagem: ${tipoViagem}`);

    // ================================================================================
    // üîß AN√ÅLISE CORRIGIDA E SELE√á√ÉO DE TEMPLATE
    // ================================================================================
    
    const analise = analisarConteudoCorrigido(prompt, tipos, tipoViagem);
    const template = selecionarTemplateCorrigido(analise, tipos);
    console.log(`[API-CORRIGIDA] Template selecionado: ${template.nome}`);

    // ================================================================================
    // üîß CONSTRUIR PROMPT CORRIGIDO
    // ================================================================================
    
    const promptFinal = construirPromptCorrigido(prompt, template, analise, tipos, parcelamento, camposOpcionais);

    // CHAMADA PARA IA
    const { modelo, estrategia, fallback } = selecionarModelo(temImagem);
    const resultado = await chamarIASegura(promptFinal, temImagem, arquivo, modelo, fallback);
    
    const responseProcessada = processarRespostaCorrigida(resultado.content);
    const metricas = calcularMetricas(resultado, startTime, estrategia);

    console.log(`[API-CORRIGIDA] Conclu√≠do: ${Date.now() - startTime}ms`);

    return res.status(200).json({
      success: true,
      choices: [{ 
        message: { 
          content: responseProcessada 
        } 
      }],
      metricas: metricas
    });

  } catch (error) {
    console.error('üí• [API-CORRIGIDA ERROR] üí•', error.message);
    
    return res.status(500).json({
      success: false,
      error: {
        message: `Erro no servidor: ${error.message}`,
        type: 'SERVER_ERROR',
        version: '5.3.1-fixed'
      }
    });
  }
}

// ================================================================================
// üîç AN√ÅLISE CORRIGIDA DE CONTE√öDO
// ================================================================================

function analisarConteudoCorrigido(prompt, tipos, tipoViagemDetectado) {
  console.log('[AN√ÅLISE-CORRIGIDA] Analisando tipos:', tipos, 'TipoDetectado:', tipoViagemDetectado);
  
  if (!prompt || !tipos || tipos.length === 0) {
    return { 
      tipo: 'generico', 
      multiplasOpcoes: false,
      produtosPrincipais: ['A√©reo Somente Ida'],
      temEscalas: false,
      tipoViagem: tipoViagemDetectado || 'somente_ida'
    };
  }

  const promptLower = prompt.toLowerCase();
  
  // Detectar m√∫ltiplas op√ß√µes
  const precos = (promptLower.match(/r\$[\s]*[\d.,]+/gi) || []).length;
  const totais = (promptLower.match(/total.*\d+/gi) || []).length;
  const links = (promptLower.match(/https:\/\/www\.cvc\.com\.br/gi) || []).length;
  const companhias = (promptLower.match(/(gol|latam|azul|avianca|tap)/gi) || []).length;
  
  const multiplasOpcoes = Math.max(precos, totais, links, companhias) >= 2;
  
  // Detectar escalas/conex√µes
  const temEscalas = detectarEscalasCorrigido(prompt);
  
  // ================================================================================
  // üîß USAR TIPO DE VIAGEM DETECTADO PELO FRONTEND
  // ================================================================================
  
  const tipoViagemFinal = tipoViagemDetectado || analisarTipoViagemLocal(prompt);
  
  let tipoPrincipal = 'generico';
  
  if (tipos.includes('A√©reo Facial') || tipos.includes('A√©reo VBI/F√°cil')) {
    tipoPrincipal = 'aereo';
  } else if (tipos.includes('Hotel')) {
    tipoPrincipal = 'hotel';
  } else if (tipos.includes('Carro')) {
    tipoPrincipal = 'carro';
  } else if (tipos.includes('Cruzeiro')) {
    tipoPrincipal = 'cruzeiro';
  } else {
    tipoPrincipal = tipos[0]?.toLowerCase() || 'generico';
  }
  
  console.log(`[AN√ÅLISE-CORRIGIDA] Tipo: ${tipoPrincipal}, M√∫ltiplas: ${multiplasOpcoes}, TipoViagem: ${tipoViagemFinal}`);
  
  return {
    tipo: tipoPrincipal,
    multiplasOpcoes: multiplasOpcoes,
    produtosPrincipais: tipos,
    temEscalas: temEscalas,
    tipoViagem: tipoViagemFinal
  };
}

// ================================================================================
// üîß FUN√á√ïES DE DETEC√á√ÉO (usadas pela an√°lise)
// ================================================================================

function detectarEscalasCorrigido(texto) {
    const textoLower = texto.toLowerCase();
    const indicadoresEscalas = [
        'uma escala', 'duas escalas', 'tr√™s escalas',
        'conex√£o', 'conexao', 'escala em', 'via ',
        'com escala', 'parada em', 'troca em',
        /\d+h\s*\d+min.*escala/i,
        /escala.*\d+h/i,
        /via\s+\w{3,}/i
    ];
    const temEscala = indicadoresEscalas.some(indicador => 
        typeof indicador === 'string' ? textoLower.includes(indicador) : indicador.test(texto)
    );
    const temposVoo = texto.match(/(\d+)h\s*(\d+)?min/gi) || [];
    const temVooLongo = temposVoo.some(tempo => {
        const match = tempo.match(/(\d+)h/);
        return match && parseInt(match[1]) >= 4;
    });
    return temEscala || temVooLongo;
}

function analisarTipoViagemLocal(texto) {
    const textoLower = texto.toLowerCase();
    const indicadoresIdaVolta = [
        'ida e volta', 'ida/volta', 'round trip', 'retorno', 
        /volta.*\d{2}/
    ];
    const temIdaVolta = indicadoresIdaVolta.some(indicador => 
        typeof indicador === 'string' ? textoLower.includes(indicador) : indicador.test(textoLower)
    );
    const indicadoresSomenteIda = ['somente ida', 's√≥ ida', 'one way'];
    const temSomenteIda = indicadoresSomenteIda.some(indicador => textoLower.includes(indicador));

    if (temIdaVolta) return 'ida_volta';
    if (temSomenteIda) return 'somente_ida';

    // Se n√£o houver indicador expl√≠cito, tentar heur√≠stica
    const horarios = (textoLower.match(/\d{2}:\d{2}/g) || []).length;
    const datas = (textoLower.match(/\d{1,2}\/\d{1,2}|\d{1,2} de \w+/gi) || []);
    const datasUnicas = [...new Set(datas)];

    if (horarios >= 4 || datasUnicas.length >= 2) {
        return 'ida_volta';
    }
    return 'somente_ida';
}


// ================================================================================
// üîß SELE√á√ÉO DE TEMPLATE CORRIGIDO
// ================================================================================

function selecionarTemplateCorrigido(analise, tipos) {
  console.log('[TEMPLATE-CORRIGIDO] Selecionando para:', tipos, 'TipoViagem:', analise.tipoViagem);
  
  if (!tipos || tipos.length === 0) {
    return {
      nome: 'A√©reo Somente Ida',
      conteudo: TEMPLATES['A√©reo Somente Ida']
    };
  }

  const tipoPrincipal = tipos[0];
  
  // ================================================================================
  // üîß L√ìGICA CORRIGIDA PARA TEMPLATES A√âREOS
  // ================================================================================
  
  if (tipoPrincipal === 'A√©reo Facial' || tipoPrincipal === 'A√©reo VBI/F√°cil') {
    
    // M√∫ltiplas op√ß√µes
    if (analise.multiplasOpcoes) {
      if (analise.tipoViagem === 'ida_volta') {
        return {
          nome: 'M√∫ltiplas Ida e Volta',
          conteudo: TEMPLATES['M√∫ltiplas Ida e Volta']
        };
      } else {
        return {
          nome: 'M√∫ltiplas Somente Ida',
          conteudo: TEMPLATES['M√∫ltiplas Somente Ida']
        };
      }
    }
    
    // Op√ß√£o √∫nica
    if (analise.tipoViagem === 'ida_volta') {
      return {
        nome: 'A√©reo Ida e Volta',
        conteudo: TEMPLATES['A√©reo Ida e Volta']
      };
    } else {
      return {
        nome: 'A√©reo Somente Ida',
        conteudo: TEMPLATES['A√©reo Somente Ida']
      };
    }
  }
  
  // Outros tipos de servi√ßo
  if (TEMPLATES[tipoPrincipal]) {
    return {
      nome: tipoPrincipal,
      conteudo: TEMPLATES[tipoPrincipal]
    };
  }
  
  // Fallback
  console.warn(`[TEMPLATE-CORRIGIDO] Template n√£o encontrado para: ${tipoPrincipal}`);
  return {
    nome: 'A√©reo Somente Ida',
    conteudo: TEMPLATES['A√©reo Somente Ida']
  };
}

// ================================================================================
// üèóÔ∏è PROMPT CORRIGIDO COM DETEC√á√ÉO AUTOM√ÅTICA
// ================================================================================

function construirPromptCorrigido(promptBase, template, analise, tipos, parcelamento, camposOpcionais) {
  console.log('[PROMPT-CORRIGIDO] Construindo prompt corrigido...');
  
  const tipoPrincipal = tipos?.[0] || 'A√©reo Facial';
  
  let prompt = `Voc√™ √© um assistente especializado da CVC. Formate o or√ßamento de ${tipoPrincipal} usando EXATAMENTE o template abaixo.

IMPORTANTE: Sua resposta deve conter APENAS o or√ßamento formatado, sem cabe√ßalhos t√©cnicos, sem explica√ß√µes.

TEMPLATE PARA USAR:
${template.conteudo}

DADOS DO CLIENTE:
${promptBase}

`;

  // ================================================================================
  // üîç INSTRU√á√ïES DE DETEC√á√ÉO AUTOM√ÅTICA PARA CAMPOS OPCIONAIS
  // ================================================================================
  
  if (camposOpcionais) {
    prompt += `INSTRU√á√ïES DE DETEC√á√ÉO AUTOM√ÅTICA:\n`;
    
    if (camposOpcionais.destino) {
      prompt += `- DESTINO: Detecte automaticamente dos dados fornecidos (procure por nomes de cidades, pa√≠ses, destinos tur√≠sticos)\n`;
    }
    
    if (camposOpcionais.adultos) {
      prompt += `- ADULTOS: Detecte automaticamente dos dados (procure por "Total X Adultos", "2 adultos", "passageiro 1", etc.) - padr√£o: 2 se n√£o encontrar\n`;
    }
  }

  // ================================================================================
  // üí≥ INSTRU√á√ïES DE PARCELAMENTO CORRIGIDAS
  // ================================================================================
  
  if (parcelamento && parcelamento.incluirParcelamento) {
    prompt += `\nINSTRU√á√ïES DE PARCELAMENTO:\n`;
    
    const tiposSemParcelamento = ['A√©reo Facial'];
    const tiposComParcelamento = tipos.filter(tipo => !tiposSemParcelamento.includes(tipo));
    
    if (tiposComParcelamento.length > 0) {
      if (parcelamento.parcelas10x && parcelamento.parcelas12x) {
        prompt += `- Para tipos ${tiposComParcelamento.join(', ')}: incluir "üí≥ 10x de R$ XX,XX ou 12x de R$ XX,XX"\n`;
      } else if (parcelamento.parcelas10x) {
        prompt += `- Para tipos ${tiposComParcelamento.join(', ')}: incluir "üí≥ Parcelamento: 10x de R$ XX,XX"\n`;
      } else if (parcelamento.parcelas12x) {
        prompt += `- Para tipos ${tiposComParcelamento.join(', ')}: incluir "üí≥ Parcelamento: 12x de R$ XX,XX"\n`;
      }
    }
    
    if (tipos.includes('A√©reo Facial')) {
      prompt += `- Para A√©reo Facial: incluir parcelamento APENAS se explicitamente mencionado nos dados\n`;
    }
  }
  
    // ================================================================================
    // ‚úàÔ∏è INSTRU√á√ïES GERAIS E DE A√âREO
    // ================================================================================
  
    prompt += `\nINSTRU√á√ïES GERAIS PARA FORMATA√á√ÉO:\n`;
    prompt += `- Use EXATAMENTE o formato do template fornecido.\n`;
    prompt += `- Preencha apenas com dados reais encontrados no texto.\n`;
    prompt += `- N√£o invente informa√ß√µes que n√£o existem.\n`;
    prompt += `- Mantenha links e valores monet√°rios exatos.\n`;
    
    if (analise.tipo === 'aereo') {
        prompt += `- AEROPORTOS: Converta c√≥digos IATA para nomes completos (Ex: CGH para Congonhas (SP)).\n`;
        prompt += `- ESCALAS/CONEX√ïES: Se detectar escalas, adicione detalhes como "(1 escala)" ou "(voo direto)" ap√≥s o hor√°rio.\n`;
    }

    prompt += `\nRESPONDA APENAS COM O TEMPLATE PREENCHIDO, SEM EXPLICA√á√ïES ADICIONAIS.`;

  return prompt;
}

// ================================================================================
// ü§ñ SISTEMA DE IA (COMPLETO)
// ================================================================================

function selecionarModelo(temImagem) {
  if (temImagem === true) {
    return {
      modelo: 'claude-3-5-sonnet-20240620',
      estrategia: 'Claude para an√°lise visual',
      fallback: 'gpt-4o'
    };
  } else {
    return {
      modelo: 'gpt-4o-mini',
      estrategia: 'GPT-4o-mini para texto',
      fallback: 'gpt-4o'
    };
  }
}

async function chamarIASegura(prompt, temImagem, arquivo, modelo, fallbackModelo) {
  try {
    if (temImagem === true) {
      return await chamarClaude(prompt, arquivo, modelo);
    } else {
      return await chamarOpenAI(prompt, false, null, modelo);
    }
  } catch (erro1) {
    console.error(`‚ùå Falha principal no modelo ${modelo}: ${erro1.message}`);
    try {
      console.warn(`‚ö†Ô∏è Tentando fallback com ${fallbackModelo}...`);
      return await chamarOpenAI(prompt, temImagem, arquivo, fallbackModelo);
    } catch (erro2) {
      throw new Error(`Ambos os modelos falharam: ${erro1.message} | ${erro2.message}`);
    }
  }
}

async function chamarClaude(prompt, arquivo, modelo) {
  if (!process.env.ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY n√£o encontrada nas vari√°veis de ambiente');
  }

  const base64Match = arquivo.match(/data:(image\/[^;]+);base64,(.+)/);
  if (!base64Match) {
    throw new Error('Formato de imagem base64 inv√°lido');
  }

  const content = [
    { type: "text", text: prompt },
    { type: "image", source: { type: "base64", media_type: base64Match[1], data: base64Match[2] } }
  ];

  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'Content-Type': 'application/json',
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: modelo,
      max_tokens: MAX_TOKENS,
      messages: [{ role: 'user', content }]
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erro na API Claude ${response.status}: ${errorText.substring(0, 200)}`);
  }

  const data = await response.json();
  if (!data.content?.[0]?.text) {
    throw new Error('Resposta da API Claude em formato inv√°lido');
  }

  return {
    content: data.content[0].text,
    usage: data.usage || { input_tokens: 0, output_tokens: 0 },
    modelo_usado: modelo
  };
}

async function chamarOpenAI(prompt, temImagem, arquivo, modelo) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente');
  }

  let messages;
  if (temImagem === true && arquivo) {
    messages = [
      {
        role: "user",
        content: [
          { type: "text", text: prompt },
          { type: "image_url", image_url: { url: arquivo } }
        ]
      }
    ];
  } else {
    messages = [{ role: "user", content: prompt }];
  }

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: modelo,
      messages: messages,
      max_tokens: MAX_TOKENS,
      temperature: 0.1
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erro na API OpenAI ${response.status}: ${errorText.substring(0, 200)}`);
  }

  const data = await response.json();
  if (!data.choices?.[0]?.message?.content) {
    throw new Error('Resposta da API OpenAI em formato inv√°lido');
  }

  return {
    content: data.choices[0].message.content,
    usage: data.usage || { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
    modelo_usado: modelo
  };
}

// ================================================================================
// üîß PROCESSAMENTO FINAL DA RESPOSTA
// ================================================================================

function processarRespostaCorrigida(response) {
  if (!response || typeof response !== 'string') {
    return 'Erro: Resposta inv√°lida da IA';
  }

  let processada = response.trim();

  // Remover cabe√ßalhos t√©cnicos que possam ter vazado
  const cabecalhosRemover = [
    /PRODUTO SELECIONADO:.*?\n/gi,
    /M√öLTIPLAS OP√á√ïES:.*?\n/gi,
    /TEMPLATE OBRIGAT√ìRIO:.*?\n/gi,
    /INSTRU√á√ïES.*?\n/gi,
    /DADOS DO CLIENTE:.*?\n/gi
  ];

  cabecalhosRemover.forEach(regex => {
    processada = processada.replace(regex, '');
  });

  // Convers√£o de aeroportos
  Object.entries(aeroportos).forEach(([codigo, nomeCompleto]) => {
    const regexIsolado = new RegExp(`\\b${codigo}\\b`, 'gi');
    processada = processada.replace(regexIsolado, nomeCompleto);
  });

  // Limpar quebras de linha excessivas
  processada = processada.replace(/\n\s*\n/g, '\n\n').trim();
  processada = processada.replace(/^\s*\n+/, '');

  return processada;
}

function calcularMetricas(resultado, startTime, estrategia) {
  const tokensInput = resultado.usage?.prompt_tokens || resultado.usage?.input_tokens || 0;
  const tokensOutput = resultado.usage?.completion_tokens || resultado.usage?.output_tokens || 0;
  const modeloUsado = resultado.modelo_usado || 'desconhecido';
  
  const precosModelo = PRECOS_MODELOS[modeloUsado] || { input: 0, output: 0 };
  
  const custoUSD = (tokensInput / 1000) * precosModelo.input + (tokensOutput / 1000) * precosModelo.output;
  const custoBRL = custoUSD * USD_TO_BRL;

  const custoGPT4o = (tokensInput / 1000) * PRECOS_MODELOS['gpt-4o'].input + 
                     (tokensOutput / 1000) * PRECOS_MODELOS['gpt-4o'].output;
  const economiaUSD = custoGPT4o - custoUSD;
  const economiaBRL = economiaUSD * USD_TO_BRL;
  
  return {
    modelo_usado: modeloUsado,
    estrategia: estrategia,
    tokens: {
      input: tokensInput,
      output: tokensOutput,
      total: tokensInput + tokensOutput
    },
    custo: {
      usd: parseFloat(custoUSD.toFixed(6)),
      brl: parseFloat(custoBRL.toFixed(6))
    },
    economia: {
      vs_gpt4o_usd: parseFloat(economiaUSD.toFixed(6)),
      vs_gpt4o_brl: parseFloat(economiaBRL.toFixed(6)),
      percentual: custoGPT4o > 0 ? ((economiaUSD / custoGPT4o) * 100).toFixed(1) + '%' : '0%'
    },
    performance: {
      tempo_processamento_ms: Date.now() - startTime
    }
  };
}

console.log('‚úÖ [API-CORRIGIDA] CVC Itaqua API v5.3.1-fixed carregada');
console.log('üîß [FOCO] Detec√ß√£o correta de ida/volta e or√ßamentos limpos');
console.log('‚úàÔ∏è [MELHORIA] Convers√£o de aeroportos e detec√ß√£o de escalas');
console.log('üöÄ [STATUS] Pronto para gerar or√ßamentos profissionais e corretos!');
