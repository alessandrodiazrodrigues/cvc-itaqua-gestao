// üöÄ api/ai.js - v9.0 - INTEGRA√á√ÉO COM IA-CLIENT REAL
// ESTRAT√âGIA: Substituir simula√ß√£o por IA REAL via ia-client.js
// MANTER: An√°lise b√°sica atual (ser√° evolu√≠da depois)

console.log("üöÄ CVC ITAQUA API v9.0 - IA REAL INTEGRADA");

export default async function handler(req, res) {
    const inicio = Date.now();
    console.log(`üìä M√©todo: ${req.method} | Timestamp: ${new Date().toISOString()}`);

    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v9.0-IA-Real');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            success: false, 
            error: 'M√©todo n√£o permitido',
            versao: '9.0-ia-real'
        });
    }

    try {
        // ================================================================================
        // üì¶ CARREGAMENTO APENAS DO IA-CLIENT (outros m√≥dulos depois)
        // ================================================================================
        
        console.log("üì¶ Carregando m√≥dulo ia-client...");
        
        const iaClient = await import('./modules/ia-client.js');
        
        console.log("‚úÖ M√≥dulo ia-client carregado com sucesso");
        console.log("ü§ñ Testando disponibilidade de IA real...");

        // Verificar se IA real est√° dispon√≠vel
        const iaRealDisponivel = !!(
            iaClient?.chamarIASegura || 
            iaClient?.default?.chamarIASegura ||
            iaClient?.chamarIA ||
            iaClient?.default?.chamarIA
        );

        console.log(`üéØ IA Real dispon√≠vel: ${iaRealDisponivel ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
        console.log(`üîë OpenAI API Key: ${process.env.OPENAI_API_KEY ? 'CONFIGURADA ‚úÖ' : 'AUSENTE ‚ùå'}`);

        // ================================================================================
        // üîß NORMALIZA√á√ÉO B√ÅSICA DE DADOS (sem utils ainda)
        // ================================================================================
        
        const formData = req.body.formData || req.body;
        const tipo = req.body.tipo || 'orcamento';
        
        // Garantir dados b√°sicos
        if (!formData.tipos || !Array.isArray(formData.tipos) || formData.tipos.length === 0) {
            formData.tipos = ['A√©reo Nacional'];
        }
        formData.observacoes = formData.observacoes || '';
        formData.destino = formData.destino || '';

        console.log(`üéØ Processando tipo: ${tipo}`);
        console.log(`üìä Dados: tipos=${formData.tipos?.length}, destino="${formData.destino}", obs=${!!formData.observacoes}`);

        // ================================================================================
        // üéØ ORQUESTRA√á√ÉO COM IA REAL
        // ================================================================================
        
        let resultado;

        switch (tipo) {
            case 'orcamento':
                resultado = await orquestrarOrcamentoComIAReal(formData, iaClient, iaRealDisponivel);
                break;
            case 'ranking':
                resultado = await orquestrarRankingSimples(formData);
                break;
            case 'dicas':
                resultado = await orquestrarDicasSimples(formData);
                break;
            default:
                throw new Error(`Tipo de opera√ß√£o n√£o suportado: ${tipo}`);
        }

        // ================================================================================
        // üìä RESPOSTA FINAL
        // ================================================================================
        
        const tempoTotal = Date.now() - inicio;
        console.log(`‚úÖ Processamento conclu√≠do em ${tempoTotal}ms`);

        return res.status(200).json({
            success: true,
            result: resultado.conteudo,
            versao: '9.0-ia-real-integrada',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                iaRealUsada: resultado.debug?.iaRealUsada || false,
                modeloUsado: resultado.debug?.modeloUsado || 'nao-informado',
                tipoAnalise: resultado.debug?.tipoAnalise || 'basica',
                ...resultado.debug
            }
        });

    } catch (error) {
        const tempoTotal = Date.now() - inicio;
        console.error("‚ùå Erro fatal:", error);
        
        return res.status(500).json({
            success: false,
            error: error.message,
            versao: '9.0-ia-real-erro',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                errorStack: error.stack?.split('\n').slice(0, 4),
                tipoErro: error.name || 'erro_ia_real'
            }
        });
    }
}

// ================================================================================
// üéØ ORQUESTRA√á√ÉO DE OR√áAMENTO COM IA REAL
// ================================================================================

async function orquestrarOrcamentoComIAReal(formData, iaClient, iaRealDisponivel) {
    console.log("üéØ Orquestrando or√ßamento com IA REAL...");
    console.log(`ü§ñ Tentar√° usar: ${iaRealDisponivel ? 'IA REAL' : 'ERRO - IA N√ÉO DISPON√çVEL'}`);

    try {
        // ETAPA 1: AN√ÅLISE B√ÅSICA (tempor√°ria - ser√° substitu√≠da por analysis.js)
        console.log("üìä ETAPA 1: An√°lise b√°sica tempor√°ria...");
        const analise = analisarTextoBasicoTemporario(formData);
        console.log(`‚úÖ An√°lise: tipo=${analise.tipoDetectado}, complexidade=${analise.complexidade}`);

        // ETAPA 2: PROMPT B√ÅSICO (tempor√°rio - ser√° substitu√≠do por prompts.js)
        console.log("üìã ETAPA 2: Gera√ß√£o de prompt b√°sico...");
        const prompt = gerarPromptBasicoTemporario(formData, analise);
        console.log(`‚úÖ Prompt gerado: ${prompt.length} caracteres`);

        // ETAPA 3: IA REAL - AQUI √â A MUDAN√áA PRINCIPAL!
        console.log("ü§ñ ETAPA 3: Chamando IA REAL via ia-client...");
        
        let respostaIA;
        let iaRealUsada = false;
        let modeloUsado = 'nenhum';

        if (iaRealDisponivel && process.env.OPENAI_API_KEY) {
            try {
                // TENTAR IA REAL ATRAV√âS DO M√ìDULO
                console.log("üöÄ Chamando IA real atrav√©s do m√≥dulo ia-client...");
                
                const modeloInfo = selecionarModeloBasico(formData, analise);
                console.log(`üéØ Modelo selecionado: ${modeloInfo.modelo}`);

                // Tentar diferentes fun√ß√µes do m√≥dulo ia-client
                if (iaClient.chamarIASegura) {
                    respostaIA = await iaClient.chamarIASegura(
                        prompt, 
                        !!formData.imagemBase64, 
                        formData.imagemBase64, 
                        modeloInfo.modelo, 
                        modeloInfo.fallback
                    );
                } else if (iaClient.default?.chamarIASegura) {
                    respostaIA = await iaClient.default.chamarIASegura(
                        prompt, 
                        !!formData.imagemBase64, 
                        formData.imagemBase64, 
                        modeloInfo.modelo, 
                        modeloInfo.fallback
                    );
                } else if (iaClient.chamarIA) {
                    respostaIA = await iaClient.chamarIA(prompt, formData);
                } else if (iaClient.default?.chamarIA) {
                    respostaIA = await iaClient.default.chamarIA(prompt, formData);
                } else {
                    throw new Error("Nenhuma fun√ß√£o de IA encontrada no m√≥dulo ia-client");
                }
                
                iaRealUsada = true;
                modeloUsado = respostaIA?.modelo_usado || modeloInfo.modelo;
                
                console.log("‚úÖ IA REAL funcionou!");
                console.log(`üéØ Modelo usado: ${modeloUsado}`);
                console.log(`üìä Resposta: ${respostaIA?.content?.length || 0} caracteres`);
                
            } catch (iaError) {
                console.error("‚ùå IA REAL falhou:", iaError.message);
                throw new Error(`IA Real falhou: ${iaError.message}`);
            }
        } else {
            // SE IA N√ÉO DISPON√çVEL, FALHAR EXPLICITAMENTE
            const motivoIndisponivel = !iaRealDisponivel ? 
                "M√≥dulo ia-client n√£o possui fun√ß√µes necess√°rias" : 
                "OPENAI_API_KEY n√£o configurada";
                
            throw new Error(`IA Real indispon√≠vel: ${motivoIndisponivel}`);
        }

        // ETAPA 4: PROCESSAMENTO B√ÅSICO (tempor√°rio - ser√° substitu√≠do por processing.js)
        console.log("üé® ETAPA 4: Processamento b√°sico tempor√°rio...");
        const conteudoFinal = processarRespostaBasicoTemporario(respostaIA.content, analise, formData);

        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: 'An√°lise-B√°sica ‚Üí Prompt-B√°sico ‚Üí IA-REAL ‚Üí Processamento-B√°sico',
                iaRealUsada: iaRealUsada,
                modeloUsado: modeloUsado,
                tipoAnalise: analise.tipoDetectado,
                complexidade: analise.complexidade,
                promptLength: prompt.length,
                responseLength: respostaIA?.content?.length || 0,
                tokens: respostaIA?.usage?.total_tokens || 0
            }
        };

    } catch (error) {
        console.error("‚ùå Erro na orquestra√ß√£o com IA real:", error);
        throw new Error(`Falha na orquestra√ß√£o: ${error.message}`);
    }
}

// ================================================================================
// üîß FUN√á√ïES B√ÅSICAS TEMPOR√ÅRIAS (ser√£o substitu√≠das pelos m√≥dulos)
// ================================================================================

function analisarTextoBasicoTemporario(formData) {
    const texto = (formData.observacoes || '').toLowerCase();
    
    let tipoDetectado = 'generico';
    let complexidade = 'media';
    
    if (texto.includes('multitrecho') || texto.includes('m√∫ltiplos') || texto.includes('trecho')) {
        tipoDetectado = 'multitrecho';
        complexidade = 'alta';
    } else if (texto.includes('iberia')) {
        tipoDetectado = 'multitrecho'; // Iberia geralmente √© multitrecho
        complexidade = 'alta';
    } else if (texto.includes('cruzeiro')) {
        tipoDetectado = 'cruzeiro';
        complexidade = 'media';
    } else if (texto.includes('hotel')) {
        tipoDetectado = 'hotel';
        complexidade = 'baixa';
    } else if (formData.tipos?.includes('A√©reo Internacional')) {
        tipoDetectado = 'aereo_internacional';
        complexidade = 'media';
    } else if (formData.tipos?.includes('A√©reo Nacional')) {
        tipoDetectado = 'aereo_nacional_simples';
        complexidade = 'baixa';
    }
    
    return {
        tipoDetectado,
        complexidade,
        confiancaDeteccao: 0.7
    };
}

function gerarPromptBasicoTemporario(formData, analise) {
    return `Voc√™ √© um consultor especializado da CVC Itaqua. Analise CUIDADOSAMENTE as informa√ß√µes fornecidas e gere um or√ßamento profissional baseado nos DADOS REAIS.

INFORMA√á√ïES DO CLIENTE:
- Tipos solicitados: ${formData.tipos?.join(', ') || 'N√£o informado'}
- Destino: ${formData.destino || 'N√£o informado'}
- Adultos: ${formData.adultos || 1}
- Crian√ßas: ${formData.criancas || 0}

DADOS DETALHADOS:
${formData.observacoes || 'Nenhuma informa√ß√£o adicional fornecida'}

AN√ÅLISE AUTOM√ÅTICA:
- Tipo detectado: ${analise.tipoDetectado}
- Complexidade: ${analise.complexidade}

INSTRU√á√ïES CR√çTICAS:
1. USE OS DADOS REAIS fornecidos nas informa√ß√µes detalhadas
2. Se h√° companhias a√©reas mencionadas (Iberia, TAP, LATAM), USE-AS
3. Se h√° pre√ßos mencionados (R$ valores), USE-OS como base
4. Se h√° aeroportos mencionados (GRU, FCO, ORY), USE-OS
5. Se h√° datas mencionadas, USE-AS
6. Para multitrechos, organize por segmentos (TRECHO 1, TRECHO 2, etc.)

FORMATO OBRIGAT√ìRIO:
- Use formata√ß√£o profissional com emojis apropriados
- Inclua valores em R$ (reais brasileiros)
- Especifique condi√ß√µes de pagamento
- Detalhe informa√ß√µes sobre bagagem
- Mantenha tom profissional mas atrativo

IMPORTANTE: Analise TODO o conte√∫do fornecido e extraia informa√ß√µes espec√≠ficas. N√ÉO invente dados gen√©ricos se h√° informa√ß√µes espec√≠ficas dispon√≠veis.

Gere o or√ßamento completo baseado nas informa√ß√µes reais fornecidas:`;
}

function selecionarModeloBasico(formData, analise) {
    if (formData.imagemBase64) {
        return { modelo: 'gpt-4o', fallback: ['gpt-4o-mini'] };
    }
    
    if (analise.complexidade === 'alta') {
        return { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
    }
    
    return { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
}

function processarRespostaBasicoTemporario(conteudo, analise, formData) {
    if (!conteudo) return "Erro: Resposta da IA vazia";
    
    // Processamento b√°sico - apenas limpeza simples
    let processado = conteudo.trim();
    
    // Adicionar observa√ß√µes se n√£o estiverem na resposta
    if (formData.observacoes && !processado.includes(formData.observacoes.substring(0, 50))) {
        processado += `\n\nüìã *Dados utilizados:*\n${formData.observacoes.substring(0, 200)}${formData.observacoes.length > 200 ? '...' : ''}`;
    }
    
    return processado;
}

// ================================================================================
// üè® FUN√á√ïES SIMPLES PARA RANKING E DICAS (tempor√°rias)
// ================================================================================

async function orquestrarRankingSimples(formData) {
    const destino = formData.destino || 'destino informado';
    
    const conteudo = `üè® *RANKING DE HOT√âIS - ${destino.toUpperCase()}*

ü•á *1¬∫ LUGAR - Hotel Premium*
‚≠ê 5 estrelas | Centro da cidade
üí∞ R$ 450,00/noite | Caf√© da manh√£ incluso
‚úÖ Piscina, Spa, Academia

ü•à *2¬∫ LUGAR - Resort Familiar*  
‚≠ê 4 estrelas | Beira-mar
üí∞ R$ 320,00/noite | All inclusive dispon√≠vel
‚úÖ Kids Club, 3 Piscinas

ü•â *3¬∫ LUGAR - Hotel Executivo*
‚≠ê 4 estrelas | Centro de neg√≥cios  
üí∞ R$ 280,00/noite | Business center
‚úÖ Sala de reuni√µes, Wi-Fi premium

üí° *Sistema CVC Itaqua v9.0 - IA Real Integrada*`;

    return {
        conteudo,
        debug: {
            tipo: 'ranking_simples',
            iaRealUsada: false
        }
    };
}

async function orquestrarDicasSimples(formData) {
    const destino = formData.destino || 'destino informado';
    
    const conteudo = `üí° *DICAS DE VIAGEM - ${destino.toUpperCase()}*

üìÖ *MELHOR √âPOCA*
‚Ä¢ Alta temporada: Dezembro a Mar√ßo
‚Ä¢ Menor movimento: Abril a Junho  
‚Ä¢ Pre√ßos melhores: Maio e Setembro

üéí *O QUE LEVAR*
‚Ä¢ Roupas leves e protetor solar
‚Ä¢ Cal√ßados confort√°veis
‚Ä¢ Medicamentos pessoais
‚Ä¢ Carregador port√°til

üó∫Ô∏è *PONTOS TUR√çSTICOS*
‚Ä¢ Centro hist√≥rico
‚Ä¢ Museus locais
‚Ä¢ Praias principais
‚Ä¢ Mercados tradicionais

üí∞ *OR√áAMENTO DI√ÅRIO*
‚Ä¢ Econ√¥mico: R$ 150-250/dia
‚Ä¢ M√©dio: R$ 300-500/dia
‚Ä¢ Premium: R$ 600+/dia

üöÄ *Sistema CVC Itaqua v9.0 - IA Real Integrada*`;

    return {
        conteudo,
        debug: {
            tipo: 'dicas_simples',
            iaRealUsada: false
        }
    };
}

console.log("‚úÖ API v9.0 carregada - IA REAL INTEGRADA!");
console.log("üéØ Pr√≥ximo passo: Testar com dados reais Iberia");
console.log("üìä Status: Simula√ß√£o removida, IA real obrigat√≥ria");
