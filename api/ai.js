// ================================================================================
// üèÜ CVC ITAQUA - API FINAL CORRIGIDA v6.0
// ================================================================================
// CORRE√á√ïES: Templates WhatsApp + Imagens + M√∫ltiplas op√ß√µes + Conex√µes + Parcelamento
// ================================================================================

// ================================================================================
// üó∫Ô∏è MAPEAMENTO COMPLETO DE AEROPORTOS
// ================================================================================

const aeroportos = {
  // Principais aeroportos brasileiros
  'CGH': 'Congonhas', 'GRU': 'Guarulhos', 'VCP': 'Viracopos',
  'SDU': 'Santos Dumont', 'GIG': 'Gale√£o', 
  'BSB': 'Bras√≠lia', 'CNF': 'Confins', 'PLU': 'Pampulha',
  'CWB': 'Curitiba', 'IGU': 'Foz do Igua√ßu', 
  'REC': 'Recife', 'FOR': 'Fortaleza', 'SSA': 'Salvador',
  'MAO': 'Manaus', 'BEL': 'Bel√©m', 'CGB': 'Cuiab√°',
  'CGR': 'Campo Grande', 'AJU': 'Aracaju', 'MCZ': 'Macei√≥',
  'JPA': 'Jo√£o Pessoa', 'NAT': 'Natal', 'THE': 'Teresina',
  'SLZ': 'S√£o Lu√≠s', 'VIX': 'Vit√≥ria', 'FLN': 'Florian√≥polis',
  'POA': 'Porto Alegre', 'BPS': 'Porto Seguro', 'IOS': 'Ilh√©us',
  'RAO': 'Ribeir√£o Preto', 'NVT': 'Navegantes', 'UDI': 'Uberl√¢ndia',
  'MOC': 'Montes Claros', 'JDF': 'Juiz de Fora', 'GYN': 'Goi√¢nia',
  'PNZ': 'Petrolina', 'JTC': 'Bauru', 'AQA': 'Araraquara',
  'PPB': 'Presidente Prudente', 'CXJ': 'Caxias do Sul',
  
  // Aeroportos internacionais importantes
  'EZE': 'Buenos Aires Ezeiza', 'AEP': 'Buenos Aires Aeroparque',
  'LHR': 'Londres Heathrow', 'LGW': 'Londres Gatwick', 'STN': 'Londres Stansted',
  'JFK': 'Nova York JFK', 'LGA': 'Nova York LaGuardia', 'EWR': 'Nova York Newark',
  'MXP': 'Mil√£o Malpensa', 'LIN': 'Mil√£o Linate',
  'CDG': 'Paris Charles de Gaulle', 'ORY': 'Paris Orly',
  'MVD': 'Montevid√©u', 'ASU': 'Assun√ß√£o', 'SCL': 'Santiago', 'LIM': 'Lima',
  'BOG': 'Bogot√°', 'UIO': 'Quito', 'CCS': 'Caracas',
  'MIA': 'Miami', 'MCO': 'Orlando', 'LAX': 'Los Angeles',
  'MAD': 'Madrid', 'FCO': 'Roma', 'LIS': 'Lisboa',
  'AMS': 'Amsterd√£', 'FRA': 'Frankfurt', 'ZUR': 'Zurich',
  'DXB': 'Dubai', 'DOH': 'Doha', 'IST': 'Istambul'
};

// ================================================================================
// üìã TEMPLATES FORMATADOS PARA WHATSAPP
// ================================================================================

const TEMPLATES = {
  // ‚úÖ TEMPLATE A√âREO IDA E VOLTA
  'A√©reo Ida e Volta': `*[COMPANHIA]*
[DATA_IDA] - [ORIGEM_IDA] [HORA_IDA] / [DESTINO_IDA] [HORA_CHEGADA_IDA][CONEXAO_IDA]
--
[DATA_VOLTA] - [ORIGEM_VOLTA] [HORA_VOLTA] / [DESTINO_VOLTA] [HORA_CHEGADA_VOLTA][CONEXAO_VOLTA]

üí∞ Valor total para [PASSAGEIROS] = [VALOR][PARCELAMENTO]
Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
[BAGAGEM_INFO]
[REEMBOLSAVEL]
[LINK]`,

  // ‚úÖ TEMPLATE A√âREO SOMENTE IDA
  'A√©reo Somente Ida': `*[COMPANHIA]*
[DATA] - [ORIGEM] [HORA_IDA] / [DESTINO] [HORA_CHEGADA][CONEXAO]

üí∞ Valor total para [PASSAGEIROS] = [VALOR][PARCELAMENTO]
Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
[BAGAGEM_INFO]
[REEMBOLSAVEL]
[LINK]

‚ö†Ô∏è Passagem somente de ida - sem retorno inclu√≠do`,

  // ‚úÖ TEMPLATE M√öLTIPLAS OP√á√ïES IDA E VOLTA
  'M√∫ltiplas Ida e Volta': `*Op√ß√£o 1* - [COMPANHIA_1]
[DATA_IDA_1] - [ORIGEM_IDA_1] [HORA_IDA_1] / [DESTINO_IDA_1] [HORA_CHEGADA_IDA_1][CONEXAO_IDA_1]
--
[DATA_VOLTA_1] - [ORIGEM_VOLTA_1] [HORA_VOLTA_1] / [DESTINO_VOLTA_1] [HORA_CHEGADA_VOLTA_1][CONEXAO_VOLTA_1]
üí∞ Valor total para [PASSAGEIROS_1] = [VALOR_1]

*Op√ß√£o 2* - [COMPANHIA_2]
[DATA_IDA_2] - [ORIGEM_IDA_2] [HORA_IDA_2] / [DESTINO_IDA_2] [HORA_CHEGADA_IDA_2][CONEXAO_IDA_2]
--
[DATA_VOLTA_2] - [ORIGEM_VOLTA_2] [HORA_VOLTA_2] / [DESTINO_VOLTA_2] [HORA_CHEGADA_VOLTA_2][CONEXAO_VOLTA_2]
üí∞ Valor total para [PASSAGEIROS_2] = [VALOR_2]

Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
[BAGAGEM_INFO]`,

  // ‚úÖ TEMPLATE M√öLTIPLAS OP√á√ïES SOMENTE IDA
  'M√∫ltiplas Somente Ida': `*Op√ß√£o 1* - [COMPANHIA_1]
[DATA_1] - [ORIGEM_1] [HORA_IDA_1] / [DESTINO_1] [HORA_CHEGADA_1][CONEXAO_1]
üí∞ [VALOR_1] para [PASSAGEIROS_1]

*Op√ß√£o 2* - [COMPANHIA_2]
[DATA_2] - [ORIGEM_2] [HORA_IDA_2] / [DESTINO_2] [HORA_CHEGADA_2][CONEXAO_2]
üí∞ [VALOR_2] para [PASSAGEIROS_2]

Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
[BAGAGEM_INFO]

‚ö†Ô∏è Todas as op√ß√µes s√£o SOMENTE IDA - sem retorno inclu√≠do`,

  // ‚úÖ TEMPLATE MULTITRECHO
  'Multitrecho': `*Multitrecho* - [COMPANHIA]
[PERIODO_TOTAL]

[TRECHOS_DETALHADOS]

üí∞ [VALOR] para [PASSAGEIROS]
[PARCELAMENTO]
Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
[BAGAGEM_INFO]
[REEMBOLSAVEL]

[LINK]`,

  // ‚úÖ TEMPLATE HOTEL
  'Hotel': `üè® *[NOME_HOTEL]* [CATEGORIA]
üìç [ENDERECO] - [CIDADE], [ESTADO]
üóìÔ∏è [CHECK_IN] a [CHECK_OUT] ([NOITES] noites)
üë• [PASSAGEIROS]

üõèÔ∏è *Acomoda√ß√£o:*
[TIPO_QUARTO][REGIME_ALIMENTACAO]

üí∞ [VALOR] para toda a estadia[PARCELAMENTO]

‚úÖ *Inclui:*
‚Ä¢ [CAFE_MANHA]
‚Ä¢ Wi-Fi gratuito

‚ö†Ô∏è Tarifas sujeitas √† disponibilidade no momento da reserva`,

  // ‚úÖ TEMPLATE HOTEL M√öLTIPLAS OP√á√ïES
  'Hotel M√∫ltiplas Op√ß√µes': `*Op√ß√£o 1* - [HOTEL_1] [CATEGORIA_1]
üìç [ENDERECO_1] - [CIDADE_1], [ESTADO_1]
[CHECK_IN_1] a [CHECK_OUT_1] ([NOITES_1] noites) - [PASSAGEIROS_1]
üõèÔ∏è [TIPO_QUARTO_1][REGIME_1]
üí∞ [VALOR_1][PARCELAMENTO_1] - [REEMBOLSAVEL_1]

*Op√ß√£o 2* - [HOTEL_2] [CATEGORIA_2]
üìç [ENDERECO_2] - [CIDADE_2], [ESTADO_2]
[CHECK_IN_2] a [CHECK_OUT_2] ([NOITES_2] noites) - [PASSAGEIROS_2]
üõèÔ∏è [TIPO_QUARTO_2][REGIME_2]
üí∞ [VALOR_2][PARCELAMENTO_2] - [REEMBOLSAVEL_2]

Valores sujeitos a confirma√ß√£o e disponibilidade`,

  // ‚úÖ TEMPLATE CRUZEIRO
  'Cruzeiro': `üö¢ *Cruzeiro [NOME_NAVIO]* ‚Äì [DURACAO] noites
[PASSAGEIROS]
üìÖ Embarque: [DATA_EMBARQUE] ([DIA_SEMANA])
üìç Sa√≠da e chegada: [PORTO]
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí• Tarifas dispon√≠veis!
(Sujeita √† confirma√ß√£o de cabine e categoria)

üõè Op√ß√µes de Cabines:
[OPCOES_CABINES]

üìé Link para ver fotos, detalhes e reservar:
[LINK]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa (refei√ß√µes), entretenimento e atividades para todas as idades!

üö´ N√£o inclui: taxas, bebidas, excurs√µes e transporte at√© o porto.

[OPCIONAL_ALL_INCLUSIVE]

üì≤ Me chama pra garantir a sua cabine nesse cruzeiro incr√≠vel! üå¥üõ≥Ô∏è`
};

const PRECOS_MODELOS = {
  'gpt-4o': { input: 0.005, output: 0.015 },
  'gpt-4o-mini': { input: 0.00015, output: 0.0006 },
  'claude-3-5-sonnet-20240620': { input: 0.003, output: 0.015 }
};

const USD_TO_BRL = 5.2;
const MAX_TOKENS = 3000;

// ================================================================================
// üéØ HANDLER PRINCIPAL
// ================================================================================

export default async function handler(req, res) {
  const startTime = Date.now();
  
  try {
    console.log('[API-FINAL] Iniciando processamento...');
    
    // Configura√ß√£o de CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    if (req.method === 'OPTIONS') {
      return res.status(200).json({ message: 'CORS OK' });
    }

    if (req.method === 'GET') {
      return res.status(200).json({
        message: 'CVC Itaqua API - Sistema Final',
        version: '6.0-final',
        produtos_suportados: Object.keys(TEMPLATES),
        correcoes: [
          'Templates formatados para WhatsApp',
          'Processamento de imagens CORRIGIDO',
          'Detec√ß√£o m√∫ltiplas op√ß√µes MELHORADA',
          'Conex√µes e escalas detalhadas',
          'Parcelamento espec√≠fico implementado',
          'Multitrecho com conex√µes'
        ],
        timestamp: new Date().toISOString()
      });
    }

    if (req.method !== 'POST') {
      return res.status(405).json({ 
        success: false,
        error: 'M√©todo n√£o permitido' 
      });
    }

    // VALIDA√á√ÉO
    if (!req.body?.prompt) {
      return res.status(400).json({
        success: false,
        error: 'Prompt obrigat√≥rio'
      });
    }

    const { prompt, temImagem, arquivo, tipos, tipoViagem, parcelamento, camposOpcionais } = req.body;
    console.log(`[API-FINAL] Prompt: ${prompt.length} chars, Tipos: ${tipos?.join(', ')}, TipoViagem: ${tipoViagem}, TemImagem: ${temImagem}`);

    // ================================================================================
    // üîß AN√ÅLISE E SELE√á√ÉO DE TEMPLATE
    // ================================================================================
    
    const analise = analisarConteudoFinal(prompt, tipos, tipoViagem, temImagem);
    const template = selecionarTemplateFinal(analise, tipos);
    console.log(`[API-FINAL] Template: ${template.nome}, TipoViagem: ${analise.tipoViagem}, M√∫ltiplas: ${analise.multiplasOpcoes}`);

    // ================================================================================
    // üîß CONSTRUIR PROMPT FINAL
    // ================================================================================
    
    const promptFinal = construirPromptFinal(prompt, template, analise, tipos, parcelamento, camposOpcionais, temImagem, arquivo);

    // CHAMADA PARA IA
    const { modelo, estrategia, fallback } = selecionarModelo(temImagem);
    const resultado = await chamarIASegura(promptFinal, temImagem, arquivo, modelo, fallback);
    
    const responseProcessada = processarRespostaFinal(resultado.content);
    const metricas = calcularMetricas(resultado, startTime, estrategia);

    console.log(`[API-FINAL] Conclu√≠do: ${Date.now() - startTime}ms`);

    return res.status(200).json({
      success: true,
      choices: [{ 
        message: { 
          content: responseProcessada 
        } 
      }],
      metricas: metricas
    });

  } catch (error) {
    console.error('üí• [API-FINAL ERROR] üí•', error.message);
    
    return res.status(500).json({
      success: false,
      error: {
        message: `Erro no servidor: ${error.message}`,
        type: 'SERVER_ERROR',
        version: '6.0-final'
      }
    });
  }
}

// ================================================================================
// üîç AN√ÅLISE DE CONTE√öDO FINAL
// ================================================================================

function analisarConteudoFinal(prompt, tipos, tipoViagemDetectado, temImagem) {
  console.log('[AN√ÅLISE-FINAL] Analisando:', { tipos, tipoViagemDetectado, temImagem });
  
  if (!prompt || !tipos || tipos.length === 0) {
    return { 
      tipo: 'generico', 
      multiplasOpcoes: false,
      produtosPrincipais: ['A√©reo Ida e Volta'],
      temEscalas: false,
      tipoViagem: 'ida_volta',
      temImagem: temImagem || false
    };
  }

  const promptLower = prompt.toLowerCase();
  
  // ================================================================================
  // üîß DETEC√á√ÉO MELHORADA DE TIPO DE VIAGEM
  // ================================================================================
  
  const tipoViagemFinal = detectarTipoViagemFinal(prompt, tipoViagemDetectado);
  
  // ================================================================================
  // üîß DETEC√á√ÉO M√öLTIPLAS OP√á√ïES MELHORADA
  // ================================================================================
  
  let multiplasOpcoes = false;
  
  if (temImagem) {
    // Para imagens, ser mais sens√≠vel na detec√ß√£o
    const precos = (promptLower.match(/r\$[\s]*[\d.,]+/gi) || []).length;
    const totais = (promptLower.match(/total.*(\d+|adulto|crian√ßa)/gi) || []).length;
    const opcoes = (promptLower.match(/(op√ß√£o|option|\d+\s*-)/gi) || []).length;
    const companhias = (promptLower.match(/(gol|latam|azul|avianca|tap)/gi) || []).length;
    const destinos = (promptLower.match(/(s√£o paulo|rio|salvador|fortaleza|recife|bras√≠lia)/gi) || []).length;
    
    // Se tem m√∫ltiplos indicadores, assume m√∫ltiplas op√ß√µes
    multiplasOpcoes = Math.max(precos, totais, opcoes, companhias) >= 2;
    
    console.log(`[AN√ÅLISE-IMAGEM] Pre√ßos: ${precos}, Totais: ${totais}, Op√ß√µes: ${opcoes}, Companhias: ${companhias}`);
  } else {
    // Para texto, l√≥gica mais conservadora
    const precos = (promptLower.match(/r\$[\s]*[\d.,]+/gi) || []).length;
    const totais = (promptLower.match(/total.*(\d+|adulto)/gi) || []).length;
    const opcoes = (promptLower.match(/(op√ß√£o|option)/gi) || []).length;
    
    multiplasOpcoes = Math.max(precos, totais, opcoes) >= 2;
  }
  
  // Detectar escalas/conex√µes
  const temEscalas = detectarEscalasFinal(prompt);
  
  // Detectar multitrecho
  const isMultitrecho = detectarMultitrecho(prompt);
  
  let tipoPrincipal = 'generico';
  
  if (tipos.includes('A√©reo Facial') || tipos.includes('A√©reo VBI/F√°cil')) {
    if (isMultitrecho) {
      tipoPrincipal = 'multitrecho';
    } else {
      tipoPrincipal = 'aereo';
    }
  } else if (tipos.includes('Hotel')) {
    tipoPrincipal = 'hotel';
  } else if (tipos.includes('Carro')) {
    tipoPrincipal = 'carro';
  } else if (tipos.includes('Cruzeiro')) {
    tipoPrincipal = 'cruzeiro';
  } else {
    tipoPrincipal = tipos[0]?.toLowerCase() || 'generico';
  }
  
  console.log(`[AN√ÅLISE-FINAL] Tipo: ${tipoPrincipal}, TipoViagem: ${tipoViagemFinal}, M√∫ltiplas: ${multiplasOpcoes}, Multitrecho: ${isMultitrecho}`);
  
  return {
    tipo: tipoPrincipal,
    multiplasOpcoes: multiplasOpcoes,
    produtosPrincipais: tipos,
    temEscalas: temEscalas,
    tipoViagem: tipoViagemFinal,
    temImagem: temImagem || false,
    isMultitrecho: isMultitrecho
  };
}

// ================================================================================
// üîß FUN√á√ïES DE DETEC√á√ÉO
// ================================================================================

function detectarTipoViagemFinal(texto, tipoDetectado) {
  console.log('[DETECCAO-TIPO] Analisando...');
  
  // Se j√° foi detectado pelo frontend, confiar na detec√ß√£o
  if (tipoDetectado === 'ida_volta' || tipoDetectado === 'somente_ida') {
    console.log(`[DETECCAO-TIPO] ‚úÖ Frontend: ${tipoDetectado}`);
    return tipoDetectado;
  }
  
  const textoLower = texto.toLowerCase();
  
  // Indicadores expl√≠citos de ida e volta
  const indicadoresIdaVolta = [
    'ida e volta', 'ida/volta', 'round trip', 'retorno', 
    'latamida', 'latamvolta', 'ida:', 'volta:', 'retorno:',
    /\d+.*?jan.*?\d+.*?jan/i, /\d+.*?nov.*?\d+.*?nov/i,
    /\d{1,2} de \w+ - \d{1,2} de \w+/i,
    /gru.*?ssa.*?ssa.*?gru/i, /cgh.*?poa.*?poa.*?cgh/i
  ];
  
  const temIdaVolta = indicadoresIdaVolta.some(indicador => 
    typeof indicador === 'string' ? textoLower.includes(indicador) : indicador.test(textoLower)
  );
  
  // Indicadores de somente ida
  const indicadoresSomenteIda = ['somente ida', 's√≥ ida', 'one way', 'sem retorno'];
  const temSomenteIda = indicadoresSomenteIda.some(indicador => textoLower.includes(indicador));
  
  // An√°lise heur√≠stica
  const horarios = (textoLower.match(/\d{2}:\d{2}/g) || []).length;
  const datas = (textoLower.match(/\d{1,2} de \w+|\d{1,2}\/\d{1,2}/gi) || []);
  const datasUnicas = [...new Set(datas.map(d => d.toLowerCase()))];
  
  console.log('[DETECCAO-TIPO] M√©tricas:', { horarios, datasUnicas: datasUnicas.length, temIdaVolta, temSomenteIda });
  
  if (temIdaVolta || (horarios >= 4 && datasUnicas.length >= 2)) {
    console.log('[DETECCAO-TIPO] ‚úÖ IDA E VOLTA');
    return 'ida_volta';
  }
  
  if (temSomenteIda) {
    console.log('[DETECCAO-TIPO] ‚úÖ SOMENTE IDA');
    return 'somente_ida';
  }
  
  // Padr√£o: ida e volta (mais comum)
  console.log('[DETECCAO-TIPO] ‚ö†Ô∏è Assumindo IDA E VOLTA (padr√£o)');
  return 'ida_volta';
}

function detectarEscalasFinal(texto) {
  const textoLower = texto.toLowerCase();
  const indicadoresEscalas = [
    'uma escala', 'duas escalas', 'tr√™s escalas', '1 escala', '2 escalas',
    'conex√£o', 'conexao', 'escala em', 'via ', 'parada em', 'parada de',
    'com escala', 'troca em', 'voo com conex√£o',
    /\d+h\s*\d+min.*escala/i, /escala.*\d+h/i, /via\s+\w{3,}/i,
    /parada.*\d+h/i, /parada.*\d+min/i
  ];
  
  return indicadoresEscalas.some(indicador => 
    typeof indicador === 'string' ? textoLower.includes(indicador) : indicador.test(texto)
  );
}

function detectarMultitrecho(texto) {
  const textoLower = texto.toLowerCase();
  const indicadoresMultitrecho = [
    'multitrecho', 'multi trecho', 'm√∫ltiplos trechos',
    'trecho 1', 'trecho 2', 'trecho 3',
    /trecho\s*\d+/i, /m√∫ltiplos.*destinos/i
  ];
  
  // Tamb√©m detecta se h√° 3+ destinos diferentes
  const destinos = [...new Set(texto.match(/[A-Z]{3}/g) || [])];
  
  return indicadoresMultitrecho.some(indicador => 
    typeof indicador === 'string' ? textoLower.includes(indicador) : indicador.test(texto)
  ) || destinos.length >= 3;
}

// ================================================================================
// üîß SELE√á√ÉO DE TEMPLATE FINAL
// ================================================================================

function selecionarTemplateFinal(analise, tipos) {
  console.log('[TEMPLATE-FINAL] Selecionando:', {
    tipos, 
    tipo: analise.tipo,
    tipoViagem: analise.tipoViagem, 
    multiplasOpcoes: analise.multiplasOpcoes,
    isMultitrecho: analise.isMultitrecho
  });
  
  if (!tipos || tipos.length === 0) {
    return {
      nome: 'A√©reo Ida e Volta',
      conteudo: TEMPLATES['A√©reo Ida e Volta']
    };
  }

  const tipoPrincipal = tipos[0];
  
  // ================================================================================
  // üîß SELE√á√ÉO POR TIPO DE SERVI√áO
  // ================================================================================
  
  if (tipoPrincipal === 'A√©reo Facial' || tipoPrincipal === 'A√©reo VBI/F√°cil') {
    
    // MULTITRECHO tem prioridade
    if (analise.isMultitrecho) {
      console.log('[TEMPLATE-FINAL] ‚úÖ Multitrecho');
      return {
        nome: 'Multitrecho',
        conteudo: TEMPLATES['Multitrecho']
      };
    }
    
    // M√öLTIPLAS OP√á√ïES
    if (analise.multiplasOpcoes) {
      if (analise.tipoViagem === 'ida_volta') {
        console.log('[TEMPLATE-FINAL] ‚úÖ M√∫ltiplas Ida e Volta');
        return {
          nome: 'M√∫ltiplas Ida e Volta',
          conteudo: TEMPLATES['M√∫ltiplas Ida e Volta']
        };
      } else {
        console.log('[TEMPLATE-FINAL] ‚úÖ M√∫ltiplas Somente Ida');
        return {
          nome: 'M√∫ltiplas Somente Ida',
          conteudo: TEMPLATES['M√∫ltiplas Somente Ida']
        };
      }
    }
    
    // OP√á√ÉO √öNICA
    if (analise.tipoViagem === 'ida_volta') {
      console.log('[TEMPLATE-FINAL] ‚úÖ A√©reo Ida e Volta');
      return {
        nome: 'A√©reo Ida e Volta',
        conteudo: TEMPLATES['A√©reo Ida e Volta']
      };
    } else {
      console.log('[TEMPLATE-FINAL] ‚úÖ A√©reo Somente Ida');
      return {
        nome: 'A√©reo Somente Ida',
        conteudo: TEMPLATES['A√©reo Somente Ida']
      };
    }
  }
  
  // HOTEL
  if (tipoPrincipal === 'Hotel') {
    if (analise.multiplasOpcoes) {
      console.log('[TEMPLATE-FINAL] ‚úÖ Hotel M√∫ltiplas Op√ß√µes');
      return {
        nome: 'Hotel M√∫ltiplas Op√ß√µes',
        conteudo: TEMPLATES['Hotel M√∫ltiplas Op√ß√µes']
      };
    } else {
      console.log('[TEMPLATE-FINAL] ‚úÖ Hotel');
      return {
        nome: 'Hotel',
        conteudo: TEMPLATES['Hotel']
      };
    }
  }
  
  // CRUZEIRO
  if (tipoPrincipal === 'Cruzeiro') {
    console.log('[TEMPLATE-FINAL] ‚úÖ Cruzeiro');
    return {
      nome: 'Cruzeiro',
      conteudo: TEMPLATES['Cruzeiro']
    };
  }
  
  // FALLBACK
  console.warn(`[TEMPLATE-FINAL] Fallback para: ${tipoPrincipal}`);
  return {
    nome: 'A√©reo Ida e Volta',
    conteudo: TEMPLATES['A√©reo Ida e Volta']
  };
}

// ================================================================================
// üèóÔ∏è CONSTRU√á√ÉO DO PROMPT FINAL
// ================================================================================

function construirPromptFinal(promptBase, template, analise, tipos, parcelamento, camposOpcionais, temImagem, arquivo) {
  console.log('[PROMPT-FINAL] Construindo...', {
    template: template.nome,
    temImagem: temImagem,
    multiplasOpcoes: analise.multiplasOpcoes,
    tipoViagem: analise.tipoViagem
  });
  
  const tipoPrincipal = tipos?.[0] || 'A√©reo Facial';
  
  let prompt = '';

  // ================================================================================
  // üìù INSTRU√á√ïES ESPECIAIS PARA AN√ÅLISE DE IMAGEM
  // ================================================================================
  
  if (temImagem && arquivo) {
    prompt += `VOC√ä √â UM ESPECIALISTA EM AN√ÅLISE DE IMAGENS DE PASSAGENS A√âREAS E HOT√âIS.\n\n`;
    
    prompt += `INSTRU√á√ïES CR√çTICAS PARA AN√ÅLISE DE IMAGEM:\n`;
    prompt += `1. üîç EXAMINE CUIDADOSAMENTE toda a imagem\n`;
    prompt += `2. üìç EXTRAIA: destinos, datas, hor√°rios, companhias, pre√ßos EXATOS\n`;
    prompt += `3. ‚úàÔ∏è IDENTIFIQUE: se √© ida/volta, somente ida, ou m√∫ltiplas op√ß√µes\n`;
    prompt += `4. üè∑Ô∏è LEIA: nomes de companhias (Latam, Azul, Gol, TAP, etc.)\n`;
    prompt += `5. üí∞ CAPTURE: valores monet√°rios EXATOS (R$ X.XXX,XX)\n`;
    prompt += `6. üé´ DETECTE: quantos passageiros (adultos/crian√ßas)\n`;
    prompt += `7. üß≥ OBSERVE: informa√ß√µes de bagagem se vis√≠veis\n`;
    prompt += `8. üîó PROCURE: links ou c√≥digos de reserva\n\n`;
    
    prompt += `‚ùó IMPORTANTE: Use APENAS informa√ß√µes que voc√™ consegue LER na imagem.\n`;
    prompt += `‚ùå N√ÉO invente dados que n√£o est√£o vis√≠veis.\n\n`;
    
    // INSTRU√á√ïES ESPECIAIS PARA M√öLTIPLAS OP√á√ïES EM IMAGEM
    if (analise.multiplasOpcoes) {
      prompt += `‚ö†Ô∏è ATEN√á√ÉO: DETECTEI M√öLTIPLAS OP√á√ïES NA IMAGEM!\n`;
      prompt += `- Numere como "Op√ß√£o 1", "Op√ß√£o 2", etc.\n`;
      prompt += `- Separe CLARAMENTE cada op√ß√£o\n`;
      prompt += `- N√ÉO misture informa√ß√µes entre op√ß√µes\n`;
      prompt += `- Cada op√ß√£o deve ter seu pr√≥prio pre√ßo e detalhes\n\n`;
    }
  }

  // ================================================================================
  // üìù INSTRU√á√ïES GERAIS BASEADAS NO TIPO
  // ================================================================================
  
  prompt += `VOC√ä √â UM ESPECIALISTA EM OR√áAMENTOS DE VIAGEM DA CVC ITAQUA.\n\n`;
  
  prompt += `üéØ PRODUTO DETECTADO: ${tipoPrincipal}\n`;
  prompt += `üéØ TEMPLATE: ${template.nome}\n`;
  prompt += `üéØ TIPO VIAGEM: ${analise.tipoViagem}\n`;
  prompt += `üéØ M√öLTIPLAS OP√á√ïES: ${analise.multiplasOpcoes ? 'SIM' : 'N√ÉO'}\n\n`;

  // ================================================================================
  // üìù INSTRU√á√ïES ESPEC√çFICAS POR TEMPLATE
  // ================================================================================
  
  if (template.nome.includes('Multitrecho')) {
    prompt += `üõ´ INSTRU√á√ïES MULTITRECHO:\n`;
    prompt += `- Organize por "Trecho 1:", "Trecho 2:", etc.\n`;
    prompt += `- Para conex√µes detalhadas: "17/09 - Guarulhos 00:45 / Lisboa 14:35\\n(parada em Lisboa de 2h25min)\\n17/09 - Lisboa 17:00 / Madrid 19:20"\n`;
    prompt += `- Para conex√µes simples: "(voo com conex√£o)" ou "(voo direto)"\n`;
    prompt += `- Use periodo total: "17/09 a 30/09 (14 dias e 13 noites)"\n\n`;
  }
  
  if (template.nome.includes('M√∫ltiplas')) {
    prompt += `üìä INSTRU√á√ïES M√öLTIPLAS OP√á√ïES:\n`;
    prompt += `- Numere como "*Op√ß√£o 1*", "*Op√ß√£o 2*", etc.\n`;
    prompt += `- Separe claramente cada op√ß√£o\n`;
    prompt += `- Mantenha pre√ßos e detalhes espec√≠ficos para cada\n`;
    prompt += `- N√ÉO misture informa√ß√µes entre op√ß√µes\n\n`;
  }
  
  if (template.nome.includes('Hotel')) {
    prompt += `üè® INSTRU√á√ïES HOTEL:\n`;
    prompt += `- Inclua categoria do hotel (‚≠ê‚≠ê‚≠ê 3 estrelas)\n`;
    prompt += `- Calcule corretamente o n√∫mero de noites\n`;
    prompt += `- Especifique regime alimentar se dispon√≠vel\n\n`;
  }

  // ================================================================================
  // üéØ TEXTO BASE E TEMPLATE
  // ================================================================================
  
  prompt += `üìÑ CONTE√öDO PARA AN√ÅLISE:\n`;
  prompt += `${promptBase}\n\n`;
  
  prompt += `üìã TEMPLATE A USAR:\n`;
  prompt += `${template.conteudo}\n\n`;

  // ================================================================================
  // üìù INSTRU√á√ïES FINAIS E PARCELAMENTO
  // ================================================================================
  
  prompt += `\nüìù INSTRU√á√ïES FINAIS DE FORMATA√á√ÉO:\n`;
  prompt += `- ‚úÖ Preencha apenas com dados reais encontrados no texto/imagem\n`;
  prompt += `- ‚ùå N√£o invente informa√ß√µes que n√£o existem\n`;
  prompt += `- üîó Mantenha links e valores monet√°rios exatos\n`;
  prompt += `- ‚úàÔ∏è Converta c√≥digos de aeroporto para nomes completos (Ex: CGH = Congonhas, VCP = Viracopos)\n`;
  prompt += `- üìÖ Use datas no formato dd/mm (Ex: 15/11 ao inv√©s de "15 de novembro")\n`;
  prompt += `- ‚è∞ Use hor√°rios sem espa√ßos extras (Ex: 06:20 ao inv√©s de "06: 20")\n`;
  prompt += `- üõ´ Para ida e volta, use OBRIGATORIAMENTE o separador "--" entre os trechos\n`;
  prompt += `- üë• Formate passageiros como "02 adultos" (com zero √† esquerda)\n`;
  prompt += `- üß≥ Substitua [BAGAGEM_INFO] por "Inclui 1 item pessoal + 01 mala de m√£o de 10kg por pessoa"\n`;
  
  if (analise.tipo === 'aereo') {
    prompt += `- üõ´ ESCALAS/CONEX√ïES: Se detectar escalas, adicione detalhes como "(1 escala)" ou "(voo direto)" ap√≥s o hor√°rio\n`;
    prompt += `- ‚úàÔ∏è FORMATO OBRIGAT√ìRIO para ida e volta:\n`;
    prompt += `  15/11 - Congonhas 06:20 / Porto Alegre 08:00 (voo direto)\n`;
    prompt += `  --\n`;
    prompt += `  17/11 - Porto Alegre 19:30 / Congonhas 21:10 (voo direto)\n`;
  }

  // PARCELAMENTO
  if (parcelamento && parcelamento.ativo) {
    prompt += `\nüí≥ PARCELAMENTO:\n`;
    if (parcelamento.tipo === 'especifico' && parcelamento.detalhes) {
      prompt += `- Use: "Parcelamento: ${parcelamento.detalhes}"\n`;
    } else if (parcelamento.parcelas) {
      prompt += `- Use: "üí∞ [VALOR] em ${parcelamento.parcelas}x de R$ [VALOR_PARCELA]"\n`;
    }
  }

  prompt += `\nüéØ RESPONDA APENAS COM O TEMPLATE PREENCHIDO, SEM EXPLICA√á√ïES ADICIONAIS.\n`;
  prompt += `üìù N√ÉO inclua cabe√ßalhos como "Or√ßamento:" ou "Resultado:" - comece direto com o conte√∫do formatado.`;

  return prompt;
}

// ================================================================================
// ü§ñ SISTEMA DE IA (COMPLETO)
// ================================================================================

function selecionarModelo(temImagem) {
  if (temImagem === true) {
    return {
      modelo: 'claude-3-5-sonnet-20240620',
      estrategia: 'Claude para an√°lise visual',
      fallback: 'gpt-4o'
    };
  } else {
    return {
      modelo: 'gpt-4o-mini',
      estrategia: 'GPT-4o-mini para texto',
      fallback: 'gpt-4o'
    };
  }
}

async function chamarIASegura(prompt, temImagem, arquivo, modelo, fallbackModelo) {
  try {
    if (temImagem === true) {
      return await chamarClaude(prompt, arquivo, modelo);
    } else {
      return await chamarOpenAI(prompt, false, null, modelo);
    }
  } catch (erro1) {
    console.error(`‚ùå Falha principal no modelo ${modelo}: ${erro1.message}`);
    
    // ‚úÖ NOVO: Fallback espec√≠fico para imagens
    if (temImagem === true) {
      console.warn(`‚ö†Ô∏è Claude falhou, tentando GPT-4o com vis√£o...`);
      try {
        return await chamarOpenAI(prompt, true, arquivo, 'gpt-4o');
      } catch (erro2) {
        throw new Error(`Ambos os modelos falharam: ${erro1.message} | ${erro2.message}`);
      }
    } else {
      // Fallback normal para texto
      try {
        console.warn(`‚ö†Ô∏è Tentando fallback com ${fallbackModelo}...`);
        return await chamarOpenAI(prompt, false, null, fallbackModelo);
      } catch (erro2) {
        throw new Error(`Ambos os modelos falharam: ${erro1.message} | ${erro2.message}`);
      }
    }
  }
}

async function chamarClaude(prompt, arquivo, modelo) {
  if (!process.env.ANTHROPIC_API_KEY) {
    throw new Error('ANTHROPIC_API_KEY n√£o encontrada nas vari√°veis de ambiente');
  }

  const base64Match = arquivo.match(/data:(image\/[^;]+);base64,(.+)/);
  if (!base64Match) {
    throw new Error('Formato de imagem base64 inv√°lido');
  }

  const content = [
    { type: "text", text: prompt },
    { type: "image", source: { type: "base64", media_type: base64Match[1], data: base64Match[2] } }
  ];

  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'Content-Type': 'application/json',
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: modelo,
      max_tokens: MAX_TOKENS,
      messages: [{ role: 'user', content }]
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erro na API Claude ${response.status}: ${errorText.substring(0, 200)}`);
  }

  const data = await response.json();
  if (!data.content?.[0]?.text) {
    throw new Error('Resposta da API Claude em formato inv√°lido');
  }

  return {
    content: data.content[0].text,
    usage: data.usage || { input_tokens: 0, output_tokens: 0 },
    modelo_usado: modelo
  };
}

async function chamarOpenAI(prompt, temImagem, arquivo, modelo) {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente');
  }

  let messages;
  if (temImagem === true && arquivo) {
    messages = [
      {
        role: "user",
        content: [
          { type: "text", text: prompt },
          { type: "image_url", image_url: { url: arquivo } }
        ]
      }
    ];
  } else {
    messages = [{ role: "user", content: prompt }];
  }

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: modelo,
      messages: messages,
      max_tokens: MAX_TOKENS,
      temperature: 0.1
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erro na API OpenAI ${response.status}: ${errorText.substring(0, 200)}`);
  }

  const data = await response.json();
  if (!data.choices?.[0]?.message?.content) {
    throw new Error('Resposta da API OpenAI em formato inv√°lido');
  }

  return {
    content: data.choices[0].message.content,
    usage: data.usage || { prompt_tokens: 0, completion_tokens: 0 },
    modelo_usado: modelo
  };
}

// ================================================================================
// üßπ PROCESSAMENTO DA RESPOSTA
// ================================================================================

function processarRespostaFinal(conteudo) {
  console.log('[PROCESSAR-RESPOSTA] Iniciando processamento avan√ßado...');
  
  if (!conteudo || typeof conteudo !== 'string') {
    console.error('[PROCESSAR-RESPOSTA] Conte√∫do inv√°lido');
    return 'Erro: Resposta inv√°lida da IA';
  }
  
  let resultado = conteudo.trim();
  
  // ================================================================================
  // üßπ LIMPEZA INICIAL
  // ================================================================================
  
  // Remover cabe√ßalhos t√©cnicos
  resultado = resultado.replace(/^(Or√ßamento:|Resultado:|Resposta:)/i, '').trim();
  
  // ================================================================================
  // ‚úàÔ∏è FORMATA√á√ÉO ESPEC√çFICA PARA PASSAGENS A√âREAS
  // ================================================================================
  
  // 1. CORRIGIR HOR√ÅRIOS - remover espa√ßos extras: "06: 20" ‚Üí "06:20"
  resultado = resultado.replace(/(\d{1,2}):\s+(\d{2})/g, '$1:$2');
  
  // 2. CORRIGIR DATAS - simplificar: "15 de novembro" ‚Üí "15/11"
  const meses = {
    'janeiro': '01', 'jan': '01',
    'fevereiro': '02', 'fev': '02',
    'mar√ßo': '03', 'mar': '03',
    'abril': '04', 'abr': '04',
    'maio': '05', 'mai': '05',
    'junho': '06', 'jun': '06',
    'julho': '07', 'jul': '07',
    'agosto': '08', 'ago': '08',
    'setembro': '09', 'set': '09',
    'outubro': '10', 'out': '10',
    'novembro': '11', 'nov': '11',
    'dezembro': '12', 'dez': '12'
  };
  
  Object.entries(meses).forEach(([nomeMes, numeroMes]) => {
    const regex = new RegExp(`(\\d{1,2})\\s+de\\s+${nomeMes}`, 'gi');
    resultado = resultado.replace(regex, `$1/${numeroMes}`);
  });
  
  // 3. GARANTIR SEPARADOR IDA/VOLTA - for√ßar quebra de linha com "--"
  resultado = resultado.replace(
    /(\d{2}:\d{2}\s+[A-Za-z\s]+)\s*-\s*-\s*(\d{1,2}\/\d{1,2}\s+-\s+[A-Za-z\s]+\s+\d{2}:\d{2})/g,
    '$1\n--\n$2'
  );
  
  // 4. CORRIGIR CONEX√ïES - garantir formato correto
  resultado = resultado.replace(/Voo direto/g, '(voo direto)');
  resultado = resultado.replace(/voo direto/g, '(voo direto)');
  
  // 5. SUBSTITUIR PLACEHOLDERS N√ÉO PREENCHIDOS
  resultado = resultado.replace(/\[BAGAGEM_INFO\]/g, 'Inclui 1 item pessoal + 01 mala de m√£o de 10kg por pessoa');
  resultado = resultado.replace(/\[REEMBOLSAVEL\]/g, 'N√£o reembols√°vel');
  resultado = resultado.replace(/\[LINK\]/g, '');
  
  // 6. PADRONIZAR PASSAGEIROS - "2 Adultos" ‚Üí "02 adultos"
  resultado = resultado.replace(/(\d)\s+(Adultos?)/gi, (match, num, palavra) => {
    const numeroFormatado = num.padStart(2, '0');
    return `${numeroFormatado} ${palavra.toLowerCase()}`;
  });
  
  // ================================================================================
  // ‚úàÔ∏è CONVERS√ÉO DE C√ìDIGOS DE AEROPORTO
  // ================================================================================
  
  resultado = converterCodigosAeroporto(resultado);
  
  // ================================================================================
  // üîß MELHORIAS FINAIS DE FORMATA√á√ÉO
  // ================================================================================
  
  // Corrigir espa√ßamento em valores monet√°rios
  resultado = resultado.replace(/R\$\s*(\d+)/g, 'R$ $1');
  
  // Garantir espa√ßo ap√≥s emojis
  resultado = resultado.replace(/([üì±üéØ‚úÖ‚ùå‚ö†Ô∏èüí∞üè®‚úàÔ∏èüõ´üö¢])([A-Za-z])/g, '$1 $2');
  
  // Limpar quebras de linha excessivas, mas manter estrutura
  resultado = resultado.replace(/\n{3,}/g, '\n\n');
  
  // Garantir quebra de linha antes do valor total
  resultado = resultado.replace(/(üí∞\s*Valor total)/g, '\n$1');
  
  console.log('[PROCESSAR-RESPOSTA] Processamento avan√ßado conclu√≠do');
  
  return resultado;
}

function converterCodigosAeroporto(texto) {
  let resultado = texto;
  
  // Converter c√≥digos para nomes completos
  Object.entries(aeroportos).forEach(([codigo, nome]) => {
    // Padr√£o: GRU -> Guarulhos (SP) para principais aeroportos brasileiros
    const regex = new RegExp(`\\b${codigo}\\b`, 'gi');
    if (resultado.match(regex)) {
      // Adicionar estado para aeroportos brasileiros principais
      const nomeCompleto = codigo.match(/^(CGH|GRU|VCP|SDU|GIG|BSB|CNF|CWB|REC|FOR|SSA|POA|FLN)$/) 
        ? `${nome} (${obterEstadoAeroporto(codigo)})` 
        : nome;
      resultado = resultado.replace(regex, nomeCompleto);
    }
  });
  
  return resultado;
}

function obterEstadoAeroporto(codigo) {
  const estados = {
    'CGH': 'SP', 'GRU': 'SP', 'VCP': 'SP',
    'SDU': 'RJ', 'GIG': 'RJ',
    'BSB': 'DF', 'CNF': 'MG', 'PLU': 'MG',
    'CWB': 'PR', 'IGU': 'PR',
    'REC': 'PE', 'FOR': 'CE', 'SSA': 'BA',
    'POA': 'RS', 'FLN': 'SC',
    'MAO': 'AM', 'BEL': 'PA', 'CGB': 'MT'
  };
  return estados[codigo] || '';
}

// ================================================================================
// üìä M√âTRICAS E C√ÅLCULOS
// ================================================================================

function calcularMetricas(resultado, startTime, estrategia) {
  const tempoTotal = Date.now() - startTime;
  const modelo = resultado.modelo_usado || 'desconhecido';
  
  let custoBRL = 0;
  let economiaUSD = 0;
  
  if (resultado.usage) {
    const precos = PRECOS_MODELOS[modelo] || PRECOS_MODELOS['gpt-4o-mini'];
    
    const inputTokens = resultado.usage.input_tokens || resultado.usage.prompt_tokens || 0;
    const outputTokens = resultado.usage.output_tokens || resultado.usage.completion_tokens || 0;
    
    const custoUSD = (inputTokens / 1000 * precos.input) + (outputTokens / 1000 * precos.output);
    custoBRL = custoUSD * USD_TO_BRL;
    
    // Economia comparado com GPT-4o
    const custoGPT4o = (inputTokens / 1000 * PRECOS_MODELOS['gpt-4o'].input) + 
                       (outputTokens / 1000 * PRECOS_MODELOS['gpt-4o'].output);
    economiaUSD = custoGPT4o - custoUSD;
  }

  return {
    processamento: {
      tempo_total_ms: tempoTotal,
      modelo_usado: modelo,
      estrategia: estrategia
    },
    tokens: resultado.usage || {},
    custo: {
      valor_brl: parseFloat(custoBRL.toFixed(4)),
      economia_usd: parseFloat(economiaUSD.toFixed(4)),
      economia_percentual: economiaUSD > 0 ? 
        ((economiaUSD / (economiaUSD + (custoBRL / USD_TO_BRL))) * 100).toFixed(1) + '%' : '0%'
    },
    performance: {
      tempo_processamento_ms: tempoTotal
    }
  };
}

console.log('‚úÖ [API-FINAL] CVC Itaqua API v6.0-final carregada');
console.log('üîß [FOCO] Leitura de imagens CORRIGIDA com instru√ß√µes detalhadas');
console.log('‚úàÔ∏è [MELHORIA] Templates WhatsApp + Conex√µes + Parcelamento espec√≠fico');
console.log('üéØ [CORRE√á√ÉO] Detec√ß√£o m√∫ltiplas op√ß√µes MELHORADA para imagens');
console.log('üöÄ [STATUS] Pronto para gerar or√ßamentos profissionais e corretos!');
