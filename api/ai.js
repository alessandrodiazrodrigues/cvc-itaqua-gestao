// üöÄ api/ai.js - v8.7 - IA REAL CONECTADA
// MUDAN√áA: Removida simula√ß√£o, usando OpenAI + Claude reais
// OBJETIVO: Sistema modular completo com IA real funcionando

console.log("üöÄ CVC ITAQUA API v8.7 - IA REAL CONECTADA");

export default async function handler(req, res) {
    const inicio = Date.now();
    console.log(`üìä M√©todo: ${req.method} | Timestamp: ${new Date().toISOString()}`);

    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('X-Powered-By', 'CVC-Itaqua-AI-v8.7-IA-REAL');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            success: false, 
            error: 'M√©todo n√£o permitido',
            versao: '8.7-ia-real'
        });
    }

    try {
        // ================================================================================
        // üì¶ CARREGAMENTO DIN√ÇMICO DE TODOS OS M√ìDULOS
        // ================================================================================
        
        console.log("üì¶ Carregando m√≥dulos especializados...");
        
        const [analysis, iaClient, processing, prompts, templates, utils] = await Promise.all([
            import('./modules/analysis.js').catch(() => null),
            import('./modules/ia-client.js').catch(() => null), 
            import('./modules/processing.js').catch(() => null),
            import('./modules/prompts.js').catch(() => null),
            import('./modules/templates.js').catch(() => null),
            import('./modules/utils.js').catch(() => null)
        ]);
        
        console.log("‚úÖ Todos os m√≥dulos carregados");

        // ================================================================================
        // üîß NORMALIZA√á√ÉO DE DADOS
        // ================================================================================
        
        let formData, tipo;
        
        try {
            if (utils?.default?.normalizarEntrada) {
                const resultado = utils.default.normalizarEntrada(req.body);
                formData = resultado.formData;
                tipo = resultado.tipo;
            } else if (utils?.normalizarEntrada) {
                const resultado = utils.normalizarEntrada(req.body);
                formData = resultado.formData;
                tipo = resultado.tipo;
            } else {
                formData = req.body.formData || req.body;
                tipo = req.body.tipo || 'orcamento';
                
                if (!formData.tipos || !Array.isArray(formData.tipos) || formData.tipos.length === 0) {
                    formData.tipos = ['A√©reo Nacional'];
                }
                formData.observacoes = formData.observacoes || '';
                formData.destino = formData.destino || '';
            }
        } catch (normError) {
            console.warn("‚ö†Ô∏è Erro na normaliza√ß√£o, usando fallback:", normError.message);
            formData = req.body.formData || req.body;
            tipo = 'orcamento';
        }
        
        console.log(`üéØ Dados normalizados para tipo: ${tipo}`);

        // ================================================================================
        // üéØ ORQUESTRA√á√ÉO BASEADA NO TIPO
        // ================================================================================
        
        let resultado;
        const modulos = { analysis, iaClient, processing, prompts, templates, utils };

        switch (tipo) {
            case 'orcamento':
                resultado = await orquestrarOrcamentoReal(formData, modulos);
                break;
            case 'ranking':
                resultado = await orquestrarRankingReal(formData, modulos);
                break;
            case 'dicas':
                resultado = await orquestrarDicasReal(formData, modulos);
                break;
            default:
                throw new Error(`Tipo de opera√ß√£o n√£o suportado: ${tipo}`);
        }

        // ================================================================================
        // üìä RESPOSTA FINAL COM IA REAL
        // ================================================================================
        
        const tempoTotal = Date.now() - inicio;
        console.log(`‚úÖ Orquestra√ß√£o IA REAL conclu√≠da em ${tempoTotal}ms`);

        return res.status(200).json({
            success: true,
            result: resultado.conteudo,
            versao: '8.7-ia-real-conectada',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                fluxoCompleto: 'An√°lise ‚Üí Prompt ‚Üí IA-REAL ‚Üí Processamento ‚Üí Resposta',
                iaReal: true,
                modulosUtilizados: Object.keys(modulos).filter(k => modulos[k]),
                ...resultado.debug
            }
        });

    } catch (error) {
        const tempoTotal = Date.now() - inicio;
        console.error("‚ùå Erro fatal na IA REAL:", error);
        
        return res.status(500).json({
            success: false,
            error: error.message,
            versao: '8.7-ia-real-erro',
            timestamp: new Date().toISOString(),
            debug: {
                tempoProcessamento: `${tempoTotal}ms`,
                errorStack: error.stack?.split('\n').slice(0, 4),
                iaReal: true,
                tipoErro: error.name || 'erro_ia_real'
            }
        });
    }
}

// ================================================================================
// üéØ ORQUESTRA√á√ÉO DE OR√áAMENTO COM IA REAL
// ================================================================================

async function orquestrarOrcamentoReal(formData, modulos) {
    console.log("üéØ Orquestrando fluxo com IA REAL...");
    console.log("üîÑ FLUXO: An√°lise ‚Üí Prompt ‚Üí IA-REAL ‚Üí Processamento ‚Üí Resposta");

    try {
        // ETAPA 1: AN√ÅLISE DO TEXTO
        console.log("üìä ETAPA 1: An√°lise do texto...");
        let analise;
        try {
            if (modulos.analysis?.analisarTextoCompleto) {
                analise = modulos.analysis.analisarTextoCompleto(formData);
            } else if (modulos.analysis?.default?.analisarTextoCompleto) {
                analise = modulos.analysis.default.analisarTextoCompleto(formData);
            } else {
                analise = {
                    tipoDetectado: 'generico',
                    complexidade: 'media',
                    confiancaDeteccao: 0.8
                };
            }
        } catch (analiseError) {
            console.warn("‚ö†Ô∏è Erro na an√°lise:", analiseError.message);
            analise = { tipoDetectado: 'generico', complexidade: 'media', confiancaDeteccao: 0.7 };
        }
        
        console.log(`‚úÖ An√°lise: ${analise?.tipoDetectado}, complexidade: ${analise?.complexidade}`);

        // ETAPA 2: GERA√á√ÉO DO PROMPT
        console.log("üìã ETAPA 2: Gera√ß√£o de prompt...");
        let prompt;
        try {
            if (modulos.prompts?.gerarPromptOtimizado) {
                prompt = modulos.prompts.gerarPromptOtimizado(formData, analise);
            } else if (modulos.prompts?.default?.gerarPromptOtimizado) {
                prompt = modulos.prompts.default.gerarPromptOtimizado(formData, analise);
            } else {
                prompt = gerarPromptBasico(formData, analise);
            }
        } catch (promptError) {
            console.warn("‚ö†Ô∏è Erro na gera√ß√£o de prompt:", promptError.message);
            prompt = gerarPromptBasico(formData, analise);
        }
        
        console.log(`‚úÖ Prompt gerado: ${prompt?.length} caracteres`);

        // ETAPA 3: SELE√á√ÉO DE MODELO
        console.log("ü§ñ ETAPA 3: Sele√ß√£o de modelo IA...");
        let modeloInfo = { modelo: 'gpt-4o-mini', fallback: ['gpt-4o'] };
        try {
            if (modulos.iaClient?.selecionarModelo) {
                modeloInfo = modulos.iaClient.selecionarModelo(!!formData.imagemBase64, analise?.complexidade);
            } else if (modulos.iaClient?.default?.selecionarModelo) {
                modeloInfo = modulos.iaClient.default.selecionarModelo(!!formData.imagemBase64, analise?.complexidade);
            }
        } catch (selecaoError) {
            console.warn("‚ö†Ô∏è Erro na sele√ß√£o de modelo:", selecaoError.message);
        }
        
        console.log(`‚úÖ Modelo selecionado: ${modeloInfo.modelo} (motivo: ${modeloInfo.motivo})`);

        // ETAPA 4: CHAMADA PARA IA REAL
        console.log("üß† ETAPA 4: Chamada para IA REAL...");
        let respostaIA;
        try {
            if (modulos.iaClient?.chamarIASegura) {
                respostaIA = await modulos.iaClient.chamarIASegura(
                    prompt, 
                    !!formData.imagemBase64, 
                    formData.imagemBase64, 
                    modeloInfo.modelo, 
                    modeloInfo.fallback
                );
            } else if (modulos.iaClient?.default?.chamarIASegura) {
                respostaIA = await modulos.iaClient.default.chamarIASegura(
                    prompt, 
                    !!formData.imagemBase64, 
                    formData.imagemBase64, 
                    modeloInfo.modelo, 
                    modeloInfo.fallback
                );
            } else {
                throw new Error("M√≥dulo ia-client.js n√£o dispon√≠vel - IA real n√£o pode ser executada");
            }
        } catch (iaError) {
            console.error("‚ùå ERRO CR√çTICO na IA REAL:", iaError.message);
            throw new Error(`Falha na IA Real: ${iaError.message}`);
        }
        
        console.log(`‚úÖ IA REAL respondeu: ${respostaIA?.content?.length} caracteres`);
        console.log(`üéØ Modelo usado: ${respostaIA?.modelo_usado}`);

        // ETAPA 5: PROCESSAMENTO
        console.log("üé® ETAPA 5: Processamento final...");
        let conteudoFinal;
        try {
            if (modulos.processing?.processarRespostaCompleta) {
                conteudoFinal = modulos.processing.processarRespostaCompleta(
                    respostaIA.content, 
                    analise,
                    formData
                );
            } else if (modulos.processing?.default?.processarRespostaCompleta) {
                conteudoFinal = modulos.processing.default.processarRespostaCompleta(
                    respostaIA.content, 
                    analise,
                    formData
                );
            } else {
                conteudoFinal = respostaIA.content;
            }
        } catch (processError) {
            console.warn("‚ö†Ô∏è Erro no processamento:", processError.message);
            conteudoFinal = respostaIA.content;
        }

        // ETAPA 6: M√âTRICAS
        console.log("üìä ETAPA 6: C√°lculo de m√©tricas...");
        let custo = { custo_total: 0 };
        let informacoesUso = { tokens_total: 0 };
        
        try {
            if (modulos.iaClient?.obterInformacoesUso && modulos.iaClient?.calcularCusto) {
                informacoesUso = modulos.iaClient.obterInformacoesUso(respostaIA);
                custo = modulos.iaClient.calcularCusto(informacoesUso);
            } else if (modulos.iaClient?.default?.obterInformacoesUso && modulos.iaClient?.default?.calcularCusto) {
                informacoesUso = modulos.iaClient.default.obterInformacoesUso(respostaIA);
                custo = modulos.iaClient.default.calcularCusto(informacoesUso);
            }
        } catch (errorMetricas) {
            console.warn("‚ö†Ô∏è Erro ao calcular m√©tricas:", errorMetricas.message);
        }

        console.log(`‚úÖ Or√ßamento IA REAL processado com sucesso!`);

        // RESULTADO FINAL
        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: 'An√°lise ‚Üí Prompt ‚Üí IA-REAL ‚Üí Processamento ‚Üí M√©tricas',
                modeloUsado: respostaIA?.modelo_usado || modeloInfo.modelo,
                templateUsado: analise?.tipoDetectado || 'generico',
                custoBRL: custo?.custo_total ? `R$ ${custo.custo_total.toFixed(4)}` : 'N√£o calculado',
                tokensUsados: informacoesUso?.tokens_total || 0,
                tempoIA: respostaIA?.tempo_resposta || 'N√£o medido',
                complexidadeAnalise: analise?.complexidade || 'media',
                iaReal: true,
                motivoModelo: modeloInfo?.motivo || 'Padr√£o'
            }
        };

    } catch (error) {
        console.error("‚ùå Erro na orquestra√ß√£o IA REAL:", error);
        return {
            conteudo: `‚ùå ERRO NA IA REAL: ${error.message}

O sistema detectou uma falha na conex√£o com a intelig√™ncia artificial.

Poss√≠veis causas:
‚Ä¢ APIs n√£o configuradas corretamente
‚Ä¢ Limite de tokens excedido  
‚Ä¢ Erro de conectividade
‚Ä¢ Problema nos m√≥dulos especializados

Detalhes t√©cnicos: ${error.stack?.split('\n')[0]}

Contate o suporte t√©cnico se o problema persistir.`,
            debug: {
                erro: error.message,
                fluxoInterrompido: true,
                iaReal: true,
                erroTipo: error.name
            }
        };
    }
}

// ================================================================================
// üè® ORQUESTRA√á√ÉO DE RANKING COM IA REAL
// ================================================================================

async function orquestrarRankingReal(formData, modulos) {
    console.log("üè® Orquestrando ranking com IA REAL...");
    
    try {
        const destino = formData.destino || 'destino informado';
        
        // Prompt espec√≠fico para ranking
        const prompt = `Crie um ranking profissional dos 5 melhores hot√©is em ${destino}.

FORMATO OBRIGAT√ìRIO:
üè® *RANKING DE HOT√âIS - ${destino.toUpperCase()}*

ü•á *1¬∫ LUGAR - [Nome do Hotel]*
‚≠ê [X] estrelas | [Localiza√ß√£o]
üí∞ R$ [pre√ßo]/noite | [Regime]
‚úÖ [3 principais comodidades]

ü•à *2¬∫ LUGAR - [Nome do Hotel]*
‚≠ê [X] estrelas | [Localiza√ß√£o]  
üí∞ R$ [pre√ßo]/noite | [Regime]
‚úÖ [3 principais comodidades]

(Continuar at√© o 5¬∫ lugar)

üí° *Dica:* [Dica de reserva ou melhor √©poca]

Use pre√ßos realistas para ${destino} e hot√©is reais quando poss√≠vel.`;

        // Chamada IA REAL
        let respostaIA;
        if (modulos.iaClient?.chamarIASegura) {
            respostaIA = await modulos.iaClient.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o']);
        } else if (modulos.iaClient?.default?.chamarIASegura) {
            respostaIA = await modulos.iaClient.default.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o']);
        } else {
            throw new Error("IA Real n√£o dispon√≠vel para ranking");
        }

        // Processamento
        let conteudoFinal;
        if (modulos.processing?.processarRespostaCompleta) {
            conteudoFinal = modulos.processing.processarRespostaCompleta(
                respostaIA.content,
                { tipoDetectado: 'ranking', complexidade: 'baixa' },
                formData
            );
        } else {
            conteudoFinal = respostaIA.content;
        }

        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: 'Ranking ‚Üí Prompt ‚Üí IA-REAL ‚Üí Processamento',
                tipo: 'ranking',
                modeloUsado: respostaIA?.modelo_usado,
                iaReal: true
            }
        };

    } catch (error) {
        console.error("‚ùå Erro no ranking IA REAL:", error);
        return {
            conteudo: `‚ùå Erro ao gerar ranking com IA REAL: ${error.message}`,
            debug: { erro: error.message, tipo: 'ranking', iaReal: true }
        };
    }
}

// ================================================================================
// üí° ORQUESTRA√á√ÉO DE DICAS COM IA REAL
// ================================================================================

async function orquestrarDicasReal(formData, modulos) {
    console.log("üí° Orquestrando dicas com IA REAL...");
    
    try {
        const destino = formData.destino || 'destino informado';
        
        // Prompt espec√≠fico para dicas
        const prompt = `Forne√ßa dicas pr√°ticas e atualizadas de viagem para ${destino}.

FORMATO OBRIGAT√ìRIO:
üí° *DICAS DE VIAGEM - ${destino.toUpperCase()}*

üìÖ *MELHOR √âPOCA*
‚Ä¢ [Per√≠odo recomendado e motivos]
‚Ä¢ [√âpoca a evitar e motivos]

üéí *O QUE LEVAR*
‚Ä¢ [5-6 itens essenciais espec√≠ficos para o destino]

üó∫Ô∏è *PONTOS TUR√çSTICOS*
‚Ä¢ [Top 5 atra√ß√µes principais]

üí∞ *OR√áAMENTO DI√ÅRIO*
‚Ä¢ Econ√¥mico: R$ [X]-[Y]/dia
‚Ä¢ M√©dio: R$ [X]-[Y]/dia  
‚Ä¢ Premium: R$ [X]+/dia

üì± *APPS E DICAS EXTRAS*
‚Ä¢ [2-3 aplicativos √∫teis]
‚Ä¢ [Dicas locais importantes]

Use informa√ß√µes atualizadas e pre√ßos realistas para ${destino}.`;

        // Chamada IA REAL
        let respostaIA;
        if (modulos.iaClient?.chamarIASegura) {
            respostaIA = await modulos.iaClient.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o']);
        } else if (modulos.iaClient?.default?.chamarIASegura) {
            respostaIA = await modulos.iaClient.default.chamarIASegura(prompt, false, null, 'gpt-4o-mini', ['gpt-4o']);
        } else {
            throw new Error("IA Real n√£o dispon√≠vel para dicas");
        }

        // Processamento
        let conteudoFinal;
        if (modulos.processing?.processarRespostaCompleta) {
            conteudoFinal = modulos.processing.processarRespostaCompleta(
                respostaIA.content,
                { tipoDetectado: 'dicas', complexidade: 'baixa' },
                formData
            );
        } else {
            conteudoFinal = respostaIA.content;
        }

        return {
            conteudo: conteudoFinal,
            debug: {
                fluxoExecutado: 'Dicas ‚Üí Prompt ‚Üí IA-REAL ‚Üí Processamento',
                tipo: 'dicas',
                modeloUsado: respostaIA?.modelo_usado,
                iaReal: true
            }
        };

    } catch (error) {
        console.error("‚ùå Erro nas dicas IA REAL:", error);
        return {
            conteudo: `‚ùå Erro ao gerar dicas com IA REAL: ${error.message}`,
            debug: { erro: error.message, tipo: 'dicas', iaReal: true }
        };
    }
}

// ================================================================================
// üîß FUN√á√ÉO AUXILIAR: PROMPT B√ÅSICO
// ================================================================================

function gerarPromptBasico(formData, analise) {
    return `Voc√™ √© um consultor especializado da CVC Itaqua. Gere um or√ßamento profissional e detalhado baseado nas informa√ß√µes abaixo.

DADOS DA SOLICITA√á√ÉO:
- Tipos: ${formData.tipos?.join(', ') || 'N√£o informado'}
- Destino: ${formData.destino || 'N√£o informado'}
- Adultos: ${formData.adultos || 1}
- Crian√ßas: ${formData.criancas || 0}
${formData.observacoes ? `- Observa√ß√µes: ${formData.observacoes}` : ''}

AN√ÅLISE DETECTADA:
- Tipo: ${analise.tipoDetectado}
- Complexidade: ${analise.complexidade}

FORMATO OBRIGAT√ìRIO:
- Use formata√ß√£o profissional com emojis
- Inclua valores em R$ (moeda brasileira)
- Adicione informa√ß√µes sobre parcelamento
- Especifique bagagens inclu√≠das
- Mantenha tom profissional mas atrativo
- Se houver informa√ß√µes de voos/hot√©is nas observa√ß√µes, use-as

INSTRU√á√ïES IMPORTANTES:
- Analise cuidadosamente as observa√ß√µes para extrair dados de voos, pre√ßos, datas
- Se detectar m√∫ltiplos trechos, formate como roteiro multitrecho
- Para voos internacionais, inclua informa√ß√µes sobre documenta√ß√£o
- Sempre inclua informa√ß√µes sobre bagagem e condi√ß√µes de reembolso

Gere o or√ßamento completo e profissional:`;
}

console.log("‚úÖ API v8.7 IA REAL carregada - OPENAI + CLAUDE CONECTADOS!");
console.log("üéØ Sistema modular completo com intelig√™ncia artificial real funcionando!");
