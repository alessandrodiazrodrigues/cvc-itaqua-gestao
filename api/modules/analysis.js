// üîç analysis.js - SISTEMA COMPLETO DE AN√ÅLISE v11.0
// CORRE√á√ÉO FINAL: Removido 'export' duplicado de todas as constantes e da fun√ß√£o principal.
// Baseado em padr√µes reais: GOL, LATAM, Azul + CVC

console.log("üîç Analysis v11.0 - SISTEMA COMPLETO DE AN√ÅLISE CARREGADO");

// ================================================================================
// 1. üéØ CONSTANTES (PADR√ïES DE DETEC√á√ÉO ESPECIALIZADOS)
// ================================================================================

// CORRE√á√ÉO: A palavra 'export' foi removida da frente de todas as constantes abaixo.

const PADROES_COMPANHIAS = {
  'gol': { nome: 'GOL', tipo: 'nacional', cor: 'laranja' },
  'latam': { nome: 'LATAM', tipo: 'nacional_internacional', cor: 'vermelho' },
  'azul': { nome: 'Azul', tipo: 'nacional', cor: 'azul' },
  'iberia': { nome: 'Iberia', tipo: 'internacional', cor: 'vermelho' },
  'tap': { nome: 'TAP Portugal', tipo: 'internacional', cor: 'verde' },
  'lufthansa': { nome: 'Lufthansa', tipo: 'internacional', cor: 'amarelo' },
  'air france': { nome: 'Air France', tipo: 'internacional', cor: 'azul' },
  'airfrance': { nome: 'Air France', tipo: 'internacional', cor: 'azul' },
  'klm': { nome: 'KLM', tipo: 'internacional', cor: 'azul' },
  'emirates': { nome: 'Emirates', tipo: 'internacional', cor: 'dourado' },
  'american': { nome: 'American Airlines', tipo: 'internacional', cor: 'vermelho' },
  'costa': { nome: 'Costa Cruzeiros', tipo: 'cruzeiro', cor: 'amarelo' },
  'msc': { nome: 'MSC Cruzeiros', tipo: 'cruzeiro', cor: 'azul' },
  'disney': { nome: 'Disney Cruise Line', tipo: 'cruzeiro', cor: 'azul' },
  'royal caribbean': { nome: 'Royal Caribbean', tipo: 'cruzeiro', cor: 'azul' },
  'royal': { nome: 'Royal Caribbean', tipo: 'cruzeiro', cor: 'azul' },
  'norwegian': { nome: 'Norwegian Cruise Line', tipo: 'cruzeiro', cor: 'azul' },
  'celebrity': { nome: 'Celebrity Cruises', tipo: 'cruzeiro', cor: 'preto' }
};

const NAVIOS_CONHECIDOS = {
  'costa diadema': 'Costa Cruzeiros',
  'costa fascinosa': 'Costa Cruzeiros',
  'costa favolosa': 'Costa Cruzeiros',
  'msc seaview': 'MSC Cruzeiros',
  'msc preziosa': 'MSC Cruzeiros',
  'msc splendida': 'MSC Cruzeiros'
};

const PORTOS_CRUZEIROS = {
  'santos': { nome: 'Santos', estado: 'S√£o Paulo', tipo: 'nacional' },
  'rio de janeiro': { nome: 'Rio de Janeiro', estado: 'Rio de Janeiro', tipo: 'nacional' },
  'salvador': { nome: 'Salvador', estado: 'Bahia', tipo: 'nacional' },
  'itajai': { nome: 'Itaja√≠', estado: 'Santa Catarina', tipo: 'nacional' },
  'itaja√≠': { nome: 'Itaja√≠', estado: 'Santa Catarina', tipo: 'nacional' },
  'recife': { nome: 'Recife', estado: 'Pernambuco', tipo: 'nacional' },
  'maceio': { nome: 'Macei√≥', estado: 'Alagoas', tipo: 'nacional' },
  'buenos aires': { nome: 'Buenos Aires', pais: 'Argentina', tipo: 'internacional' },
  'montevideu': { nome: 'Montevid√©u', pais: 'Uruguai', tipo: 'internacional' },
  'barcelona': { nome: 'Barcelona', pais: 'Espanha', tipo: 'internacional' },
  'roma': { nome: 'Roma', pais: 'It√°lia', tipo: 'internacional' }
};

const TIPOS_CABINE_CRUZEIRO = {
  'interna': { nome: 'Cabine Interna', caracteristica: 'sem janela' },
  'externa': { nome: 'Cabine Externa', caracteristica: 'com janela' },
  'suite': { nome: 'Su√≠te', caracteristica: 'luxo' },
  'grand suite': { nome: 'Grand Su√≠te', caracteristica: 'luxo premium' },
  'su√≠te com varanda': { nome: 'Su√≠te com Varanda', caracteristica: 'varanda privativa' },
  'grand su√≠te com varanda': { nome: 'Grand Su√≠te com Varanda', caracteristica: 'luxo com varanda' }
};

const PLANOS_CRUZEIRO = {
  'my cruise': { nome: 'My Cruise', tipo: 'basico' },
  'all inclusive': { nome: 'All Inclusive', tipo: 'completo' },
  'my drinks': { nome: 'My Drinks', tipo: 'bebidas' },
  'my drinks plus': { nome: 'My Drinks Plus', tipo: 'bebidas_premium' }
};

const TIPOS_HOSPEDAGEM = {
  'hotel': { nome: 'Hotel', tipo: 'tradicional' },
  'resort': { nome: 'Resort', tipo: 'all_inclusive' },
  'pousada': { nome: 'Pousada', tipo: 'local' },
  'flat': { nome: 'Flat', tipo: 'apartamento' },
  'aparthotel': { nome: 'Apart Hotel', tipo: 'apartamento' },
  'inn': { nome: 'Inn', tipo: 'boutique' }
};

const REGIMES_HOSPEDAGEM = {
  'cafe da manha': { nome: 'Caf√© da Manh√£', tipo: 'meia_pensao' },
  'caf√© da manh√£': { nome: 'Caf√© da Manh√£', tipo: 'meia_pensao' },
  'meia pensao': { nome: 'Meia Pens√£o', tipo: 'meia_pensao' },
  'pensao completa': { nome: 'Pens√£o Completa', tipo: 'pensao_completa' },
  'all inclusive': { nome: 'All Inclusive', tipo: 'tudo_incluso' },
  'sem refeicao': { nome: 'Sem Refei√ß√£o', tipo: 'hospedagem_simples' }
};

const TIPOS_QUARTO_HOTEL = {
  'standard': { nome: 'Standard', categoria: 'basico' },
  'standard frete': { nome: 'Standard Frete', categoria: 'basico' },
  'superior': { nome: 'Superior', categoria: 'intermediario' },
  'luxo': { nome: 'Luxo', categoria: 'premium' },
  'suite': { nome: 'Su√≠te', categoria: 'premium' },
  'master': { nome: 'Master', categoria: 'premium' },
  'promo': { nome: 'Promocional', categoria: 'promocional' },
  'frete': { nome: 'Frete', categoria: 'basico' },
  'apartamento': { nome: 'Apartamento', categoria: 'apartamento' },
  'apartamento familia': { nome: 'Apartamento Fam√≠lia', categoria: 'familia' },
  's2c': { nome: 'Apartamento Fam√≠lia Queen + Bicama', categoria: 'familia' },
  's2d': { nome: 'Apartamento Fam√≠lia Queen + Bicama Vista Mar', categoria: 'familia_premium' }
};

const CATEGORIAS_HOTEL = {
  'preferencial': { nome: 'Preferencial', tipo: 'parceria_especial' },
  'executivo': { nome: 'Executivo', tipo: 'business' },
  'luxo': { nome: 'Luxo', tipo: 'premium' },
  'economico': { nome: 'Econ√¥mico', tipo: 'basico' },
  'econ√¥mico': { nome: 'Econ√¥mico', tipo: 'basico' }
};

const POLITICAS_CANCELAMENTO = {
  'reembolsavel': { nome: 'Reembols√°vel', flexibilidade: 'alta' },
  'reembols√°vel': { nome: 'Reembols√°vel', flexibilidade: 'alta' },
  'nao reembolsavel': { nome: 'N√£o Reembols√°vel', flexibilidade: 'baixa' },
  'n√£o reembols√°vel': { nome: 'N√£o Reembols√°vel', flexibilidade: 'baixa' },
  'flexivel': { nome: 'Flex√≠vel', flexibilidade: 'media' },
  'flex√≠vel': { nome: 'Flex√≠vel', flexibilidade: 'media' }
};

const SERVICOS_PACOTE = {
  'transporte aereo': 'Transporte A√©reo',
  'hospedagem': 'Hospedagem', 
  'transporte': 'Transfers',
  'transfer': 'Transfers',
  'city tour': 'City Tour',
  'by night': 'By Night',
  'atividades': 'Atividades Inclusas',
  'passeios': 'Passeios',
  'receptivo': 'Receptivo Local'
};

const AEROPORTOS_BRASILEIROS = {
  'gru': { nome: 'S√£o Paulo/Guarulhos', cidade: 'S√£o Paulo', tipo: 'internacional' },
  'cgh': { nome: 'S√£o Paulo/Congonhas', cidade: 'S√£o Paulo', tipo: 'nacional' },
  'vcp': { nome: 'Campinas/Viracopos', cidade: 'Campinas', tipo: 'internacional' },
  'sdu': { nome: 'Rio de Janeiro/Santos Dumont', cidade: 'Rio de Janeiro', tipo: 'nacional' },
  'gig': { nome: 'Rio de Janeiro/Gale√£o', cidade: 'Rio de Janeiro', tipo: 'internacional' },
  'bps': { nome: 'Porto Seguro', cidade: 'Porto Seguro', tipo: 'nacional' },
  'ssa': { nome: 'Salvador', cidade: 'Salvador', tipo: 'internacional' },
  'rec': { nome: 'Recife', cidade: 'Recife', tipo: 'internacional' },
  'for': { nome: 'Fortaleza', cidade: 'Fortaleza', tipo: 'internacional' },
  'bsb': { nome: 'Bras√≠lia', cidade: 'Bras√≠lia', tipo: 'internacional' }
};

const AEROPORTOS_INTERNACIONAIS = {
  'cdg': { nome: 'Paris/Charles de Gaulle', cidade: 'Paris', pais: 'Fran√ßa' },
  'lin': { nome: 'Mil√£o/Linate', cidade: 'Mil√£o', pais: 'It√°lia' },
  'mxp': { nome: 'Mil√£o/Malpensa', cidade: 'Mil√£o', pais: 'It√°lia' },
  'fco': { nome: 'Roma/Fiumicino', cidade: 'Roma', pais: 'It√°lia' },
  'mad': { nome: 'Madrid/Barajas', cidade: 'Madrid', pais: 'Espanha' },
  'lis': { nome: 'Lisboa', cidade: 'Lisboa', pais: 'Portugal' },
  'lhr': { nome: 'Londres/Heathrow', cidade: 'Londres', pais: 'Reino Unido' },
  'jfk': { nome: 'Nova York/JFK', cidade: 'Nova York', pais: 'Estados Unidos' },
  'mia': { nome: 'Miami', cidade: 'Miami', pais: 'Estados Unidos' }
};

const TODOS_AEROPORTOS = { ...AEROPORTOS_BRASILEIROS, ...AEROPORTOS_INTERNACIONAIS };

const PADROES_VOOS = {
  'voo_direto': /voo\s+direto/gi,
  'uma_conexao': /(uma\s+escala|1\s+escala|uma\s+conex√£o|1\s+conex√£o)/gi,
  'duas_conexoes': /(duas\s+escalas|2\s+escalas|duas\s+conex√µes|2\s+conex√µes)/gi,
  'multiplas_conexoes': /(tr√™s\s+escalas|3\s+escalas|m√∫ltiplas\s+escalas)/gi
};

// ================================================================================
// 2. üéØ FUN√á√ÉO PRINCIPAL DE AN√ÅLISE
// ================================================================================

// CORRE√á√ÉO: Removido 'export' da linha abaixo
function analisarTextoCompleto(formData) {
  console.log("üîç === AN√ÅLISE COMPLETA v11.0 INICIADA ===");
  
  const textoCompleto = construirTextoAnalise(formData);
  console.log(`üìã Texto para an√°lise: ${textoCompleto.length} caracteres`);
  
  // PRIORIDADE: Dados HTML sobre extra√ß√£o
  const dadosHTML = extrairDadosHTML(formData);
  console.log("üéØ Dados HTML priorit√°rios:", dadosHTML);
  
  // An√°lise em m√∫ltiplas camadas
  let analise = {
    // Dados HTML com prioridade
    ...dadosHTML,
    
    // Detec√ß√£o b√°sica
    ...detectarTipoViagem(textoCompleto),
    
    // Extra√ß√£o de dados espec√≠ficos
    ...extrairDadosVoo(textoCompleto),
    
    // Extra√ß√£o de dados de cruzeiros
    ...extrairDadosCruzeiro(textoCompleto),
    
    // Extra√ß√£o de dados de pacotes
    ...extrairDadosPacote(textoCompleto),
    
    // Extra√ß√£o de dados de hot√©is
    ...extrairDadosHotel(textoCompleto),
    
    // An√°lise de pre√ßos CVC
    ...analisarPrecosCVC(textoCompleto),
    
    // Detec√ß√£o de m√∫ltiplas op√ß√µes
    ...detectarMultiplasOpcoes(textoCompleto),
    
    // Detec√ß√£o de multitrechos avan√ßados
    ...detectarMultitrechoAvancado(textoCompleto),
    
    // An√°lise de complexidade
    ...calcularComplexidade(textoCompleto),
    
    // Contexto adicional
    contexto: extrairContextoCompleto(formData),
    timestamp: new Date().toISOString()
  };
  
  // Aplicar prioridade HTML sobre extra√ß√£o
  analise = aplicarPrioridadeHTML(analise, dadosHTML);
  
  // Determinar tipo principal e confian√ßa
  analise.tipoDetectado = determinarTipoPrincipal(analise);
  analise.confiancaDeteccao = calcularConfiancaDeteccao(analise);
  
  // Log detalhado da an√°lise
  logAnaliseCompleta(analise);
  
  console.log("üîç === AN√ÅLISE COMPLETA FINALIZADA ===");
  return analise;
}

// ================================================================================
// 3. üéØ EXTRA√á√ÉO DE DADOS HTML COM PRIORIDADE
// ================================================================================

function extrairDadosHTML(formData) {
  console.log("üéØ Extraindo dados HTML com prioridade...");
  
  const dadosHTML = {
    destinoHTML: formData.destino?.trim() || null,
    adultosHTML: formData.adultos || null,
    criancasHTML: formData.criancas || null,
    tiposHTML: formData.tipos || [],
    temImagemHTML: !!formData.imagemBase64
  };
  
  console.log("üéØ Dados HTML extra√≠dos:", dadosHTML);
  return dadosHTML;
}

function aplicarPrioridadeHTML(analise, dadosHTML) {
  console.log("üéØ Aplicando prioridade HTML sobre extra√ß√£o...");
  
  // Destino: HTML prevalece
  if (dadosHTML.destinoHTML) {
    analise.dadosVoo = analise.dadosVoo || {};
    analise.dadosVoo.destinoFinal = dadosHTML.destinoHTML;
    console.log(`‚úÖ Destino HTML usado: ${dadosHTML.destinoHTML}`);
  }
  
  // Passageiros: HTML prevalece
  if (dadosHTML.adultosHTML) {
    analise.numeroPassageirosHTML = dadosHTML.adultosHTML;
    console.log(`‚úÖ Adultos HTML: ${dadosHTML.adultosHTML}`);
  }
  
  if (dadosHTML.criancasHTML) {
    analise.numeroCriancasHTML = dadosHTML.criancasHTML;
    console.log(`‚úÖ Crian√ßas HTML: ${dadosHTML.criancasHTML}`);
  }
  
  // Tipos: HTML prevalece
  if (dadosHTML.tiposHTML?.length > 0) {
    analise.tiposHTMLSelecionados = dadosHTML.tiposHTML;
    console.log(`‚úÖ Tipos HTML: ${dadosHTML.tiposHTML.join(', ')}`);
  }
  
  return analise;
}

// ================================================================================
// 4. üåç DETEC√á√ÉO DE MULTITRECHO AVAN√áADO
// ================================================================================

function detectarMultitrechoAvancado(texto) {
  console.log("üåç Detectando multitrecho avan√ßado...");
  
  const multitrecho = {
    isMultitrechoInternacional: false,
    numeroTrechos: 0,
    trechosDetalhados: [],
    companhiaPrincipal: null,
    aeroportosInternacionais: []
  };
  
  const trechosExplicitos = texto.match(/trecho\s*\d+/gi) || [];
  multitrecho.numeroTrechos = trechosExplicitos.length;
  
  if (multitrecho.numeroTrechos > 1) {
    console.log(`‚úÖ ${multitrecho.numeroTrechos} trechos expl√≠citos detectados`);
    
    for (let i = 1; i <= multitrecho.numeroTrechos; i++) {
      const trecho = extrairTrechoEspecifico(texto, i);
      if (trecho) {
        multitrecho.trechosDetalhados.push(trecho);
      }
    }
    
    const aeroportosInternacionais = Object.keys(AEROPORTOS_INTERNACIONAIS);
    const aeroportosDetectados = aeroportosInternacionais.filter(codigo => 
      texto.toLowerCase().includes(codigo.toLowerCase())
    );
    
    if (aeroportosDetectados.length > 0) {
      multitrecho.isMultitrechoInternacional = true;
      multitrecho.aeroportosInternacionais = aeroportosDetectados;
      console.log(`‚úÖ Multitrecho internacional - Aeroportos: ${aeroportosDetectados.join(', ')}`);
    }
    
    const companhias = Object.keys(PADROES_COMPANHIAS);
    multitrecho.companhiaPrincipal = companhias.find(comp => 
      texto.toLowerCase().includes(comp)
    );
  }
  
  return multitrecho;
}

function extrairTrechoEspecifico(texto, numeroTrecho) {
  console.log(`‚úàÔ∏è Extraindo trecho ${numeroTrecho}...`);
  const padraoTrecho = new RegExp(`trecho\\s*${numeroTrecho}[\\s\\S]*?(?=trecho\\s*${numeroTrecho + 1}|f√°cil|n√£o reembols√°vel|total|$)`, 'gi');
  const matchTrecho = padraoTrecho.exec(texto);
  
  if (!matchTrecho) return null;
  
  const textoTrecho = matchTrecho[0];
  const trecho = {
    numero: numeroTrecho,
    horarioSaida: extrairHorario(textoTrecho, 'primeiro'),
    aeroportoSaida: extrairAeroportoTodos(textoTrecho, 'primeiro'),
    horarioChegada: extrairHorario(textoTrecho, 'segundo'),
    aeroportoChegada: extrairAeroportoTodos(textoTrecho, 'segundo'),
    duracao: extrairDuracao(textoTrecho),
    tipoVoo: extrairTipoVoo(textoTrecho),
    data: extrairDataTrecho(textoTrecho)
  };
  
  console.log(`‚úÖ Trecho ${numeroTrecho} extra√≠do:`, trecho);
  return trecho;
}

function extrairAeroportoTodos(texto, posicao = 'primeiro') {
  const todosAeroportos = Object.keys(TODOS_AEROPORTOS);
  const regex = new RegExp(`\\b(${todosAeroportos.join('|')})\\b`, 'gi');
  const matches = [...texto.matchAll(regex)];
  
  if (posicao === 'primeiro' && matches.length > 0) {
    return matches[0][1].toUpperCase();
  } else if (posicao === 'segundo' && matches.length > 1) {
    return matches[1][1].toUpperCase();
  }
  
  return null;
}

function extrairDataTrecho(texto) {
  const padraoData = /(\w+,?\s*\d{1,2}\s+de\s+\w+|\d{1,2}\/\d{1,2})/gi;
  const match = padraoData.exec(texto);
  return match ? match[1] : null;
}

// ================================================================================
// 5. üõ´ DETEC√á√ÉO DE TIPOS
// ================================================================================

function detectarTipoViagem(texto) {
  console.log("üõ´ Detectando tipo de viagem...");
  
  const tipos = {
    isVooNacional: false,
    isVooInternacional: false,
    isMultitrecho: false,
    isCruzeiro: false,
    isHotel: false,
    isPacote: false
  };
  
  const aeroportosBrasileiros = Object.keys(AEROPORTOS_BRASILEIROS);
  const aeroportosInternacionais = Object.keys(AEROPORTOS_INTERNACIONAIS);
  
  const aeroportosBrasDetectados = aeroportosBrasileiros.filter(codigo => 
    texto.toLowerCase().includes(codigo.toLowerCase())
  );
  
  const aeroportosIntDetectados = aeroportosInternacionais.filter(codigo => 
    texto.toLowerCase().includes(codigo.toLowerCase())
  );
  
  if (aeroportosBrasDetectados.length > 0) {
    tipos.isVooNacional = true;
  }
  
  if (aeroportosIntDetectados.length > 0) {
    tipos.isVooInternacional = true;
  }
  
  const companhiasDetectadas = [];
  Object.keys(PADROES_COMPANHIAS).forEach(companhia => {
    if (texto.toLowerCase().includes(companhia)) {
      companhiasDetectadas.push(PADROES_COMPANHIAS[companhia].nome);
      if (PADROES_COMPANHIAS[companhia].tipo.includes('internacional')) {
        tipos.isVooInternacional = true;
      }
    }
  });
  
  const trechos = (texto.match(/trecho\s*\d+/gi) || []).length;
  if (trechos > 1) {
    tipos.isMultitrecho = true;
  }
  
  if (detectarCruzeiro(texto)) tipos.isCruzeiro = true;
  if (detectarPacote(texto)) tipos.isPacote = true;
  if (detectarHotel(texto)) tipos.isHotel = true;
  
  console.log("üõ´ Tipos detectados:", tipos);
  return {
    ...tipos,
    companhiasDetectadas,
    aeroportosDetectados: [...aeroportosBrasDetectados, ...aeroportosIntDetectados]
  };
}

// ================================================================================
// 6. üö¢ DETEC√á√ÉO ESPEC√çFICA DE CRUZEIROS
// ================================================================================

function detectarCruzeiro(texto) {
  console.log("üö¢ Detectando cruzeiros...");
  const palavrasChaveCruzeiro = [
    'embarque:', 'desembarque:', 'navio', 'cruzeiro', 'cabine', 'suite',
    'my cruise', 'all inclusive', 'costa diadema', 'msc', 'noites ‚Ä¢',
    'em navega√ß√£o', 'porto', 'itiner√°rio'
  ];
  const naviosDetectados = Object.keys(NAVIOS_CONHECIDOS).filter(navio => 
    texto.toLowerCase().includes(navio.toLowerCase())
  );
  const companhiasCruzeiroDetectadas = ['costa', 'msc', 'disney', 'royal', 'norwegian'].filter(comp => 
    texto.toLowerCase().includes(comp)
  );
  const portosDetectados = Object.keys(PORTOS_CRUZEIROS).filter(porto => 
    texto.toLowerCase().includes(porto.toLowerCase())
  );
  const isCruzeiro = 
    palavrasChaveCruzeiro.some(palavra => texto.toLowerCase().includes(palavra.toLowerCase())) ||
    naviosDetectados.length > 0 ||
    companhiasCruzeiroDetectadas.length > 0 ||
    (portosDetectados.length > 0 && texto.includes('embarque'));
  
  if (isCruzeiro) {
    console.log("‚úÖ Indicadores de cruzeiro encontrados");
  }
  return isCruzeiro;
}

// ================================================================================
// 7. üì¶ DETEC√á√ÉO ESPEC√çFICA DE PACOTES
// ================================================================================

function detectarPacote(texto) {
  console.log("üì¶ Detectando pacotes...");
  const temHotel = Object.keys(TIPOS_HOSPEDAGEM).some(tipo => texto.toLowerCase().includes(tipo));
  const temVoo = texto.includes('ida') && texto.includes('volta') && (texto.includes('gru') || texto.includes('cgh') || texto.includes('vcp'));
  const temServicosInclusos = Object.keys(SERVICOS_PACOTE).some(servico => texto.toLowerCase().includes(servico));
  const temDesconto = /-\d+%/.test(texto) || /~~R\$/.test(texto);
  const temDiarias = /\d+\s*di√°rias?/.test(texto);
  const temRegime = Object.keys(REGIMES_HOSPEDAGEM).some(regime => texto.toLowerCase().includes(regime));
  const palavrasChavePacote = ['servi√ßos inclusos', 'transporte a√©reo', 'hospedagem', 'city tour', 'by night', 'receptivo', 'transfer', 'aeroporto / hotel', 'cafe da manha', 'standard promo'];
  const temPalavrasChave = palavrasChavePacote.some(palavra => texto.toLowerCase().includes(palavra.toLowerCase()));
  const isPacote = (temHotel && temVoo) || (temHotel && temServicosInclusos) || (temVoo && temDiarias) || (temDesconto && temRegime) || temPalavrasChave;
  if (isPacote) {
    console.log("‚úÖ Indicadores de pacote encontrados");
  }
  return isPacote;
}

// ================================================================================
// 8. üè® DETEC√á√ÉO ESPEC√çFICA DE HOTEL
// ================================================================================

function detectarHotel(texto) {
  console.log("üè® Detectando hotel...");
  
  // Padr√µes espec√≠ficos de hotel
  const padroesHotel = [
    /\*\*(Preferencial|Executivo|Luxo|Econ√¥mico)\*\*/gi,
    /Standard\s+Frete/gi,
    /Apartamento\s+Fam√≠lia/gi,
    /Vista\s+Mar/gi,
    /Reembols√°vel/gi,
    /S2c\s*-\s*Apartamento/gi,
    /S2d\s*-\s*Apartamento/gi
  ];
  
  const temPadraoHotel = padroesHotel.some(padrao => padrao.test(texto));
  
  // Verificar se tem elementos de hotel
  const temHotel = Object.keys(TIPOS_HOSPEDAGEM).some(tipo => 
    texto.toLowerCase().includes(tipo)
  );
  
  const temRegime = Object.keys(REGIMES_HOSPEDAGEM).some(regime => 
    texto.toLowerCase().includes(regime)
  );
  
  const temQuarto = Object.keys(TIPOS_QUARTO_HOTEL).some(tipo => 
    texto.toLowerCase().includes(tipo)
  );
  
  // Verificar se N√ÉO tem elementos de voo
  const temElementosVoo = /\*\*(ida|volta)\*\*/gi.test(texto) || 
                          /(GRU|CGH|VCP|SDU|GIG)/gi.test(texto);
  
  // Palavras-chave de hotel
  const palavrasChaveHotel = ['hospedagem', 'quarto', 'diaria', 'check-in', 'check-out'];
  const temPalavrasChave = palavrasChaveHotel.some(palavra => 
    texto.toLowerCase().includes(palavra)
  );
  
  const isHotel = (temPadraoHotel || temHotel || temRegime || temQuarto || temPalavrasChave) && !temElementosVoo;
  
  if (isHotel) {
    console.log("‚úÖ Hotel detectado (sem voos)");
  }
  
  return isHotel;
}

// ================================================================================
// 9. ‚úàÔ∏è EXTRA√á√ÉO DE DADOS DE VOO
// ================================================================================

function extrairDadosVoo(texto) {
  console.log("‚úàÔ∏è Extraindo dados de voo...");
  
  const dadosVoo = {
    periodo: null,
    origem: null,
    destino: null,
    companhiaPrincipal: null,
    vooIda: null,
    vooVolta: null,
    numeroPassageiros: null,
    classeVoo: 'Econ√¥mica',
    condicoesVoo: []
  };
  
  // Extrair per√≠odo
  const padr√£oPeriodo = /(\d{1,2}\s+de\s+\w+|\d{1,2}\/\d{1,2}).*?(\d{1,2}\s+de\s+\w+|\d{1,2}\/\d{1,2}).*?\((\d+)\s+dias?\s+e\s+(\d+)\s+noites?\)/gi;
  const matchPeriodo = padr√£oPeriodo.exec(texto);
  
  if (matchPeriodo) {
    dadosVoo.periodo = {
      ida: matchPeriodo[1],
      volta: matchPeriodo[2], 
      dias: parseInt(matchPeriodo[3]),
      noites: parseInt(matchPeriodo[4])
    };
    console.log("‚úÖ Per√≠odo extra√≠do:", dadosVoo.periodo);
  }
  
  // Extrair origem e destino
  const padr√£oRota = /\*\*(.*?)\s*-\s*(.*?)\*\*/g;
  const matchRota = padr√£oRota.exec(texto);
  
  if (matchRota) {
    dadosVoo.origem = matchRota[1].trim();
    dadosVoo.destino = matchRota[2].trim();
    console.log(`‚úÖ Rota extra√≠da: ${dadosVoo.origem} ‚Üí ${dadosVoo.destino}`);
  }
  
  // Extrair companhia principal
  const companhias = ['Gol', 'Latam', 'Azul', 'Iberia', 'TAP'];
  dadosVoo.companhiaPrincipal = companhias.find(comp => 
    texto.toLowerCase().includes(comp.toLowerCase())
  );
  
  // Extrair dados de ida
  dadosVoo.vooIda = extrairDadosVooTrecho(texto, 'ida');
  
  // Extrair dados de volta  
  dadosVoo.vooVolta = extrairDadosVooTrecho(texto, 'volta');
  
  // Extrair n√∫mero de passageiros (melhorado para beb√™s e crian√ßas)
  const passageiros = extrairPassageirosCompleto(texto);
  dadosVoo.numeroPassageiros = passageiros.adultos;
  dadosVoo.numeroCriancas = passageiros.criancas;
  dadosVoo.numeroBebes = passageiros.bebes;
  
  console.log("üë• Passageiros detectados:", passageiros);
  
  // Extrair condi√ß√µes
  if (texto.includes('N√£o reembols√°vel')) dadosVoo.condicoesVoo.push('N√£o reembols√°vel');
  if (texto.includes('F√°cil')) dadosVoo.condicoesVoo.push('F√°cil');
  
  console.log("‚úàÔ∏è Dados de voo extra√≠dos:", dadosVoo);
  return { dadosVoo };
}

function extrairDadosVooTrecho(texto, tipoTrecho) {
  console.log(`‚úàÔ∏è Extraindo trecho de ${tipoTrecho}...`);
  
  // Regex para encontrar se√ß√£o ida ou volta
  const padr√£oTrecho = new RegExp(`\\*\\*${tipoTrecho}\\*\\*([\\s\\S]*?)(?=\\*\\*(?:volta|ida)\\*\\*|\\*\\*F√°cil\\*\\*|$)`, 'gi');
  const matchTrecho = padr√£oTrecho.exec(texto);
  
  if (!matchTrecho) return null;
  
  const textoTrecho = matchTrecho[1];
  
  const dadosTrecho = {
    horarioSaida: extrairHorario(textoTrecho),
    aeroportoSaida: extrairAeroporto(textoTrecho, 'primeiro'),
    horarioChegada: extrairHorario(textoTrecho, 'segundo'),  
    aeroportoChegada: extrairAeroporto(textoTrecho, 'segundo'),
    duracao: extrairDuracao(textoTrecho),
    tipoVoo: extrairTipoVoo(textoTrecho)
  };
  
  console.log(`‚úÖ Dados ${tipoTrecho}:`, dadosTrecho);
  return dadosTrecho;
}

// ================================================================================
// 10. üí∞ AN√ÅLISE DE PRE√áOS CVC
// ================================================================================

function analisarPrecosCVC(texto) {
  console.log("üí∞ Analisando pre√ßos CVC...");
  
  const precos = {
    precoTotal: null,
    precoParcelado: null,
    linkCVC: null,
    formaPagamento: null
  };
  
  // Extrair pre√ßo total
  const padr√£oPrecoTotal = /R\$\s*([\d.,]+)/g;
  const matchesPreco = [...texto.matchAll(padr√£oPrecoTotal)];
  
  if (matchesPreco.length > 0) {
    // O primeiro pre√ßo geralmente √© o total do voo
    precos.precoTotal = matchesPreco[0][1];
    console.log(`‚úÖ Pre√ßo total: R$ ${precos.precoTotal}`);
  }
  
  // Extrair parcelamento
  const padr√£oParcelado = /Entrada\s+de\s+R\$\s*([\d.,]+).*?(\d+)x\s+de\s+R\$\s*([\d.,]+)/gi;
  const matchParcelado = padr√£oParcelado.exec(texto);
  
  if (matchParcelado) {
    precos.precoParcelado = {
      entrada: matchParcelado[1],
      parcelas: parseInt(matchParcelado[2]),
      valorParcela: matchParcelado[3]
    };
    console.log("‚úÖ Parcelamento extra√≠do:", precos.precoParcelado);
  }
  
  // Extrair link CVC
  const padr√£oLink = /(https:\/\/www\.cvc\.com\.br\/carrinho-dinamico\/[a-zA-Z0-9]+)/g;
  const matchLink = padr√£oLink.exec(texto);
  
  if (matchLink) {
    precos.linkCVC = matchLink[1];
    console.log("‚úÖ Link CVC extra√≠do");
  }
  
  console.log("üí∞ Pre√ßos analisados:", precos);
  return { precosCVC: precos };
}

// ================================================================================
// 11. üîÑ DETEC√á√ÉO DE M√öLTIPLAS OP√á√ïES
// ================================================================================

function detectarMultiplasOpcoes(texto) {
  console.log("üîÑ Detectando m√∫ltiplas op√ß√µes...");
  
  const multiplasOpcoes = {
    temMultiplasOpcoes: false,
    numeroOpcoes: 1,
    opcoes: []
  };
  
  // Contar quantas companhias aparecem
  const companhias = ['gol', 'latam', 'azul', 'iberia', 'tap'];
  const companhiasEncontradas = companhias.filter(comp => 
    texto.toLowerCase().includes(comp)
  );
  
  // Contar quantos pre√ßos diferentes aparecem
  const precos = [...texto.matchAll(/R\$\s*([\d.,]+)/g)];
  const precosUnicos = [...new Set(precos.map(p => p[1]))];
  
  // Para hot√©is, contar quantas vezes aparece o padr√£o de data
  const padroesDatasHotel = (texto.match(/\*\*\d{1,2}\s+de\s+\w+\s*-\s*\d{1,2}\s+de\s+\w+/gi) || []).length;
  
  if (companhiasEncontradas.length > 1 || precosUnicos.length > 1 || padroesDatasHotel > 1) {
    multiplasOpcoes.temMultiplasOpcoes = true;
    multiplasOpcoes.numeroOpcoes = Math.max(
      companhiasEncontradas.length, 
      precosUnicos.length,
      padroesDatasHotel
    );
    
    console.log(`‚úÖ M√∫ltiplas op√ß√µes detectadas: ${multiplasOpcoes.numeroOpcoes} op√ß√µes`);
    if (companhiasEncontradas.length > 0) console.log(`   Companhias: ${companhiasEncontradas.join(', ')}`);
    if (precosUnicos.length > 0) console.log(`   Pre√ßos √∫nicos: ${precosUnicos.length}`);
    if (padroesDatasHotel > 1) console.log(`   Op√ß√µes de hotel: ${padroesDatasHotel}`);
  }
  
  return multiplasOpcoes;
}

// ================================================================================
// 12. üßÆ FUN√á√ïES AUXILIARES DE EXTRA√á√ÉO
// ================================================================================

function extrairHorario(texto, posicao = 'primeiro') {
  const padr√£oHorario = /\*\*(\d{1,2}:\d{2})\*\*/g;
  const matches = [...texto.matchAll(padr√£oHorario)];
  
  if (posicao === 'primeiro' && matches.length > 0) {
    return matches[0][1];
  } else if (posicao === 'segundo' && matches.length > 1) {
    return matches[1][1];
  }
  
  return null;
}

function extrairAeroporto(texto, posicao = 'primeiro') {
  const aeroportos = Object.keys(AEROPORTOS_BRASILEIROS);
  const regex = new RegExp(`\\b(${aeroportos.join('|')})\\b`, 'gi');
  const matches = [...texto.matchAll(regex)];
  
  if (posicao === 'primeiro' && matches.length > 0) {
    return matches[0][1].toUpperCase();
  } else if (posicao === 'segundo' && matches.length > 1) {
    return matches[1][1].toUpperCase();
  }
  
  return null;
}

function extrairDuracao(texto) {
  const padr√£oDuracao = /(\d+h\s*\d+min|\d+h)/gi;
  const match = padr√£oDuracao.exec(texto);
  return match ? match[1] : null;
}

function extrairTipoVoo(texto) {
  if (PADROES_VOOS.voo_direto.test(texto)) return 'Voo direto';
  if (PADROES_VOOS.uma_conexao.test(texto)) return 'Uma conex√£o';  
  if (PADROES_VOOS.duas_conexoes.test(texto)) return 'Duas conex√µes';
  if (PADROES_VOOS.multiplas_conexoes.test(texto)) return 'M√∫ltiplas conex√µes';
  return 'Voo direto'; // padr√£o
}

function extrairPassageirosCompleto(texto) {
  console.log("üë• Extraindo passageiros completo...");
  
  const passageiros = {
    adultos: 0,
    criancas: 0,
    bebes: 0
  };
  
  // Padr√£o para detectar: "Total (4 Adultos e 1 Beb√™)"
  const padraoCompleto = /Total\s*\(([^)]+)\)/gi;
  const matchCompleto = padraoCompleto.exec(texto);
  
  if (matchCompleto) {
    const textoPassageiros = matchCompleto[1];
    console.log("üìù Texto de passageiros encontrado:", textoPassageiros);
    
    // Extrair adultos - CORRIGIDO para pegar n√∫mero antes da palavra
    const matchAdultos = textoPassageiros.match(/(\d+)\s*[Aa]dulto/);
    if (matchAdultos) {
      passageiros.adultos = parseInt(matchAdultos[1]);
    }
    
    // Extrair crian√ßas - CORRIGIDO
    const matchCriancas = textoPassageiros.match(/(\d+)\s*[Cc]rian√ßa/);
    if (matchCriancas) {
      passageiros.criancas = parseInt(matchCriancas[1]);
    }
    
    // Extrair beb√™s - CORRIGIDO para aceitar singular e plural
    const matchBebes = textoPassageiros.match(/(\d+)\s*[Bb]eb√™/);
    if (matchBebes) {
      passageiros.bebes = parseInt(matchBebes[1]);
    }
    
    console.log(`‚úÖ Passageiros extra√≠dos: ${passageiros.adultos} adulto(s), ${passageiros.criancas} crian√ßa(s), ${passageiros.bebes} beb√™(s)`);
  } else {
    // Fallback para padr√£o simples
    const padraoSimples = /Total\s*\((\d+)\s*(Adulto|Adult)/gi;
    const matchSimples = padraoSimples.exec(texto);
    if (matchSimples) {
      passageiros.adultos = parseInt(matchSimples[1]);
      console.log(`‚úÖ Passageiros simples: ${passageiros.adultos} adulto(s)`);
    }
  }
  
  return passageiros;
}
// ================================================================================
// 13. üö¢ EXTRA√á√ÉO DE DADOS DE CRUZEIRO
// ================================================================================

function extrairDadosCruzeiro(texto) {
  console.log("üö¢ Extraindo dados de cruzeiro...");
  
  const dadosCruzeiro = {
    navio: null,
    companhiaCruzeiro: null,
    duracao: null,
    embarque: null,
    desembarque: null,
    itinerario: [],
    tiposCabine: [],
    planosDisponiveis: [],
    precosCabines: {},
    taxasInclusas: null
  };
  
  // Extrair nome do navio
  const naviosConhecidos = Object.keys(NAVIOS_CONHECIDOS);
  dadosCruzeiro.navio = naviosConhecidos.find(navio => 
    texto.toLowerCase().includes(navio.toLowerCase())
  );
  
  if (dadosCruzeiro.navio) {
    dadosCruzeiro.companhiaCruzeiro = NAVIOS_CONHECIDOS[dadosCruzeiro.navio];
    console.log(`‚úÖ Navio: ${dadosCruzeiro.navio} (${dadosCruzeiro.companhiaCruzeiro})`);
  }
  
  // Extrair dura√ß√£o
  const padr√£oDuracao = /(\d+)\s*noites/gi;
  const matchDuracao = padr√£oDuracao.exec(texto);
  if (matchDuracao) {
    dadosCruzeiro.duracao = `${matchDuracao[1]} noites`;
    console.log(`‚úÖ Dura√ß√£o: ${dadosCruzeiro.duracao}`);
  }
  
  // Extrair embarque e desembarque
  const padr√£oEmbarque = /embarque:\s*([^,\n]+)/gi;
  const matchEmbarque = padr√£oEmbarque.exec(texto);
  if (matchEmbarque) {
    dadosCruzeiro.embarque = matchEmbarque[1].trim();
  }
  
  const padr√£oDesembarque = /desembarque:\s*([^,\n]+)/gi;
  const matchDesembarque = padr√£oDesembarque.exec(texto);
  if (matchDesembarque) {
    dadosCruzeiro.desembarque = matchDesembarque[1].trim();
  }
  
  // Extrair itiner√°rio
  dadosCruzeiro.itinerario = extrairItinerarioCruzeiro(texto);
  
  // Extrair tipos de cabine dispon√≠veis
  dadosCruzeiro.tiposCabine = Object.keys(TIPOS_CABINE_CRUZEIRO).filter(tipo => 
    texto.toLowerCase().includes(tipo)
  );
  
  // Extrair planos dispon√≠veis
  dadosCruzeiro.planosDisponiveis = Object.keys(PLANOS_CRUZEIRO).filter(plano => 
    texto.toLowerCase().includes(plano)
  );
  
  // Extrair pre√ßos por cabine
  dadosCruzeiro.precosCabines = extrairPrecosCabines(texto);
  
  // Extrair taxas
  const padraoTaxas = /taxas?\s*e?\s*impostos?\s*r\$\s*([\d.,]+)/gi;
  const matchTaxas = padraoTaxas.exec(texto);
  if (matchTaxas) {
    dadosCruzeiro.taxasInclusas = matchTaxas[1];
    console.log(`‚úÖ Taxas: R$ ${dadosCruzeiro.taxasInclusas}`);
  }
  
  console.log("üö¢ Dados de cruzeiro extra√≠dos:", dadosCruzeiro);
  return { dadosCruzeiro };
}

function extrairItinerarioCruzeiro(texto) {
  console.log("üó∫Ô∏è Extraindo itiner√°rio de cruzeiro...");
  
  const itinerario = [];
  
  const padr√£oItinerario = /(\d+)\.\s*(\w+)\.\s*(\d{2}\.\d{2}\.\d{2})\s*([^]*?)(?=\d+\.\s*\w+\.\s*\d{2}\.\d{2}\.\d{2}|$)/gi;
  
  let match;
  while ((match = padr√£oItinerario.exec(texto)) !== null) {
    const dia = {
      numero: parseInt(match[1]),
      diaSemana: match[2],
      data: match[3],
      detalhes: match[4].trim()
    };
    
    const detalhes = match[4];
    const linhas = detalhes.split('\n').filter(linha => linha.trim());
    
    if (linhas.length > 0) {
      dia.porto = linhas[0].replace(/\*\*/g, '').trim();
      
      const chegadaMatch = detalhes.match(/chegada\s*(\d{2}:\d{2})/gi);
      const saidaMatch = detalhes.match(/sa√≠da\s*(\d{2}:\d{2})/gi);
      
      if (chegadaMatch) dia.chegada = chegadaMatch[0].replace(/chegada\s*/gi, '');
      if (saidaMatch) dia.saida = saidaMatch[0].replace(/sa√≠da\s*/gi, '');
    }
    
    itinerario.push(dia);
  }
  
  console.log(`‚úÖ Itiner√°rio extra√≠do: ${itinerario.length} dias`);
  return itinerario;
}

function extrairPrecosCabines(texto) {
  console.log("üí∞ Extraindo pre√ßos das cabines...");
  
  const precos = {};
  
  const tiposCabine = Object.keys(TIPOS_CABINE_CRUZEIRO);
  
  tiposCabine.forEach(tipo => {
    const regex = new RegExp(`${tipo}[^R]*R\\$\\s*([\\d.,]+)`, 'gi');
    const match = regex.exec(texto);
    
    if (match) {
      precos[tipo] = match[1];
      console.log(`‚úÖ ${tipo}: R$ ${match[1]}`);
    }
  });
  
  return precos;
}

// ================================================================================
// 14. üì¶ EXTRA√á√ÉO DE DADOS DE PACOTE
// ================================================================================

function extrairDadosPacote(texto) {
  console.log("üì¶ Extraindo dados de pacote...");
  
  const dadosPacote = {
    nomeHotel: null,
    enderecoHotel: null,
    avaliacaoHotel: null,
    tipoQuarto: null,
    regime: null,
    servicosInclusos: [],
    precoOriginal: null,
    precoFinal: null,
    desconto: null,
    temDesconto: false,
    vooIncluido: false,
    transferIncluido: false,
    atividadesInclusas: []
  };
  
  const padraoHotel = /\*\*([^*]+hotel[^*]*)\*\*/gi;
  const matchHotel = padraoHotel.exec(texto);
  if (matchHotel) {
    dadosPacote.nomeHotel = matchHotel[1].trim();
    console.log(`‚úÖ Hotel: ${dadosPacote.nomeHotel}`);
  }
  
  const linhas = texto.split('\n');
  const linhaHotel = linhas.findIndex(linha => 
    linha.toLowerCase().includes('hotel') && linha.includes('**')
  );
  
  if (linhaHotel >= 0 && linhas[linhaHotel + 1]) {
    const proximaLinha = linhas[linhaHotel + 1].trim();
    if (!proximaLinha.includes('**') && proximaLinha.length > 10) {
      dadosPacote.enderecoHotel = proximaLinha;
      console.log(`‚úÖ Endere√ßo: ${dadosPacote.enderecoHotel}`);
    }
  }
  
  const tiposQuarto = Object.keys(TIPOS_QUARTO_HOTEL);
  dadosPacote.tipoQuarto = tiposQuarto.find(tipo => 
    texto.toLowerCase().includes(tipo)
  );
  
  const regimes = Object.keys(REGIMES_HOSPEDAGEM);
  dadosPacote.regime = regimes.find(regime => 
    texto.toLowerCase().includes(regime)
  );
  
  dadosPacote.servicosInclusos = Object.keys(SERVICOS_PACOTE).filter(servico => 
    texto.toLowerCase().includes(servico)
  ).map(servico => SERVICOS_PACOTE[servico]);
  
  const padraoPrecoRiscado = /~~R\$\s*([\d.,]+)~~.*?R\$\s*([\d.,]+)/gi;
  const matchPrecoDesconto = padraoPrecoRiscado.exec(texto);
  
  if (matchPrecoDesconto) {
    dadosPacote.precoOriginal = matchPrecoDesconto[1];
    dadosPacote.precoFinal = matchPrecoDesconto[2];
    dadosPacote.temDesconto = true;
    
    const original = parseFloat(dadosPacote.precoOriginal.replace(/\./g, '').replace(',', '.'));
    const final = parseFloat(dadosPacote.precoFinal.replace(/\./g, '').replace(',', '.'));
    const descontoCalc = Math.round(((original - final) / original) * 100);
    dadosPacote.desconto = `${descontoCalc}%`;
    
    console.log(`‚úÖ Pre√ßos: De R$ ${dadosPacote.precoOriginal} por R$ ${dadosPacote.precoFinal} (${dadosPacote.desconto})`);
  } else {
    const padraoPreco = /Total.*?R\$\s*([\d.,]+)/gi;
    const matchPreco = padraoPreco.exec(texto);
    if (matchPreco) {
      dadosPacote.precoFinal = matchPreco[1];
    }
  }
  
  const padraoDesconto = /-(\d+)%/g;
  const matchDesconto = padraoDesconto.exec(texto);
  if (matchDesconto) {
    dadosPacote.desconto = matchDesconto[0];
    dadosPacote.temDesconto = true;
  }
  
  dadosPacote.vooIncluido = texto.includes('ida') && texto.includes('volta');
  
  dadosPacote.transferIncluido = 
    texto.toLowerCase().includes('transfer') || 
    texto.toLowerCase().includes('aeroporto / hotel') ||
    texto.toLowerCase().includes('transporte');
  
  if (texto.toLowerCase().includes('city tour')) {
    dadosPacote.atividadesInclusas.push('City Tour');
  }
  if (texto.toLowerCase().includes('by night')) {
    dadosPacote.atividadesInclusas.push('By Night');
  }
  
  console.log("üì¶ Dados de pacote extra√≠dos:", dadosPacote);
  return { dadosPacote };
}


// ================================================================================
// 15. üè® EXTRA√á√ÉO DE DADOS DE HOTEL
// ================================================================================

function extrairDadosHotel(texto) {
  console.log("üè® Extraindo dados de hotel...");
  
  const dadosHotel = {
    periodo: null,
    destino: null,
    categoria: null,
    opcoes: []
  };
  
  // Extrair per√≠odo (comum a todas op√ß√µes)
  const padraoPeriodo = /(\d{1,2}\s+de\s+\w+)\s*-\s*(\d{1,2}\s+de\s+\w+).*?\((\d+)\s+dias?\s+e\s+(\d+)\s+noites?\)/gi;
  const matchPeriodo = padraoPeriodo.exec(texto);
  if (matchPeriodo) {
    dadosHotel.periodo = {
      checkin: matchPeriodo[1],
      checkout: matchPeriodo[2],
      dias: parseInt(matchPeriodo[3]),
      noites: parseInt(matchPeriodo[4])
    };
    console.log("‚úÖ Per√≠odo do hotel:", dadosHotel.periodo);
  }
  
  // Extrair destino
  const padraoDestino = /\*\*([^*]+)\s+-\s+([^*]+)\*\*/gi;
  const matchDestino = padraoDestino.exec(texto);
  if (matchDestino && !matchDestino[1].match(/\d{1,2}\s+de\s+\w+/)) {
    dadosHotel.destino = {
      cidade: matchDestino[1].trim(),
      estado: matchDestino[2].trim()
    };
    console.log(`‚úÖ Destino: ${dadosHotel.destino.cidade}, ${dadosHotel.destino.estado}`);
  }
  
  // Dividir texto em blocos de op√ß√µes
  // Cada op√ß√£o come√ßa com a data
  const blocos = texto.split(/(?=\*\*\d{1,2}\s+de\s+\w+\s*-\s*\d{1,2}\s+de\s+\w+.*?\*\*)/);
  
  blocos.forEach((bloco, index) => {
    if (index === 0 && !bloco.includes('**')) return; // Pular cabe√ßalho vazio
    
    const opcao = {
      categoria: null,
      nomeHotel: null,
      endereco: null,
      tipoQuarto: null,
      regime: null,
      politicaCancelamento: null,
      passageiros: null,
      precoTotal: null
    };
    
    // Extrair categoria (Preferencial, etc)
    const matchCategoria = /\*\*(Preferencial|Executivo|Luxo|Econ√¥mico)\*\*/gi.exec(bloco);
    if (matchCategoria) opcao.categoria = matchCategoria[1];
    
    // Extrair nome do hotel
    const linhas = bloco.split('\n');
    for (let i = 0; i < linhas.length; i++) {
      const linha = linhas[i];
      
      // Nome do hotel vem ap√≥s categoria
      if (opcao.categoria && linha.includes('**') && 
          !linha.includes(opcao.categoria) && 
          !linha.includes(' de ') &&
          !linha.includes('Reembols√°vel') &&
          !linha.includes('R$')) {
        const hotelMatch = linha.match(/\*\*([^*]+)\*\*/);
        if (hotelMatch) {
          opcao.nomeHotel = hotelMatch[1].trim();
          
          // Pr√≥xima linha √© o endere√ßo
          if (linhas[i + 1] && !linhas[i + 1].includes('**')) {
            opcao.endereco = linhas[i + 1].trim();
          }
        }
      }
      
      // Tipo de quarto (padr√£o: **1 Standard Frete** ou **1 S2c - Apartamento...**)
      if (linha.match(/\*\*\d+\s+[^*]+\*\*/)) {
        const quartoMatch = linha.match(/\*\*\d+\s+([^*]+)\*\*/);
        if (quartoMatch) {
          opcao.tipoQuarto = quartoMatch[1].trim();
        }
      }
      
      // Regime
      if (linha.toLowerCase().match(/caf√© da manh√£|meia pens√£o|pens√£o completa|all inclusive/)) {
        opcao.regime = linha.trim();
      }
      
      // Pol√≠tica de cancelamento
      if (linha.match(/\*\*(Reembols√°vel|N√£o reembols√°vel)\*\*/)) {
        const cancelMatch = linha.match(/\*\*([^*]+)\*\*/);
        if (cancelMatch) {
          opcao.politicaCancelamento = cancelMatch[1].trim();
        }
      }
      
      // Passageiros e pre√ßo
      if (linha.includes('Total')) {
        const matchPassageiros = /Total\s*\(([^)]+)\)/gi.exec(linha);
        if (matchPassageiros) opcao.passageiros = matchPassageiros[1];
        
        const matchPreco = /R\$\s*([\d.,]+)/g.exec(linha);
        if (matchPreco) opcao.precoTotal = matchPreco[1];
      }
    }
    
    // Adicionar op√ß√£o se tiver dados v√°lidos
    if (opcao.nomeHotel && opcao.precoTotal) {
      dadosHotel.opcoes.push(opcao);
      console.log(`‚úÖ Hotel ${dadosHotel.opcoes.length}: ${opcao.nomeHotel} - R$ ${opcao.precoTotal}`);
      console.log(`   Categoria: ${opcao.categoria}`);
      console.log(`   Quarto: ${opcao.tipoQuarto}`);
      console.log(`   Regime: ${opcao.regime}`);
      console.log(`   Cancelamento: ${opcao.politicaCancelamento}`);
    }
  });
  
  console.log(`üè® Total de op√ß√µes de hotel extra√≠das: ${dadosHotel.opcoes.length}`);
  return { dadosHotel };
}

// ================================================================================
// 16. üìä AN√ÅLISE DE COMPLEXIDADE E CONTEXTO
// ================================================================================

function calcularComplexidade(textoCompleto) {
  let pontuacaoComplexidade = 0;
  
  // Fatores que aumentam complexidade
  if ((textoCompleto.match(/conex√£o|escala/gi) || []).length > 0) pontuacaoComplexidade += 20;
  if ((textoCompleto.match(/trecho/gi) || []).length > 1) pontuacaoComplexidade += 30;
  if ((textoCompleto.match(/R\$/gi) || []).length > 2) pontuacaoComplexidade += 15;
  if (textoCompleto.length > 1000) pontuacaoComplexidade += 10;
  
  let nivelComplexidade;
  if (pontuacaoComplexidade >= 50) nivelComplexidade = 'muito_alta';
  else if (pontuacaoComplexidade >= 30) nivelComplexidade = 'alta';
  else if (pontuacaoComplexidade >= 15) nivelComplexidade = 'media';
  else nivelComplexidade = 'baixa';
  
  return {
    complexidade: nivelComplexidade,
    pontuacaoComplexidade
  };
}

function extrairContextoCompleto(formData) {
  return {
    temImagem: !!formData.imagemBase64,
    tamanhoTexto: (formData.observacoes || '').length,
    temDestino: !!formData.destino,
    tiposSelecionados: formData.tipos || [],
    numeroAdultos: formData.adultos || 1,
    numeroCriancas: formData.criancas || 0
  };
}

// ================================================================================
// 17. üéØ DETERMINA√á√ÉO DO TIPO PRINCIPAL
// ================================================================================

function determinarTipoPrincipal(analise) {
  console.log("üéØ Determinando tipo principal...");
  
  // Prioridade 1: Hot√©is com m√∫ltiplas op√ß√µes
  if (analise.isHotel && analise.dadosHotel?.opcoes?.length > 0) {
    const numOpcoes = analise.dadosHotel.opcoes.length;
    const categoria = analise.dadosHotel.opcoes[0]?.categoria?.toLowerCase().replace(/\s+/g, '_') || 'generico';
    return `hotel_${categoria}_${numOpcoes}_opcoes`;
  }
  
  // Prioridade 2: Pacotes (hotel + voo)
  if (analise.isPacote) {
    const nomeHotel = analise.dadosPacote?.nomeHotel?.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '') || 'generico';
    const temDesconto = analise.dadosPacote?.temDesconto ? 'promocional' : 'regular';
    return `pacote_${nomeHotel.substring(0, 20)}_${temDesconto}`;
  }
  
  // Prioridade 3: Cruzeiros
  if (analise.isCruzeiro) {
    const companhiaCruzeiro = analise.dadosCruzeiro?.companhiaCruzeiro?.toLowerCase().replace(/\s+/g, '_') || 'generico';
    const navio = analise.dadosCruzeiro?.navio?.toLowerCase().replace(/\s+/g, '_') || 'generico';
    return `cruzeiro_${companhiaCruzeiro}_${navio}`;
  }
  
  // Prioridade 4: Multitrecho internacional
  if (analise.isMultitrechoInternacional || 
      (analise.isMultitrecho && analise.isVooInternacional)) {
    const companhia = analise.companhiaPrincipal || 
                      analise.companhiasDetectadas?.[0]?.toLowerCase().replace(/\s+/g, '_');
    return `multitrecho_internacional_${companhia || 'generico'}`;
  }
  
  // Prioridade 5: Multitrecho nacional
  if (analise.isMultitrecho) {
    return 'multitrecho_nacional';
  }
  
  // Prioridade 6: Voo internacional
  if (analise.isVooInternacional) {
    const companhia = analise.companhiasDetectadas?.[0]?.toLowerCase().replace(/\s+/g, '_');
    return `aereo_internacional_${companhia || 'generico'}`;
  }
  
  // Prioridade 7: Voo nacional
  if (analise.isVooNacional) {
    const companhia = analise.companhiasDetectadas?.[0]?.toLowerCase();
    return `aereo_nacional_${companhia || 'simples'}`;
  }
  
  return 'generico';
}

function calcularConfiancaDeteccao(analise) {
  let confianca = 0.5; // base
  
  if (analise.companhiasDetectadas?.length > 0) confianca += 0.2;
  if (analise.aeroportosDetectados?.length > 0) confianca += 0.15;
  if (analise.dadosVoo?.periodo) confianca += 0.1;
  if (analise.precosCVC?.precoTotal) confianca += 0.1;
  if (analise.dadosVoo?.origem && analise.dadosVoo?.destino) confianca += 0.1;
  
  if (analise.numeroTrechos > 1 && analise.trechosDetalhados?.length > 1) {
    confianca += 0.2;
  }
  
  if (analise.dadosHotel?.opcoes?.length > 0) {
    confianca += 0.15 + (analise.dadosHotel.opcoes.length * 0.05);
  }
  
  if (analise.destinoHTML || analise.adultosHTML) confianca += 0.05;
  
  return Math.min(confianca, 0.98); // m√°ximo 98%
}

// ================================================================================
// 18. üìä LOG DE AN√ÅLISE COMPLETA
// ================================================================================

function logAnaliseCompleta(analise) {
  console.log("üîç === RESULTADO DA AN√ÅLISE COMPLETA ===");
  console.log(`üéØ Tipo principal: ${analise.tipoDetectado}`);
  console.log(`üìä Confian√ßa: ${(analise.confiancaDeteccao * 100).toFixed(1)}%`);
  console.log(`‚ö° Complexidade: ${analise.complexidade}`);
  console.log(`üè¢ Companhias: ${analise.companhiasDetectadas?.join(', ') || 'nenhuma'}`);
  console.log(`‚úàÔ∏è Aeroportos: ${analise.aeroportosDetectados?.join(', ') || 'nenhum'}`);
  console.log(`üí∞ Pre√ßo detectado: ${analise.precosCVC?.precoTotal ? 'R$ ' + analise.precosCVC.precoTotal : 'n√£o detectado'}`);
  console.log(`üîÑ M√∫ltiplas op√ß√µes: ${analise.temMultiplasOpcoes ? `SIM (${analise.numeroOpcoes})` : 'N√ÉO'}`);
  
  if (analise.numeroTrechos > 1) {
    console.log(`üåç Multitrecho: ${analise.numeroTrechos} trechos`);
    console.log(`   Internacional: ${analise.isMultitrechoInternacional ? 'SIM' : 'N√ÉO'}`);
    console.log(`   Aeroportos internacionais: ${analise.aeroportosInternacionais?.join(', ') || 'nenhum'}`);
  }
  
  if (analise.dadosVoo?.numeroPassageiros || analise.dadosVoo?.numeroCriancas || analise.dadosVoo?.numeroBebes) {
    const adultos = analise.dadosVoo.numeroPassageiros || 0;
    const criancas = analise.dadosVoo.numeroCriancas || 0;
    const bebes = analise.dadosVoo.numeroBebes || 0;
    console.log(`üë• Passageiros: ${adultos} adulto(s), ${criancas} crian√ßa(s), ${bebes} beb√™(s)`);
  }
  
  if (analise.destinoHTML || analise.adultosHTML) {
    console.log("üéØ Dados HTML priorit√°rios:");
    if (analise.destinoHTML) console.log(`   Destino: ${analise.destinoHTML}`);
    if (analise.adultosHTML) console.log(`   Adultos: ${analise.adultosHTML}`);
    if (analise.criancasHTML) console.log(`   Crian√ßas: ${analise.criancasHTML}`);
  }
  
  if (analise.dadosVoo?.origem && analise.dadosVoo?.destino) {
    console.log(`üó∫Ô∏è Rota extra√≠da: ${analise.dadosVoo.origem} ‚Üí ${analise.dadosVoo.destino}`);
  }
  
  if (analise.isHotel && analise.dadosHotel) {
    console.log("üè® Dados de hot√©is:");
    if (analise.dadosHotel.periodo) {
      console.log(`   - Per√≠odo: ${analise.dadosHotel.periodo.checkin} a ${analise.dadosHotel.periodo.checkout}`);
      console.log(`   - Dura√ß√£o: ${analise.dadosHotel.periodo.dias} dias, ${analise.dadosHotel.periodo.noites} noites`);
    }
    if (analise.dadosHotel.destino) {
      console.log(`   - Destino: ${analise.dadosHotel.destino.cidade}, ${analise.dadosHotel.destino.estado}`);
    }
    if (analise.dadosHotel.opcoes?.length > 0) {
      console.log(`   - Total de op√ß√µes: ${analise.dadosHotel.opcoes.length}`);
      analise.dadosHotel.opcoes.forEach((opcao, idx) => {
        console.log(`   üìç Op√ß√£o ${idx + 1}:`);
        console.log(`      Hotel: ${opcao.nomeHotel}`);
        console.log(`      Categoria: ${opcao.categoria}`);
        console.log(`      Quarto: ${opcao.tipoQuarto}`);
        console.log(`      Regime: ${opcao.regime}`);
        console.log(`      Cancelamento: ${opcao.politicaCancelamento}`);
        console.log(`      Passageiros: ${opcao.passageiros}`);
        console.log(`      Pre√ßo: R$ ${opcao.precoTotal}`);
      });
    }
  }
  
  if (analise.isPacote && analise.dadosPacote) {
    console.log("üì¶ Dados do pacote:");
    if (analise.dadosPacote.nomeHotel) console.log(`   - Hotel: ${analise.dadosPacote.nomeHotel}`);
    if (analise.dadosPacote.tipoQuarto) console.log(`   - Quarto: ${analise.dadosPacote.tipoQuarto}`);
    if (analise.dadosPacote.regime) console.log(`   - Regime: ${analise.dadosPacote.regime}`);
    if (analise.dadosPacote.temDesconto) {
      console.log(`   - Pre√ßos: De R$ ${analise.dadosPacote.precoOriginal} por R$ ${analise.dadosPacote.precoFinal} (${analise.dadosPacote.desconto})`);
    } else if (analise.dadosPacote.precoFinal) {
      console.log(`   - Pre√ßo: R$ ${analise.dadosPacote.precoFinal}`);
    }
    if (analise.dadosPacote.servicosInclusos?.length > 0) {
      console.log(`   - Servi√ßos: ${analise.dadosPacote.servicosInclusos.join(', ')}`);
    }
    console.log(`   - Voo incluso: ${analise.dadosPacote.vooIncluido ? 'SIM' : 'N√ÉO'}`);
    console.log(`   - Transfer incluso: ${analise.dadosPacote.transferIncluido ? 'SIM' : 'N√ÉO'}`);
  }
  
  if (analise.isCruzeiro && analise.dadosCruzeiro) {
    console.log("üö¢ Dados do cruzeiro:");
    if (analise.dadosCruzeiro.navio) console.log(`   - Navio: ${analise.dadosCruzeiro.navio}`);
    if (analise.dadosCruzeiro.companhiaCruzeiro) console.log(`   - Companhia: ${analise.dadosCruzeiro.companhiaCruzeiro}`);
    if (analise.dadosCruzeiro.duracao) console.log(`   - Dura√ß√£o: ${analise.dadosCruzeiro.duracao}`);
    if (analise.dadosCruzeiro.embarque) console.log(`   - Embarque: ${analise.dadosCruzeiro.embarque}`);
    if (analise.dadosCruzeiro.tiposCabine?.length > 0) console.log(`   - Cabines: ${analise.dadosCruzeiro.tiposCabine.join(', ')}`);
    
    const precos = Object.entries(analise.dadosCruzeiro.precosCabines || {});
    if (precos.length > 0) {
      console.log("   - Pre√ßos:");
      precos.forEach(([tipo, preco]) => console.log(`     ${tipo}: R$ ${preco}`));
    }
  }
  
  if (analise.dadosVoo?.destinoFinal) {
    console.log(`üó∫Ô∏è Destino final (HTML): ${analise.dadosVoo.destinoFinal}`);
  }
}

// ================================================================================
// 19. üîß FUN√á√ïES AUXILIARES
// ================================================================================

function construirTextoAnalise(formData) {
  return [
    formData.observacoes || '',
    formData.textoColado || '', 
    formData.destino || '',
    formData.tipos?.join(' ') || ''
  ].join(' ').toLowerCase();
}

// ================================================================================
// 20. üöÄ EXPORTA√á√ïES
// ================================================================================

export {
  analisarTextoCompleto,
  PADROES_COMPANHIAS,
  AEROPORTOS_BRASILEIROS,
  AEROPORTOS_INTERNACIONAIS,
  TODOS_AEROPORTOS,
  PADROES_VOOS,
  NAVIOS_CONHECIDOS,
  PORTOS_CRUZEIROS,
  TIPOS_CABINE_CRUZEIRO,
  PLANOS_CRUZEIRO,
  TIPOS_HOSPEDAGEM,
  REGIMES_HOSPEDAGEM,
  TIPOS_QUARTO_HOTEL,
  CATEGORIAS_HOTEL,
  POLITICAS_CANCELAMENTO,
  SERVICOS_PACOTE
};

export default {
  analisarTextoCompleto,
  PADROES_COMPANHIAS,
  AEROPORTOS_BRASILEIROS,
  AEROPORTOS_INTERNACIONAIS, 
  TODOS_AEROPORTOS,
  PADROES_VOOS,
  NAVIOS_CONHECIDOS,
  PORTOS_CRUZEIROS,
  TIPOS_CABINE_CRUZEIRO,
  PLANOS_CRUZEIRO,
  TIPOS_HOSPEDAGEM,
  REGIMES_HOSPEDAGEM,
  TIPOS_QUARTO_HOTEL,
  CATEGORIAS_HOTEL,
  POLITICAS_CANCELAMENTO,
  SERVICOS_PACOTE
};

// ================================================================================
// 21. CONSOLE.LOGS FINAIS
// ================================================================================

console.log("‚úÖ Analysis v11.0 - SISTEMA COMPLETO CARREGADO E PRONTO!");
console.log("üéØ Suporte completo: VOOS, MULTITRECHOS, CRUZEIROS, PACOTES, PRE√áOS CVC");
console.log("üö¢ Cruzeiros: Costa, MSC, Disney, Royal Caribbean + itiner√°rios detalhados");
console.log("üì¶ Pacotes: Hotel + Voo + Servi√ßos inclusos + Descontos autom√°ticos");
console.log("üè® NOVO: Suporte para m√∫ltiplas op√ß√µes de hot√©is com extra√ß√£o completa!");
