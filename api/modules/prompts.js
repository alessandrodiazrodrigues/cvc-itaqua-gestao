// üéØ prompts.js - v12.0 - SISTEMA UNIFICADO INTELIGENTE
// FUS√ÉO: L√™ TUDO simultaneamente (HTML + Texto + PDF + Imagem)
// PRIORIDADE: Hierarquia inteligente de confiabilidade das fontes
// ARQUITETURA: Modular com se√ß√µes numeradas para manuten√ß√£o

console.log("üéØ Prompts v12.0 - SISTEMA UNIFICADO INTELIGENTE CARREGADO");

// ================================================================================
// üìã √çNDICE DAS SE√á√ïES
// ================================================================================
/*
1. üéØ CONSTRUTOR PRINCIPAL DE PROMPTS
2. üß† FUS√ÉO INTELIGENTE DE FONTES (N√öCLEO DO SISTEMA)
3. üîç AN√ÅLISE E PRIORIZA√á√ÉO DE DADOS
4. ‚öôÔ∏è DETERMINA√á√ÉO DE ESTRAT√âGIA
5. üéØ SELE√á√ÉO DE PROMPT POR TIPO
6. ‚úàÔ∏è PROMPTS ESPEC√çFICOS POR TIPO (10 tipos)
7. üè® PROMPTS PARA HOT√âIS E PACOTES
8. üö¢ PROMPTS PARA CRUZEIROS
9. üîß ENRIQUECIMENTO E OTIMIZA√á√ÉO
10. üìä FUN√á√ïES AUXILIARES E LOGS
11. üì∏ AN√ÅLISE DE IMAGENS E PDFs
12. üîß UTILIT√ÅRIOS E VALIDA√á√ÉO
13. üöÄ EXPORTA√á√ïES E LOGS FINAIS
*/

// ================================================================================
// 1. üéØ CONSTRUTOR PRINCIPAL DE PROMPTS
// ================================================================================

function gerarPromptOtimizado(formData, analise) {
  console.log("üéØ Gerando prompt otimizado v12.0 - SISTEMA UNIFICADO...");
  
  try {
    // ETAPA 1: FUS√ÉO INTELIGENTE DE TODAS AS FONTES
    console.log("üß† Iniciando fus√£o inteligente de fontes...");
    const contextoUnificado = construirContextoUnificado(formData, analise);
    
    // ETAPA 2: Se houver imagem, usar prompt espec√≠fico
    if (formData.imagemBase64) {
      console.log("üì∏ Detectada imagem, usando prompt de an√°lise visual.");
      return gerarPromptAnaliseImagem(formData, contextoUnificado);
    }

    // ETAPA 3: Fluxo normal com contexto unificado
    const estrategia = determinarEstrategia(analise, contextoUnificado);
    const promptEspecifico = selecionarPromptPorTipo(
      contextoUnificado.tipoDetectado, 
      contextoUnificado, 
      estrategia
    );
    
    const promptFinal = enriquecerPrompt(promptEspecifico, formData, analise, contextoUnificado);
    const promptOtimizado = otimizarPromptFinal(promptFinal, { max_tokens: 4096 });
    
    logPromptGerado(promptOtimizado, analise, estrategia, contextoUnificado);
    
    console.log(`‚úÖ Prompt unificado gerado: ${promptOtimizado.length} caracteres`);
    console.log(`üéØ Fontes processadas: ${contextoUnificado.fontesProcessadas.join(', ')}`);
    
    return promptOtimizado;
    
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do prompt unificado:", error);
    return gerarPromptFallback(formData);
  }
}

// ================================================================================
// 2. üß† FUS√ÉO INTELIGENTE DE FONTES (N√öCLEO DO SISTEMA)
// ================================================================================

function construirContextoUnificado(formData, analise) {
  console.log("üß† Construindo contexto com fus√£o inteligente de TODAS as fontes...");
  
  // AN√ÅLISE DE FONTES DISPON√çVEIS
  const fontesDisponiveis = analisarFontesDisponiveis(formData, analise);
  console.log("üìä Fontes detectadas:", fontesDisponiveis);
  
  // FUS√ÉO DE PASSAGEIROS (PRIORIDADE: TEXTO > HTML > PADR√ÉO)
  const passageirosFusao = fusaoInteligentePassageiros(formData, analise, fontesDisponiveis);
  
  // FUS√ÉO DE PRE√áOS (PRIORIDADE: PDF > IMAGEM > TEXTO > HTML)
  const precosFusao = fusaoInteligentePrecos(formData, analise, fontesDisponiveis);
  
  // FUS√ÉO DE DESTINOS (PRIORIDADE: HTML > TEXTO > AN√ÅLISE)
  const destinoFusao = fusaoInteligenteDestinos(formData, analise, fontesDisponiveis);
  
  // FUS√ÉO DE COMPANHIAS (QUALQUER FONTE V√ÅLIDA)
  const companhiasFusao = fusaoInteligenteCompanhias(formData, analise, fontesDisponiveis);
  
  // FUS√ÉO DE HOR√ÅRIOS E AEROPORTOS
  const voosFusao = fusaoInteligenteVoos(formData, analise, fontesDisponiveis);
  
  // CONTEXTO UNIFICADO FINAL
  const contextoUnificado = {
    // Dados b√°sicos unificados
    tipos: formData.tipos?.join(", ") || "Or√ßamento geral",
    observacoes: formData.observacoes || "",
    textoColado: formData.textoColado || "",
    
    // DADOS FUSIONADOS INTELIGENTEMENTE
    destino: destinoFusao.valor,
    destinoFonte: destinoFusao.fonte,
    
    passageiros: passageirosFusao.texto,
    adultos: passageirosFusao.adultos,
    criancas: passageirosFusao.criancas,
    bebes: passageirosFusao.bebes,
    passageirosFonte: passageirosFusao.fonte,
    
    precoTotal: precosFusao.valor,
    precoFonte: precosFusao.fonte,
    
    companhiaPrincipal: companhiasFusao.principal,
    companhiasFonte: companhiasFusao.fonte,
    
    // Dados de voos fusionados
    horarioIda: voosFusao.horarioIda,
    horarioVolta: voosFusao.horarioVolta,
    aeroportoOrigemFinal: voosFusao.aeroportoOrigem,
    aeroportoDestinoFinal: voosFusao.aeroportoDestino,
    
    // Metadados da an√°lise
    tipoDetectado: analise.tipoDetectado || analise.tipo_principal || 'aereo_nacional_simples',
    confianca: analise.confiancaDeteccao || analise.confianca_deteccao || 0,
    complexidade: analise.complexidade || 'media',
    numeroOpcoes: analise.numeroOpcoes || 1,
    
    // Configura√ß√µes especiais
    temImagem: !!formData.imagemBase64,
    temPDF: fontesDisponiveis.includes('PDF'),
    temTexto: fontesDisponiveis.includes('TEXTO'),
    temHTML: fontesDisponiveis.includes('HTML'),
    
    parcelamento: {
      incluirParcelamento: !!formData.parcelamento?.incluirParcelamento,
      parcelas10x: !!formData.parcelamento?.parcelas10x,
      parcelas12x: !!formData.parcelamento?.parcelas12x
    },
    
    // Debug e rastreabilidade
    fontesProcessadas: fontesDisponiveis,
    fusaoLog: {
      passageiros: passageirosFusao.log,
      precos: precosFusao.log,
      destino: destinoFusao.log,
      companhias: companhiasFusao.log
    }
  };
  
  console.log("‚úÖ Contexto unificado constru√≠do com sucesso");
  console.log(`üéØ Passageiros: ${contextoUnificado.passageiros} (fonte: ${contextoUnificado.passageirosFonte})`);
  console.log(`üèÜ Destino: ${contextoUnificado.destino} (fonte: ${contextoUnificado.destinoFonte})`);
  console.log(`üí∞ Pre√ßo: ${contextoUnificado.precoTotal || 'n√£o detectado'} (fonte: ${contextoUnificado.precoFonte || 'nenhuma'})`);
  
  return contextoUnificado;
}

// ================================================================================
// 3. üîç AN√ÅLISE E PRIORIZA√á√ÉO DE DADOS
// ================================================================================

function analisarFontesDisponiveis(formData, analise) {
  const fontes = [];
  
  if (formData.observacoes && formData.observacoes.length > 50) {
    fontes.push('TEXTO');
  }
  
  if (formData.imagemBase64) {
    fontes.push('IMAGEM');
  }
  
  // Detectar PDF atrav√©s do tamanho do texto (PDFs geram textos longos)
  if (formData.observacoes && formData.observacoes.length > 1000) {
    fontes.push('PDF');
  }
  
  if ((formData.adultos && formData.adultos > 0) || 
      (formData.criancas && formData.criancas > 0) || 
      (formData.destino && formData.destino.length > 0)) {
    fontes.push('HTML');
  }
  
  return fontes;
}

function fusaoInteligentePassageiros(formData, analise, fontesDisponiveis) {
  console.log("üë• Fus√£o inteligente de passageiros...");
  
  // PRIORIDADE: TEXTO/PDF > HTML > PADR√ÉO
  
  // 1¬∫: Tentar extrair do texto/an√°lise
  const adultosTexto = analise.dadosVoo?.numeroPassageiros || 0;
  const criancasTexto = analise.dadosVoo?.numeroCriancas || 0;
  const bebesTexto = analise.dadosVoo?.numeroBebes || 0;
  
  // 2¬∫: Usar dados do HTML se dispon√≠veis
  const adultosHTML = parseInt(formData.adultos) || 0;
  const criancasHTML = parseInt(formData.criancas) || 0;
  
  // L√ìGICA DE FUS√ÉO INTELIGENTE
  let adultosFinal, criancasFinal, bebesFinal, fonte, log;
  
  if (adultosTexto > 0 || criancasTexto > 0 || bebesTexto > 0) {
    // Usar dados extra√≠dos do texto
    adultosFinal = adultosTexto || 1;
    criancasFinal = criancasTexto;
    bebesFinal = bebesTexto;
    fonte = 'TEXTO_EXTRAIDO';
    log = `Extra√≠do do texto: ${adultosFinal}A, ${criancasFinal}C, ${bebesFinal}B`;
  } else if (adultosHTML > 0 || criancasHTML > 0) {
    // Usar dados do formul√°rio HTML
    adultosFinal = adultosHTML || 1;
    criancasFinal = criancasHTML;
    bebesFinal = 0; // Beb√™s s√≥ v√™m do texto
    fonte = 'HTML_FORM';
    log = `Usado formul√°rio HTML: ${adultosFinal}A, ${criancasFinal}C`;
  } else {
    // Usar padr√£o
    adultosFinal = 1;
    criancasFinal = 0;
    bebesFinal = 0;
    fonte = 'PADRAO';
    log = 'Usado padr√£o: 1A, 0C, 0B';
  }
  
  // Construir texto final
  let textoPassageiros = `${adultosFinal} adulto(s)`;
  if (criancasFinal > 0) textoPassageiros += `, ${criancasFinal} crian√ßa(s)`;
  if (bebesFinal > 0) textoPassageiros += ` e ${bebesFinal} beb√™(s)`;
  
  console.log(`‚úÖ Passageiros fusionados: ${textoPassageiros} (${fonte})`);
  
  return {
    adultos: adultosFinal,
    criancas: criancasFinal,
    bebes: bebesFinal,
    texto: textoPassageiros,
    fonte: fonte,
    log: log
  };
}

function fusaoInteligentePrecos(formData, analise, fontesDisponiveis) {
  console.log("üí∞ Fus√£o inteligente de pre√ßos...");
  
  // PRIORIDADE: PDF > IMAGEM > TEXTO > HTML
  
  // Tentar extrair pre√ßos da an√°lise
  const precosAnalise = analise.precosCVC?.precoTotal || 
                       analise.dadosVoo?.precoTotal ||
                       analise.dadosHotel?.precoTotal ||
                       analise.dadosCruzeiro?.precoTotal;
  
  let precoFinal = null;
  let fonte = 'NENHUMA';
  let log = 'Nenhum pre√ßo detectado';
  
  if (precosAnalise) {
    precoFinal = precosAnalise;
    if (fontesDisponiveis.includes('PDF')) {
      fonte = 'PDF_EXTRAIDO';
      log = `Pre√ßo extra√≠do de PDF: ${precoFinal}`;
    } else if (fontesDisponiveis.includes('IMAGEM')) {
      fonte = 'IMAGEM_EXTRAIDA';
      log = `Pre√ßo extra√≠do de imagem: ${precoFinal}`;
    } else {
      fonte = 'TEXTO_EXTRAIDO';
      log = `Pre√ßo extra√≠do de texto: ${precoFinal}`;
    }
  }
  
  console.log(`‚úÖ Pre√ßos fusionados: ${precoFinal || 'n√£o detectado'} (${fonte})`);
  
  return {
    valor: precoFinal,
    fonte: fonte,
    log: log
  };
}

function fusaoInteligenteDestinos(formData, analise, fontesDisponiveis) {
  console.log("üó∫Ô∏è Fus√£o inteligente de destinos...");
  
  // PRIORIDADE: HTML > TEXTO > AN√ÅLISE
  
  let destinoFinal = null;
  let fonte = 'NENHUMA';
  let log = 'Nenhum destino detectado';
  
  if (formData.destino && formData.destino.length > 0) {
    destinoFinal = formData.destino;
    fonte = 'HTML_FORM';
    log = `Destino do formul√°rio: ${destinoFinal}`;
  } else if (analise.dadosVoo?.destino) {
    destinoFinal = analise.dadosVoo.destino;
    fonte = 'TEXTO_EXTRAIDO';
    log = `Destino extra√≠do do texto: ${destinoFinal}`;
  } else if (analise.dadosVoo?.destinoFinal) {
    destinoFinal = analise.dadosVoo.destinoFinal;
    fonte = 'ANALISE';
    log = `Destino da an√°lise: ${destinoFinal}`;
  } else {
    destinoFinal = 'Destino a definir';
    fonte = 'PADRAO';
    log = 'Usado destino padr√£o';
  }
  
  console.log(`‚úÖ Destino fusionado: ${destinoFinal} (${fonte})`);
  
  return {
    valor: destinoFinal,
    fonte: fonte,
    log: log
  };
}

function fusaoInteligenteCompanhias(formData, analise, fontesDisponiveis) {
  console.log("‚úàÔ∏è Fus√£o inteligente de companhias...");
  
  const companhiasDetectadas = analise.companhiasDetectadas || 
                              analise.dadosVoo?.companhiaPrincipal ||
                              [];
  
  let companhiaPrincipal = null;
  let fonte = 'NENHUMA';
  let log = 'Nenhuma companhia detectada';
  
  if (Array.isArray(companhiasDetectadas) && companhiasDetectadas.length > 0) {
    companhiaPrincipal = companhiasDetectadas[0];
    fonte = 'TEXTO_EXTRAIDO';
    log = `Companhia extra√≠da: ${companhiaPrincipal}`;
  } else if (typeof companhiasDetectadas === 'string' && companhiasDetectadas.length > 0) {
    companhiaPrincipal = companhiasDetectadas;
    fonte = 'ANALISE';
    log = `Companhia da an√°lise: ${companhiaPrincipal}`;
  } else {
    companhiaPrincipal = 'A confirmar';
    fonte = 'PADRAO';
    log = 'Companhia padr√£o';
  }
  
  console.log(`‚úÖ Companhia fusionada: ${companhiaPrincipal} (${fonte})`);
  
  return {
    principal: companhiaPrincipal,
    todas: companhiasDetectadas,
    fonte: fonte,
    log: log
  };
}

function fusaoInteligenteVoos(formData, analise, fontesDisponiveis) {
  console.log("üõ´ Fus√£o inteligente de dados de voos...");
  
  const dadosVoo = analise.dadosVoo || {};
  
  return {
    horarioIda: dadosVoo.vooIda?.horarioSaida || 'A confirmar',
    horarioVolta: dadosVoo.vooVolta?.horarioSaida || 'A confirmar',
    aeroportoOrigem: dadosVoo.vooIda?.aeroportoSaida || dadosVoo.origem || 'A confirmar',
    aeroportoDestino: dadosVoo.vooIda?.aeroportoChegada || dadosVoo.destino || 'A confirmar',
    duracao: dadosVoo.vooIda?.duracao || 'A confirmar',
    tipoVoo: dadosVoo.vooIda?.tipoVoo || 'A confirmar'
  };
}

// ================================================================================
// 4. ‚öôÔ∏è DETERMINA√á√ÉO DE ESTRAT√âGIA
// ================================================================================

function determinarEstrategia(analise, contextoUnificado) {
  console.log("‚öôÔ∏è Determinando estrat√©gia com contexto unificado...");
  
  const estrategia = {
    foco: 'formatacao_padrao',
    detalhamento: 'medio',
    validacao: 'padrao',
    modelo_recomendado: 'gpt-4o-mini',
    fontesUsadas: contextoUnificado.fontesProcessadas
  };
  
  // Ajustar estrat√©gia baseado nas fontes dispon√≠veis
  if (contextoUnificado.temImagem) {
    estrategia.foco = 'analise_visual';
    estrategia.modelo_recomendado = 'gpt-4o';
  }
  
  if (contextoUnificado.temPDF) {
    estrategia.detalhamento = 'alto';
    estrategia.validacao = 'elevada';
  }
  
  // Ajustes baseados na complexidade
  switch (contextoUnificado.complexidade) {
    case 'muito_alta':
      estrategia.foco = 'maxima_precisao';
      estrategia.detalhamento = 'muito_alto';
      estrategia.validacao = 'rigorosa';
      estrategia.modelo_recomendado = 'gpt-4o';
      break;
      
    case 'alta':
      estrategia.foco = 'alta_qualidade';
      estrategia.detalhamento = 'alto';
      estrategia.validacao = 'elevada';
      break;
      
    case 'baixa':
      estrategia.foco = 'eficiencia';
      estrategia.detalhamento = 'basico';
      estrategia.validacao = 'basica';
      break;
  }
  
  console.log(`‚úÖ Estrat√©gia determinada: ${estrategia.foco} (${estrategia.modelo_recomendado})`);
  
  return estrategia;
}

// ================================================================================
// 5. üéØ SELE√á√ÉO DE PROMPT POR TIPO
// ================================================================================

function selecionarPromptPorTipo(tipoDetectado, contextoUnificado, estrategia) {
  console.log(`üéØ Selecionando prompt para tipo: ${tipoDetectado}`);
  
  const prompts = {
    aereo_nacional_simples: promptAereoNacionalSimples,
    aereo_conexao_detalhada: promptAereoConexaoDetalhada,
    aereo_somente_ida: promptAereoSomenteIda,
    multiplas_opcoes_2: promptMultiplasOpcoes2,
    multiplas_opcoes_3: promptMultiplasOpcoes3,
    multitrecho: promptMultitrecho,
    multiplas_companhias_internacionais: promptMultiplasCompanhiasInternacionais,
    pacote_completo: promptPacoteCompleto,
    hotel_somente: promptHotelSomente,
    cruzeiro: promptCruzeiro
  };
  
  const promptFunction = prompts[tipoDetectado] || promptAereoNacionalSimples;
  return promptFunction(contextoUnificado, estrategia);
}

// ================================================================================
// 6. ‚úàÔ∏è PROMPTS ESPEC√çFICOS POR TIPO - A√âREOS
// ================================================================================

function promptAereoNacionalSimples(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO NACIONAL SIMPLES v12.0

üß† AN√ÅLISE INTELIGENTE MULTI-FONTE:
- Tipo: A√©reo Nacional Ida e Volta Simples
- Confian√ßa: ${(contexto.confianca * 100).toFixed(0)}%
- Complexidade: ${contexto.complexidade}
- Fontes processadas: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS DE TODAS AS FONTES:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:\n${contexto.textoColado}` : ''}

üéØ INFORMA√á√ïES FUSIONADAS INTELIGENTEMENTE:
- Passageiros: ${contexto.passageiros} (fonte: ${contexto.passageirosFonte})
- Destino: ${contexto.destino} (fonte: ${contexto.destinoFonte})
- Companhia: ${contexto.companhiaPrincipal} (fonte: ${contexto.companhiasFonte})
${contexto.precoTotal ? `- Pre√ßo detectado: R$ ${contexto.precoTotal} (fonte: ${contexto.precoFonte})` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - A√âREO NACIONAL SIMPLES:

*${contexto.companhiaPrincipal || '[COMPANHIA]'} - [ORIGEM] ‚úà ${contexto.destino}*
[DD/MM] - ${contexto.aeroportoOrigemFinal} [HH:MM] / ${contexto.aeroportoDestinoFinal} [HH:MM] ([TIPO_VOO])
--
[DD/MM] - ${contexto.aeroportoDestinoFinal} [HH:MM] / ${contexto.aeroportoOrigemFinal} [HH:MM] ([TIPO_VOO])

üí∞ ${contexto.precoTotal ? `R$ ${contexto.precoTotal}` : '[VALOR]'} para ${contexto.passageiros}
${contexto.parcelamento.incluirParcelamento ? 'üí≥ [PARCELAMENTO]' : ''}
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
${contexto.temImagem ? 'üîó [LINK se detectado na imagem]' : ''}

REGRAS CR√çTICAS E FINAIS:
- USE EXCLUSIVAMENTE OS DADOS FORNECIDOS E FUSIONADOS ACIMA
- APLIQUE O TEMPLATE DE FORMA LITERAL
- SUA RESPOSTA DEVE COME√áAR COM O ASTERISCO DO T√çTULO
- N√ÉO ADICIONE T√çTULOS EXTRAS, SEPARADORES (---) OU FORMATA√á√ÉO MARKDOWN ADICIONAL

GERAR OR√áAMENTO PROFISSIONAL:`;
}

function promptAereoConexaoDetalhada(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO CONEX√ÉO DETALHADA v12.0

üß† AN√ÅLISE INTELIGENTE MULTI-FONTE:
- Tipo: A√©reo Nacional com Conex√£o Detalhada
- Confian√ßa: ${(contexto.confianca * 100).toFixed(0)}%
- Complexidade: ${contexto.complexidade}
- Fontes: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS:
${contexto.observacoes}

üéØ INFORMA√á√ïES FUSIONADAS:
- Passageiros: ${contexto.passageiros} (${contexto.passageirosFonte})
- Destino: ${contexto.destino} (${contexto.destinoFonte})
- Companhia: ${contexto.companhiaPrincipal}

FORMATA√á√ÉO OBRIGAT√ìRIA - CONEX√ÉO DETALHADA:

*${contexto.companhiaPrincipal || '[COMPANHIA]'} - [ORIGEM] ‚úà ${contexto.destino}*
[DD/MM] - ${contexto.aeroportoOrigemFinal} [HH:MM] / [CONEXAO] [HH:MM] (voo direto)
(conex√£o em [CONEXAO] - [TEMPO_ESPERA] de espera)
[DD/MM] - [CONEXAO] [HH:MM] / ${contexto.aeroportoDestinoFinal} [HH:MM] (voo direto)
--
[DD/MM] - ${contexto.aeroportoDestinoFinal} [HH:MM] / ${contexto.aeroportoOrigemFinal} [HH:MM] ([TIPO_VOO])

üí∞ ${contexto.precoTotal ? `R$ ${contexto.precoTotal}` : '[VALOR]'} para ${contexto.passageiros}
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel

REGRAS CR√çTICAS E FINAIS:
- USE EXCLUSIVAMENTE OS DADOS FUSIONADOS ACIMA
- APLIQUE O TEMPLATE DE FORMA LITERAL
- N√ÉO ADICIONE FORMATA√á√ÉO MARKDOWN EXTRA

GERAR OR√áAMENTO COM CONEX√ÉO DETALHADA:`;
}

function promptAereoSomenteIda(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO SOMENTE IDA v12.0

üß† AN√ÅLISE INTELIGENTE:
- Tipo: A√©reo Somente Ida (sem retorno)
- Fontes: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS:
${contexto.observacoes}

üéØ INFORMA√á√ïES FUSIONADAS:
- Passageiros: ${contexto.passageiros}
- Destino: ${contexto.destino}

FORMATA√á√ÉO OBRIGAT√ìRIA - SOMENTE IDA:

*${contexto.companhiaPrincipal || '[COMPANHIA]'}*
[DD/MM] - ${contexto.aeroportoOrigemFinal} [HH:MM] / ${contexto.aeroportoDestinoFinal} [HH:MM] ([TIPO_VOO])

üí∞ Valor total para ${contexto.passageiros} = ${contexto.precoTotal ? `R$ ${contexto.precoTotal}` : '[VALOR]'}
Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
Inclui 1 item pessoal + 01 mala de m√£o de 10kg por pessoa
[REEMBOLSO]

‚ö†Ô∏è Passagem somente de ida - sem retorno inclu√≠do

REGRAS CR√çTICAS:
- USE DADOS FUSIONADOS ACIMA
- N√ÉO usar separador "--"
- INCLUIR aviso de "somente ida"

GERAR OR√áAMENTO SOMENTE IDA:`;
}

function promptMultiplasOpcoes2(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS OP√á√ïES (2 PLANOS) v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: M√∫ltiplas Op√ß√µes - 2 Planos
- Fontes: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS:
${contexto.observacoes}

FORMATA√á√ÉO OBRIGAT√ìRIA - 2 OP√á√ïES:

*${contexto.companhiaPrincipal || '[COMPANHIA]'} - [ORIGEM] ‚úà ${contexto.destino}*
[DD/MM] - ${contexto.aeroportoOrigemFinal} [HH:MM] / ${contexto.aeroportoDestinoFinal} [HH:MM] ([TIPO_VOO])
--
[DD/MM] - ${contexto.aeroportoDestinoFinal} [HH:MM] / ${contexto.aeroportoOrigemFinal} [HH:MM] ([TIPO_VOO])

üí∞ **OP√á√ÉO 1** - [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da
[PARCELAMENTO_1]
[LINK_1]

üí∞ **OP√á√ÉO 2** - [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
[PARCELAMENTO_2]
[LINK_2]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS CR√çTICAS:
- USE DADOS FUSIONADOS
- FORMATO **OP√á√ÉO X** obrigat√≥rio

GERAR OR√áAMENTO COM 2 OP√á√ïES:`;
}

function promptMultiplasOpcoes3(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS OP√á√ïES (3 PLANOS) v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Fontes: ${contexto.fontesProcessadas.join(', ')}

FORMATA√á√ÉO OBRIGAT√ìRIA - 3 OP√á√ïES ESCALONADAS:

*${contexto.companhiaPrincipal || '[COMPANHIA]'} - [ORIGEM] ‚úà ${contexto.destino}*
[VOOS_IGUAIS_PARA_TODAS_OPCOES]

üí∞ **OP√á√ÉO 1** - [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da

üí∞ **OP√á√ÉO 2** - [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas

üí∞ **OP√á√ÉO 3** - [VALOR_3]
‚úÖ Mala de m√£o + 2 bagagens despachadas
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
‚úÖ Marca√ß√£o de assento

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS CR√çTICAS:
- ESCALONAMENTO: B√°sica ‚Üí Intermedi√°ria ‚Üí Premium
- OP√á√ÉO 3 DEVE incluir "Marca√ß√£o de assento"

GERAR OR√áAMENTO COM 3 OP√á√ïES:`;
}

function promptMultitrecho(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - MULTITRECHO v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: Multitrecho (m√∫ltiplos destinos)
- Fontes: ${contexto.fontesProcessadas.join(', ')}

FORMATA√á√ÉO OBRIGAT√ìRIA - MULTITRECHO:

*Multitrecho - [COMPANHIAS]*
[DATA_INICIO] a [DATA_FIM] ([DIAS] dias e [NOITES] noites)

*Trecho 1:* [ORIGEM_1] ‚Üí [DESTINO_1]
[DATA_1] - [AEROPORTO_1] [HORA_1] / [AEROPORTO_2] [HORA_2] ([TIPO_VOO_1])

*Trecho 2:* [ORIGEM_2] ‚Üí [DESTINO_2]
[DATA_2] - [AEROPORTO_3] [HORA_3] / [AEROPORTO_4] [HORA_4] ([TIPO_VOO_2])

*Trecho 3:* [ORIGEM_3] ‚Üí [DESTINO_3]
[DATA_3] - [AEROPORTO_5] [HORA_5] / [AEROPORTO_6] [HORA_6] ([TIPO_VOO_3])

üí∞ [VALOR_TOTAL] para ${contexto.passageiros}
üí≥ Parcelamento em at√© 10x sem juros no cart√£o
‚úÖ [BAGAGEM]
üè∑Ô∏è [REEMBOLSO]
üîó [LINK]

REGRAS MULTITRECHO:
- Formato: *Trecho X:* Origem ‚Üí Destino
- M√∫ltiplas companhias permitidas

GERAR OR√áAMENTO MULTITRECHO:`;
}

function promptMultiplasCompanhiasInternacionais(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS COMPANHIAS INTERNACIONAIS v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: Internacional com M√∫ltiplas Companhias
- Fontes: ${contexto.fontesProcessadas.join(', ')}

FORMATA√á√ÉO OBRIGAT√ìRIA - M√öLTIPLAS COMPANHIAS:

*OP√á√ÉO 1 - [COMPANHIA_1] - [ORIGEM] ‚úà ${contexto.destino}*
[DATA_IDA] - [AEROPORTO_ORIGEM] [HORA_1] / [AEROPORTO_DESTINO] [HORA_2] ([TIPO_VOO_1])
--
[DATA_VOLTA] - [AEROPORTO_DESTINO] [HORA_3] / [AEROPORTO_ORIGEM] [HORA_4] ([TIPO_VOO_2])

üí∞ [VALOR_1] para ${contexto.passageiros}
üí≥ [PARCELAMENTO_1]
üîó [LINK_1]

*OP√á√ÉO 2 - [COMPANHIA_2] - [ORIGEM] ‚úà ${contexto.destino}*
[DATA_IDA] - [AEROPORTO_ORIGEM] [HORA_5] / [AEROPORTO_DESTINO] [HORA_6] ([TIPO_VOO_3])
--
[DATA_VOLTA] - [AEROPORTO_DESTINO] [HORA_7] / [AEROPORTO_ORIGEM] [HORA_8] ([TIPO_VOO_4])

üí∞ [VALOR_2] para ${contexto.passageiros}
üí≥ [PARCELAMENTO_2]
üîó [LINK_2]

üè∑Ô∏è [REEMBOLSO]
Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS CR√çTICAS:
- DESTACAR diferen√ßas entre companhias
- Hor√°rios e conex√µes diferentes

GERAR OR√áAMENTO M√öLTIPLAS COMPANHIAS:`;
}

// ================================================================================
// 7. üè® PROMPTS PARA HOT√âIS E PACOTES
// ================================================================================

function promptHotelSomente(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - HOTEL SOMENTE v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: Hotel (sem voos)
- Fontes: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS:
- Passageiros: ${contexto.passageiros}
- Destino: ${contexto.destino}

FORMATA√á√ÉO OBRIGAT√ìRIA - HOTEL:

*[NOME_HOTEL]*
üìç [ENDERECO_COMPLETO]
‚≠ê [CATEGORIA_ESTRELAS]
üõèÔ∏è [TIPO_QUARTO] 
üçΩÔ∏è [REGIME_ALIMENTACAO]

üìÖ Check-in: [DATA_CHECKIN]
üìÖ Check-out: [DATA_CHECKOUT]
üåô [QUANTIDADE_NOITES] noites

üí∞ ${contexto.precoTotal ? `R$ ${contexto.precoTotal}` : '[VALOR_TOTAL]'} para ${contexto.passageiros}
üí≥ [PARCELAMENTO]
üîó [LINK_RESERVA]

‚úÖ Incluso: [SERVICOS_INCLUSOS]
‚ùå N√£o incluso: [SERVICOS_NAO_INCLUSOS]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS CR√çTICAS:
- USE dados fusionados acima
- INCLUA todas as comodidades mencionadas

GERAR OR√áAMENTO DE HOTEL:`;
}

function promptPacoteCompleto(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - PACOTE COMPLETO v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: Pacote Completo (A√©reo + Hotel)
- Fontes: ${contexto.fontesProcessadas.join(', ')}

FORMATA√á√ÉO OBRIGAT√ìRIA - PACOTE:

*Pacote ${contexto.destino}*
Embarque: [DATA_EMBARQUE]
Pacote para ${contexto.passageiros}

*O Pacote Inclui:*
- Passagem A√©rea ida e volta para ${contexto.destino}
- Taxas de Embarque
- [TRASLADO]
[PASSEIOS_SE_HOUVER]
[SEGURO_SE_HOUVER]
- [NOITES] noites de hospedagem no hotel escolhido

‚úàÔ∏è *Voos ${contexto.companhiaPrincipal || '[COMPANHIA]'}:*
[VOOS_DETALHADOS]

**OP√á√ÉO 1** - [HOTEL_1]
üìç [ENDERECO_1]
üõèÔ∏è [QUARTO_1] com [REGIME_1]
üí∞ [VALOR_1] para ${contexto.passageiros}
üîó [LINK_1]

**OP√á√ÉO 2** - [HOTEL_2]
üìç [ENDERECO_2]
üõèÔ∏è [QUARTO_2] com [REGIME_2]
‚úÖ Reembols√°vel conforme regras do bilhete
üí∞ [VALOR_2] para ${contexto.passageiros}
üîó [LINK_2]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS PACOTE:
- Se√ß√£o "*O Pacote Inclui:*" obrigat√≥ria
- Voos separados das op√ß√µes de hotel

GERAR PACOTE COMPLETO:`;
}

// ================================================================================
// 8. üö¢ PROMPTS PARA CRUZEIROS
// ================================================================================

function promptCruzeiro(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - CRUZEIRO v12.0

üß† AN√ÅLISE MULTI-FONTE:
- Tipo: Cruzeiro Mar√≠timo
- Fontes: ${contexto.fontesProcessadas.join(', ')}

üìä DADOS FUSIONADOS:
${contexto.observacoes}

üéØ INFORMA√á√ïES FUSIONADAS:
- Passageiros: ${contexto.passageiros}
${contexto.precoTotal ? `- Pre√ßo detectado: R$ ${contexto.precoTotal}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - CRUZEIRO:

üö¢ *Cruzeiro [NOME_NAVIO]* ‚Äì [DURACAO] noites
${contexto.passageiros}
üìÖ Embarque: [DATA_EMBARQUE] ([DIA_SEMANA])
üìç Sa√≠da e chegada: [PORTO]
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí• Tarifas dispon√≠veis!
(Sujeita √† confirma√ß√£o de cabine e categoria)

üõè Op√ß√µes de Cabines:
${contexto.precoTotal ? `- Cabine [TIPO]: R$ ${contexto.precoTotal}` : '[CABINES_COM_PRECOS]'}

üìé Link para ver fotos, detalhes e reservar:
[LINK]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa
üö´ N√£o inclui: taxas, bebidas, excurs√µes

üìã Documenta√ß√£o: RG original (m√°x. 10 anos) ou passaporte

üì≤ Me chama pra garantir a sua cabine! üå¥üõ≥Ô∏è

REGRAS CRUZEIRO:
- Emoji üö¢ obrigat√≥rio no in√≠cio
- "Roteiro incr√≠vel pelo litoral brasileiro!"
- Documenta√ß√£o espec√≠fica
- Chamada final para a√ß√£o

REGRAS CR√çTICAS:
- USE dados fusionados do PDF/texto acima
- PRESERVE pre√ßos exatos se detectados

GERAR OR√áAMENTO DE CRUZEIRO:`;
}

// ================================================================================
// 9. üîß ENRIQUECIMENTO E OTIMIZA√á√ÉO
// ================================================================================

function enriquecerPrompt(promptBase, formData, analise, contextoUnificado) {
  console.log("üîß Enriquecendo prompt com contexto unificado...");
  let promptEnriquecido = promptBase;
  
  const contextoEspecial = {
    baixaConfianca: contextoUnificado.confianca < 0.7,
    altaComplexidade: contextoUnificado.complexidade === 'muito_alta',
    multiplasfontes: contextoUnificado.fontesProcessadas.length > 2,
    dadosIncompletos: (!formData.observacoes || formData.observacoes.length < 50)
  };
  
  if (contextoEspecial.baixaConfianca) {
    promptEnriquecido += `\n\n‚ö†Ô∏è VALIDA√á√ÉO EXTRA (Confian√ßa: ${(contextoUnificado.confianca * 100).toFixed(1)}%):
- REVISAR cuidadosamente o tipo detectado
- EM CASO DE D√öVIDA, usar formato mais simples
- PRIORIZAR clareza sobre complexidade`;
  }
  
  if (contextoEspecial.multiplasfontes) {
    promptEnriquecido += `\n\nüß† FUS√ÉO MULTI-FONTE ATIVA:
- Dados processados de: ${contextoUnificado.fontesProcessadas.join(', ')}
- Use PREFERENCIALMENTE os dados j√° fusionados acima
- Combine informa√ß√µes de forma inteligente
- Priorize dados mais espec√≠ficos e confi√°veis`;
  }
  
  if (contextoEspecial.altaComplexidade) {
    promptEnriquecido += `\n\nüéØ ALTA COMPLEXIDADE DETECTADA:
- Aplicar M√ÅXIMO rigor na formata√ß√£o
- Verificar TODAS as regras cr√≠ticas listadas
- Organizar informa√ß√µes de forma hier√°rquica
- Priorizar legibilidade profissional`;
  }
  
  if (contextoUnificado.temImagem) {
    promptEnriquecido += `\n\nüì∏ AN√ÅLISE DE IMAGEM ATIVA:
- Examinar TODOS os elementos visuais
- Extrair dados exatos: hor√°rios, pre√ßos, datas
- Preservar links se vis√≠veis
- Detectar layout espec√≠fico (tabular, vertical)`;
  }
  
  return promptEnriquecido;
}

function otimizarPromptFinal(prompt, limitesModelo) {
  console.log("üîß Otimizando prompt unificado para limites do modelo...");
  let promptOtimizado = prompt;
  
  const tamanhoAtual = calcularTamanhoPrompt(prompt);
  
  if (tamanhoAtual.tokens_estimados > limitesModelo.max_tokens * 0.7) {
    console.warn("‚ö†Ô∏è Prompt muito longo, aplicando otimiza√ß√µes...");
    
    // Manter se√ß√µes cr√≠ticas, remover opcionais
    promptOtimizado = promptOtimizado.replace(/INSTRU√á√ïES FINAIS:[\s\S]*?(?=GERAR|$)/g, '');
    promptOtimizado = promptOtimizado.replace(/CAMPOS OPCIONAIS:[\s\S]*?(?=REGRAS|GERAR|$)/g, '');
    promptOtimizado = promptOtimizado.replace(/\d+\.\s*[‚è∞üìÖ‚úàÔ∏èüõ´üí≥üë•üß≥üë∂üè∑Ô∏èüí∞üì±üîß]\s*/g, '‚Ä¢ ');
  }
  
  // Garantir que termine com instru√ß√£o de gera√ß√£o
  if (!promptOtimizado.includes('GERAR')) {
    promptOtimizado += '\n\nGERAR OR√áAMENTO PROFISSIONAL FORMATADO:';
  }
  
  const tamanhoFinal = calcularTamanhoPrompt(promptOtimizado);
  console.log(`üîß Otimiza√ß√£o: ${tamanhoAtual.tokens_estimados} ‚Üí ${tamanhoFinal.tokens_estimados} tokens`);
  
  return promptOtimizado;
}

// ================================================================================
// 10. üìä FUN√á√ïES AUXILIARES E LOGS
// ================================================================================

function calcularTamanhoPrompt(prompt) {
  const caracteres = prompt.length;
  const tokens_estimados = Math.ceil(caracteres / 4);
  
  return {
    caracteres,
    palavras: prompt.split(/\s+/).length,
    linhas: prompt.split('\n').length,
    tokens_estimados,
    categoria: tokens_estimados < 500 ? 'pequeno' : 
               tokens_estimados < 2000 ? 'medio' : 
               tokens_estimados < 4000 ? 'grande' : 'muito_grande'
  };
}

function logPromptGerado(prompt, analise, estrategia, contextoUnificado) {
  console.log("üìä === LOG DE PROMPT UNIFICADO GERADO ===");
  console.log(`üéØ Tipo: ${contextoUnificado.tipoDetectado}`);
  console.log(`üìà Confian√ßa: ${(contextoUnificado.confianca * 100).toFixed(1)}%`);
  console.log(`üßÆ Complexidade: ${contextoUnificado.complexidade}`);
  console.log(`‚öôÔ∏è Estrat√©gia: ${estrategia.foco}`);
  console.log(`üìè Tamanho: ${prompt.length} caracteres`);
  console.log(`ü§ñ Modelo recomendado: ${estrategia.modelo_recomendado}`);
  console.log(`üß† Fontes processadas: ${contextoUnificado.fontesProcessadas.join(', ')}`);
  console.log(`üë• Passageiros finais: ${contextoUnificado.passageiros} (${contextoUnificado.passageirosFonte})`);
  console.log(`üó∫Ô∏è Destino final: ${contextoUnificado.destino} (${contextoUnificado.destinoFonte})`);
  console.log("üìä === FIM DO LOG ===");
}

// ================================================================================
// 11. üì∏ AN√ÅLISE DE IMAGENS E PDFs
// ================================================================================

function gerarPromptAnaliseImagem(formData, contextoUnificado) {
  return `OR√áAMENTO CVC ITAQUA - AN√ÅLISE DE IMAGEM UNIFICADA v12.0

üîç INSTRU√á√ïES PARA AN√ÅLISE DE IMAGEM/PDF COM FUS√ÉO INTELIGENTE:

üß† CONTEXTO UNIFICADO DISPON√çVEL:
- Fontes processadas: ${contextoUnificado.fontesProcessadas.join(', ')}
- Passageiros detectados: ${contextoUnificado.passageiros} (fonte: ${contextoUnificado.passageirosFonte})
- Destino detectado: ${contextoUnificado.destino} (fonte: ${contextoUnificado.destinoFonte})
- Companhia detectada: ${contextoUnificado.companhiaPrincipal}
${contextoUnificado.precoTotal ? `- Pre√ßo detectado: R$ ${contextoUnificado.precoTotal} (fonte: ${contextoUnificado.precoFonte})` : ''}

üîç EXAMINE a imagem/PDF fornecida E COMBINE com os dados j√° detectados acima.

üìã DADOS A EXTRAIR DA IMAGEM:
- Companhias a√©reas mencionadas
- Hor√°rios de voo (formato HH:MM)
- C√≥digos de aeroporto (GRU, CGH, etc.)
- Datas de ida e volta
- Valores em R$ (reais)
- N√∫mero de passageiros
- Links da CVC (se vis√≠veis)
- Tipo de voo (direto/conex√£o)
- Bagagem inclu√≠da
- Pol√≠tica de cancelamento

‚ö†Ô∏è REGRAS CR√çTICAS DE FUS√ÉO:
1. PRIORIZE dados da imagem sobre dados de texto quando mais espec√≠ficos
2. COMBINE informa√ß√µes complementares (ex: texto tem passageiros, imagem tem hor√°rios)
3. N√ÉO invente dados que n√£o estejam vis√≠veis
4. Use contexto unificado para preencher lacunas
5. Preserve hor√°rios EXATOS como mostrados
6. Mantenha valores monet√°rios precisos

üéØ FORMATO DE RESPOSTA:
Organize as informa√ß√µes em um or√ßamento profissional seguindo o template CVC, usando FUS√ÉO INTELIGENTE dos dados da imagem + contexto unificado acima.

Tipos selecionados: ${formData.tipos?.join(', ') || 'Conforme detectado'}

ANALISAR IMAGEM + FUSIONAR COM CONTEXTO + GERAR OR√áAMENTO:`;
}

function gerarPromptFallback(formData) {
  return `OR√áAMENTO CVC ITAQUA - MODO FALLBACK UNIFICADO v12.0

‚ö†Ô∏è SISTEMA EM MODO DE RECUPERA√á√ÉO

Dados b√°sicos dispon√≠veis:
- Tipos: ${formData.tipos?.join(', ') || 'N√£o informado'}
- Destino: ${formData.destino || 'N√£o informado'}
- Adultos: ${formData.adultos || 1}
- Crian√ßas: ${formData.criancas || 0}
- Observa√ß√µes: ${formData.observacoes ? 'Fornecidas' : 'Nenhuma'}
- Imagem: ${formData.imagemBase64 ? 'Anexada' : 'N√£o anexada'}

üéØ GERE um or√ßamento b√°sico mas profissional com os dados dispon√≠veis.

REGRAS FALLBACK:
- Indicar "A confirmar" para informa√ß√µes n√£o fornecidas
- Usar template simples mas correto
- Manter formata√ß√£o CVC padr√£o
- Ser transparente sobre limita√ß√µes

GERAR OR√áAMENTO B√ÅSICO PROFISSIONAL:`;
}

// ================================================================================
// 12. üîß UTILIT√ÅRIOS E VALIDA√á√ÉO
// ================================================================================

function ajustarPromptParaModelo(prompt, modelo) {
  console.log(`üîß Ajustando prompt unificado para modelo: ${modelo}`);
  
  switch (modelo) {
    case 'gpt-4o':
      // GPT-4o pode lidar com prompts complexos e fus√£o
      return prompt;
      
    case 'gpt-4o-mini':
      // GPT-4o-mini prefere instru√ß√µes mais diretas
      return prompt.replace(/üß† AN√ÅLISE INTELIGENTE MULTI-FONTE:[\s\S]*?(?=üìä DADOS|FORMATA√á√ÉO)/g, '');
      
    case 'claude-3-5-sonnet-20240620':
      // Claude prefere estrutura mais clara
      return prompt.replace(/REGRAS CR√çTICAS E FINAIS:/g, 'INSTRU√á√ïES IMPORTANTES:');
      
    default:
      return prompt;
  }
}

function validarPrompt(prompt, tipoDetectado, contextoUnificado) {
  const validacao = {
    valido: true,
    problemas: [],
    sugestoes: [],
    fontesUsadas: contextoUnificado?.fontesProcessadas || []
  };
  
  // Verifica√ß√µes b√°sicas
  if (!prompt || prompt.length < 100) {
    validacao.valido = false;
    validacao.problemas.push('Prompt muito curto');
  }
  
  if (!prompt.includes('GERAR')) {
    validacao.problemas.push('Falta instru√ß√£o de gera√ß√£o');
  }
  
  // Verifica√ß√µes de fus√£o
  if (contextoUnificado && contextoUnificado.fontesProcessadas.length > 1) {
    if (!prompt.includes('FUS√ÉO') && !prompt.includes('MULTI-FONTE')) {
      validacao.sugestoes.push('Prompt n√£o menciona fus√£o multi-fonte');
    }
  }
  
  // Verifica√ß√µes espec√≠ficas por tipo
  if (tipoDetectado?.includes('cruzeiro') && !prompt.includes('üö¢')) {
    validacao.sugestoes.push('Adicionar emoji de cruzeiro');
  }
  
  if (tipoDetectado?.includes('multitrecho') && !prompt.includes('Trecho')) {
    validacao.problemas.push('Template multitrecho deve incluir "Trecho"');
  }
  
  console.log(`‚úÖ Valida√ß√£o conclu√≠da: ${validacao.valido ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
  
  return validacao;
}

// ================================================================================
// 13. üöÄ EXPORTA√á√ïES E LOGS FINAIS
// ================================================================================

export {
  gerarPromptOtimizado,
  construirContextoUnificado,
  fusaoInteligentePassageiros,
  fusaoInteligentePrecos,
  fusaoInteligenteDestinos,
  selecionarPromptPorTipo,
  gerarPromptAnaliseImagem,
  gerarPromptFallback,
  validarPrompt,
  ajustarPromptParaModelo
};

export default {
  gerarPromptOtimizado,
  construirContextoUnificado,
  fusaoInteligentePassageiros,
  fusaoInteligentePrecos,
  fusaoInteligenteDestinos,
  selecionarPromptPorTipo,
  gerarPromptAnaliseImagem,
  gerarPromptFallback,
  validarPrompt,
  ajustarPromptParaModelo
};

// ================================================================================
// üìä LOGS FINAIS DE INICIALIZA√á√ÉO
// ================================================================================

console.log("‚úÖ Prompts v12.0 - SISTEMA UNIFICADO INTELIGENTE CARREGADO!");
console.log("üß† FUS√ÉO MULTI-FONTE implementada: HTML + Texto + PDF + Imagem");
console.log("üéØ PRIORIDADE INTELIGENTE: Texto > HTML > Padr√£o");
console.log("üìã SE√á√ïES NUMERADAS: 13 se√ß√µes organizadas");
console.log("üîß ARQUITETURA MODULAR: Respeitada e otimizada");
console.log("üöÄ SISTEMA VERDADEIRAMENTE INTELIGENTE PRONTO!");

/*
üìã √çNDICE IMPLEMENTADO:
1. ‚úÖ Construtor Principal
2. ‚úÖ Fus√£o Inteligente (N√öCLEO)
3. ‚úÖ An√°lise e Prioriza√ß√£o
4. ‚úÖ Determina√ß√£o de Estrat√©gia
5. ‚úÖ Sele√ß√£o de Prompt
6. ‚úÖ Prompts A√©reos (6 tipos)
7. ‚úÖ Prompts Hot√©is/Pacotes (2 tipos)
8. ‚úÖ Prompts Cruzeiros (1 tipo)
9. ‚úÖ Enriquecimento/Otimiza√ß√£o
10. ‚úÖ Fun√ß√µes Auxiliares
11. ‚úÖ An√°lise Imagens/PDFs
12. ‚úÖ Utilit√°rios/Valida√ß√£o
13. ‚úÖ Exporta√ß√µes/Logs
*/
