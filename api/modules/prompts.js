// üéØ prompts.js - SISTEMA AVAN√áADO DE PROMPTS v7.7
// CORRE√á√ÉO CR√çTICA #2: Exporta√ß√£o ES6 + Prompts Especializados
// Prompts espec√≠ficos para cada tipo de or√ßamento + Contexto inteligente

console.log("üéØ Prompts v7.7 - SISTEMA ESPECIALIZADO + ES6 CORRIGIDA");

// ================================================================================
// üéØ CONSTRUTOR PRINCIPAL DE PROMPTS
// ================================================================================

export function gerarPromptOtimizado(formData, analise) {
  console.log("üéØ Gerando prompt otimizado v7.7...");
  
  try {
    // Determinar contexto e estrat√©gia
    const contexto = construirContexto(formData, analise);
    const estrategia = determinarEstrategia(analise);
    
    // Selecionar prompt espec√≠fico baseado no tipo detectado
    const promptEspecifico = selecionarPromptPorTipo(analise.tipoDetectado, contexto, estrategia);
    
    // Adicionar configura√ß√µes avan√ßadas
    const promptFinal = enriquecerPrompt(promptEspecifico, formData, analise);
    
    console.log(`‚úÖ Prompt otimizado gerado: ${promptFinal.length} caracteres`);
    console.log(`üéØ Tipo: ${analise.tipoDetectado}, Complexidade: ${analise.complexidade}`);
    
    return promptFinal;
    
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do prompt:", error);
    return gerarPromptFallback(formData);
  }
}

// ================================================================================
// üèóÔ∏è CONSTRU√á√ÉO DE CONTEXTO INTELIGENTE
// ================================================================================

function construirContexto(formData, analise) {
  console.log("üèóÔ∏è Construindo contexto inteligente...");
  
  return {
    // Dados b√°sicos
    tipos: formData.tipos?.join(", ") || "Or√ßamento geral",
    observacoes: formData.observacoes || "",
    textoColado: formData.textoColado || "",
    
    // Dados extra√≠dos da an√°lise
    tipoDetectado: analise.tipoDetectado,
    confianca: analise.confiancaDeteccao,
    complexidade: analise.complexidade,
    numeroOpcoes: analise.numeroOpcoes || 1,
    
    // Contexto espec√≠fico
    aeroportos: analise.aeroportosDetectados?.join(", ") || "A detectar",
    companhias: analise.companhiasDetectadas?.join(", ") || "A detectar",
    precos: analise.numeroPrecos || 0,
    
    // Flags de contexto
    temImagem: !!formData.imagemBase64,
    temLinks: analise.contexto?.links?.length > 0,
    temParcelamento: !!formData.parcelamento,
    
    // Dados do usu√°rio
    destino: formData.destino || "Destino a definir",
    adultos: formData.adultos || 2,
    criancas: formData.criancas || 0
  };
}

function determinarEstrategia(analise) {
  const estrategias = {
    alta: {
      foco: 'detalhamento',
      abordagem: 'an√°lise_profunda',
      prioridade: 'precisao_maxima'
    },
    media: {
      foco: 'balanceamento',
      abordagem: 'estruturada',
      prioridade: 'eficiencia'
    },
    simples: {
      foco: 'clareza',
      abordagem: 'direta',
      prioridade: 'rapidez'
    }
  };
  
  return estrategias[analise.complexidade] || estrategias.simples;
}

// ================================================================================
// üéØ SELETOR DE PROMPTS POR TIPO
// ================================================================================

export function selecionarPromptPorTipo(tipoDetectado, contexto, estrategia) {
  console.log(`üéØ Selecionando prompt para tipo: ${tipoDetectado}`);
  
  const prompts = {
    aereoNacionalSimples: () => gerarPromptAereoNacionalSimples(contexto),
    aereoConexaoDetalhada: () => gerarPromptAereoConexaoDetalhada(contexto),
    aereoSomenteIda: () => gerarPromptAereoSomenteIda(contexto),
    multiplasOpcoes2: () => gerarPromptMultiplasOpcoes2(contexto),
    multiplasOpcoes3: () => gerarPromptMultiplasOpcoes3(contexto),
    multitrecho: () => gerarPromptMultitrecho(contexto),
    multiplasCompanhiasInternacionais: () => gerarPromptMultiplasCompanhias(contexto),
    pacoteCompleto: () => gerarPromptPacoteCompleto(contexto),
    cruzeiro: () => gerarPromptCruzeiro(contexto)
  };
  
  const gerador = prompts[tipoDetectado] || prompts.aereoNacionalSimples;
  return gerador();
}

// ================================================================================
// üìã PROMPTS ESPEC√çFICOS POR TIPO
// ================================================================================

function gerarPromptAereoNacionalSimples(contexto) {
  return `OR√áAMENTO A√âREO NACIONAL SIMPLES - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: A√©reo Nacional Ida e Volta Simples
- Destino: ${contexto.destino}
- Passageiros: ${contexto.adultos} adulto(s)${contexto.criancas > 0 ? ` + ${contexto.criancas} crian√ßa(s)` : ''}
- Complexidade: ${contexto.complexidade}

FORMATA√á√ÉO OBRIGAT√ìRIA:
1. ‚è∞ HOR√ÅRIOS: Formato "06:20" (nunca "06: 20")
2. üìÖ DATAS: Formato "15/11" (DD/MM)
3. ‚úàÔ∏è AEROPORTOS: Converter c√≥digos (CGH ‚Üí Congonhas, GRU ‚Üí Guarulhos)
4. üí∞ PRE√áOS: Formato "R$ 1.247,80" (espa√ßo ap√≥s R$)
5. üë• PASSAGEIROS: "02 adultos" (zero √† esquerda)
6. üß≥ BAGAGEM: "S√≥ mala de m√£o inclu√≠da" (padr√£o nacional)
7. üè∑Ô∏è REEMBOLSO: "N√£o reembols√°vel" ou "Reembols√°vel conforme regras do bilhete"

TEMPLATE OBRIGAT√ìRIO:
*[COMPANHIA] - [ORIGEM] ‚úà [DESTINO]*
[DATA_IDA] - [ORIGEM] [HORA_IDA] / [DESTINO] [HORA_CHEGADA] ([TIPO_VOO])
--
[DATA_VOLTA] - [DESTINO] [HORA_VOLTA] / [ORIGEM] [HORA_CHEGADA_VOLTA] ([TIPO_VOO])

üí∞ [VALOR_TOTAL] para [PASSAGEIROS]
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR OR√áAMENTO PROFISSIONAL:`;
}

function logPromptGerado(prompt, analise, estrategia) {
  const metricas = calcularTamanhoPrompt(prompt);
  
  console.log("üìä === PROMPT GERADO v7.7 ===");
  console.log(`üéØ Tipo: ${analise.tipoDetectado}`);
  console.log(`üìà Confian√ßa: ${(analise.confiancaDeteccao * 100).toFixed(1)}%`);
  console.log(`üßÆ Complexidade: ${analise.complexidade}`);
  console.log(`‚öôÔ∏è Estrat√©gia: ${estrategia.foco}`);
  console.log(`üìè Tamanho: ${metricas.caracteres} chars, ~${metricas.tokens_estimados} tokens`);
  console.log(`üìä Categoria: ${metricas.categoria}`);
  console.log("üìä === FIM LOG ===");
}

// ================================================================================
// üìä SISTEMA DE CACHE DE PROMPTS
// ================================================================================

const CACHE_PROMPTS = new Map();

function obterPromptCacheado(chaveCache, gerador) {
  if (CACHE_PROMPTS.has(chaveCache)) {
    console.log(`üìä Prompt recuperado do cache: ${chaveCache}`);
    return CACHE_PROMPTS.get(chaveCache);
  }

  const prompt = gerador();
  CACHE_PROMPTS.set(chaveCache, prompt);
  
  // Limitar tamanho do cache
  if (CACHE_PROMPTS.size > 50) {
    const primeiraChave = CACHE_PROMPTS.keys().next().value;
    CACHE_PROMPTS.delete(primeiraChave);
  }

  console.log(`üìä Prompt gerado e cacheado: ${chaveCache}`);
  return prompt;
}

function gerarChaveCache(tipoDetectado, complexidade, temImagem, temParcelamento) {
  return `${tipoDetectado}_${complexidade}_${temImagem ? 'img' : 'txt'}_${temParcelamento ? 'parc' : 'noparc'}`;
}

// ================================================================================
// üéØ INTERFACE UNIFICADA DE PROMPTS
// ================================================================================

function criarPromptCompleto(formData, analise, opcoes = {}) {
  console.log("üéØ Criando prompt completo unificado...");

  const chaveCache = gerarChaveCache(
    analise.tipoDetectado,
    analise.complexidade,
    !!formData.imagemBase64,
    !!formData.parcelamento?.incluirParcelamento
  );

  return obterPromptCacheado(chaveCache, () => {
    // Contexto especial
    const contextoEspecial = {
      baixaConfianca: analise.confiancaDeteccao < 0.7,
      altaComplexidade: analise.complexidade === 'alta',
      imagemCompleta: !!formData.imagemBase64,
      dadosIncompletos: !formData.observacoes && !formData.textoColado
    };

    // Gerar prompt adaptativo
    let prompt = gerarPromptAdaptativo(formData, analise, contextoEspecial);

    // Aplicar enriquecimentos
    prompt = enriquecerPrompt(prompt, formData, analise);

    // Otimizar para modelo
    const limitesModelo = {
      max_tokens: opcoes.maxTokens || 4000,
      modelo: opcoes.modelo || 'gpt-4o-mini'
    };
    
    prompt = otimizarPromptFinal(prompt, limitesModelo);

    // Ajustar para modelo espec√≠fico
    if (opcoes.modelo) {
      prompt = ajustarPromptParaModelo(prompt, opcoes.modelo);
    }

    return prompt;
  });
}

function gerarPromptAdaptativo(formData, analise, contextoEspecial) {
  console.log("üéØ Gerando prompt adaptativo...");
  
  // Construir contexto
  const contexto = construirContexto(formData, analise);
  const estrategia = determinarEstrategia(analise);
  
  // Selecionar prompt base
  let promptBase = selecionarPromptPorTipo(analise.tipoDetectado, contexto, estrategia);
  
  // Adapta√ß√µes especiais
  if (contextoEspecial.baixaConfianca) {
    promptBase += '\n\n‚ö†Ô∏è AN√ÅLISE ADICIONAL: Detectar padr√µes n√£o √≥bvios e adaptar template conforme necess√°rio.';
  }
  
  if (contextoEspecial.altaComplexidade) {
    promptBase += '\n\nüîç AN√ÅLISE DETALHADA: Preservar TODOS os detalhes espec√≠ficos fornecidos.';
  }
  
  if (contextoEspecial.imagemCompleta) {
    promptBase += '\n\nüì∏ AN√ÅLISE VISUAL: Extrair dados exatos da imagem anexada.';
  }
  
  return promptBase;
}

function otimizarPromptFinal(prompt, limites) {
  console.log("üîß Otimizando prompt final...");
  
  const tamanhoAtual = calcularTamanhoPrompt(prompt);
  let promptOtimizado = prompt;
  
  // Se exceder limites, aplicar otimiza√ß√µes
  if (tamanhoAtual.tokens_estimados > limites.max_tokens * 0.8) {
    console.log("‚ö° Aplicando otimiza√ß√µes de tamanho...");
    
    // Remover se√ß√µes menos cr√≠ticas
    promptOtimizado = promptOtimizado.replace(/CONTEXTO DETECTADO:[\s\S]*?(?=FORMATA√á√ÉO|REGRAS|TEMPLATE)/g, '');
    promptOtimizado = promptOtimizado.replace(/DADOS FORNECIDOS:[\s\S]*?(?=GERAR|$)/g, '');
    promptOtimizado = promptOtimizado.replace(/CAMPOS OPCIONAIS:[\s\S]*?(?=REGRAS|GERAR|$)/g, '');
    
    // Simplificar listas numeradas
    promptOtimizado = promptOtimizado.replace(/\d+\.\s*[‚è∞üìÖ‚úàÔ∏èüõ´üí≥üë•üß≥üë∂üè∑Ô∏èüí∞üì±üîß]\s*/g, '‚Ä¢ ');
  }

  // Garantir que termina com instru√ß√£o de gera√ß√£o
  if (!promptOtimizado.includes('GERAR')) {
    promptOtimizado += '\n\nGERAR OR√áAMENTO PROFISSIONAL FORMATADO:';
  }

  // Log da otimiza√ß√£o
  const tamanhoFinal = calcularTamanhoPrompt(promptOtimizado);
  console.log(`üîß Otimiza√ß√£o: ${tamanhoAtual.tokens_estimados} ‚Üí ${tamanhoFinal.tokens_estimados} tokens`);

  return promptOtimizado;
}

// ================================================================================
// üöÄ FUN√á√ÉO PRINCIPAL ATUALIZADA
// ================================================================================

function gerarPromptOtimizadoCompleto(formData, analise, opcoes = {}) {
  console.log("üöÄ Gerando prompt otimizado completo v7.7...");
  
  try {
    // Usar interface unificada
    const prompt = criarPromptCompleto(formData, analise, opcoes);
    
    // Validar prompt final
    const validacao = validarPrompt(prompt, analise.tipoDetectado);
    
    if (!validacao.valido) {
      console.warn("‚ö†Ô∏è Prompt com problemas:", validacao.problemas);
      
      // Aplicar corre√ß√µes autom√°ticas se poss√≠vel
      if (validacao.sugestoes.length > 0) {
        console.log("üîß Aplicando corre√ß√µes sugeridas...");
        // Implementar corre√ß√µes b√°sicas aqui se necess√°rio
      }
    }

    // Log final
    logPromptGerado(prompt, analise, determinarEstrategia(analise));
    
    return prompt;
    
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do prompt completo:", error);
    return gerarPromptFallback(formData);
  }
}

// ================================================================================
// üöÄ EXPORTA√á√ÉO ES6 (CORRE√á√ÉO CR√çTICA #2)
// ================================================================================

// Log de inicializa√ß√£o
console.log("‚úÖ Prompts v7.7 carregado:");
console.log("üéØ 9 prompts espec√≠ficos por tipo de or√ßamento");
console.log("üß† Contexto inteligente baseado em an√°lise");
console.log("‚öôÔ∏è Estrat√©gias adaptativas por complexidade");
console.log("üîß Enriquecimento autom√°tico de prompts");
console.log("üìä Sistema de cache e otimiza√ß√£o");
console.log("üîç Prompts especializados para an√°lise de imagem");
console.log("üìä Sistema de valida√ß√£o e m√©tricas completo");
console.log("üö® EXPORTA√á√ÉO ES6 CORRIGIDA - Compat√≠vel com import()");

// Exporta√ß√£o individual das fun√ß√µes principais
export {
  gerarPromptOtimizado,
  selecionarPromptPorTipo,
  gerarPromptDicasDestino,
  gerarPromptRankingHoteis,
  gerarPromptAnaliseRelatorio,
  ajustarPromptParaModelo,
  validarPrompt
};

// Exporta√ß√£o padr√£o para m√°xima compatibilidade
export default {
  gerarPromptOtimizado,
  selecionarPromptPorTipo,
  gerarPromptDicasDestino,
  gerarPromptRankingHoteis,
  gerarPromptAnaliseRelatorio,
  ajustarPromptParaModelo,
  validarPrompt
};

console.log("üöÄ Sistema de Prompts v7.7 - ESPECIALIZADO COMPLETO!");ISSIONAL:`;
}

function gerarPromptAereoConexaoDetalhada(contexto) {
  return `OR√áAMENTO A√âREO COM CONEX√ÉO DETALHADA - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: A√©reo com Conex√£o Detalhada
- Aeroportos detectados: ${contexto.aeroportos}
- Companhias detectadas: ${contexto.companhias}

FORMATA√á√ÉO ESPEC√çFICA PARA CONEX√ïES:
1. üîÑ MOSTRAR cada trecho separadamente
2. ‚è±Ô∏è INCLUIR tempo de espera na conex√£o
3. üõÇ ESPECIFICAR aeroporto de conex√£o
4. üìç FORMATO: "conex√£o em [CIDADE] - [TEMPO] de espera"

TEMPLATE OBRIGAT√ìRIO:
*[COMPANHIA] - [ORIGEM] ‚úà [DESTINO]*
[DATA] - [ORIGEM] [HORA] / [AEROPORTO_CONEXAO] [HORA_CONEXAO] (voo direto)
(conex√£o em [AEROPORTO_CONEXAO] - [TEMPO_ESPERA] de espera)
[DATA] - [AEROPORTO_CONEXAO] [HORA2] / [DESTINO] [HORA_CHEGADA] (voo direto)
--
[DATA_VOLTA] - [DESTINO] [HORA_VOLTA] / [ORIGEM] [HORA_CHEGADA_VOLTA] ([TIPO_VOO])

üí∞ [VALOR] para [PASSAGEIROS]
üí≥ [PARCELAMENTO]
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
üîó [LINK]

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR OR√áAMENTO COM CONEX√ÉO DETALHADA:`;
}

function gerarPromptMultiplasOpcoes2(contexto) {
  return `OR√áAMENTO M√öLTIPLAS OP√á√ïES - 2 PLANOS - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: M√∫ltiplas Op√ß√µes (2 planos)
- N√∫mero de pre√ßos detectados: ${contexto.precos}
- Estrat√©gia: Escalonamento de servi√ßos

REGRAS ESPEC√çFICAS PARA 2 OP√á√ïES:
1. üì¶ OP√á√ÉO 1: B√°sica - "S√≥ mala de m√£o inclu√≠da"
2. üì¶ OP√á√ÉO 2: Completa - "Mala de m√£o + bagagem despachada"
3. ‚úÖ OP√á√ÉO 2: Adicionar "Cancelamento/altera√ß√£o com multas"
4. üè∑Ô∏è OP√á√ÉO 2: "Reembols√°vel conforme regras do bilhete"

TEMPLATE OBRIGAT√ìRIO:
*[COMPANHIA] - [ORIGEM] ‚úà [DESTINO]*
[VOOS_DETALHADOS]

üí∞ **OP√á√ÉO 1** - [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da
üí≥ [PARCELAMENTO_1]
üîó [LINK_1]

üí∞ **OP√á√ÉO 2** - [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
üí≥ [PARCELAMENTO_2]
üîó [LINK_2]

Valores sujeitos a confirma√ß√£o e disponibilidade

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR OR√áAMENTO COM 2 OP√á√ïES ESCALONADAS:`;
}

function gerarPromptMultiplasOpcoes3(contexto) {
  return `OR√áAMENTO M√öLTIPLAS OP√á√ïES - 3 PLANOS - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: M√∫ltiplas Op√ß√µes (3 planos)
- Escalonamento: B√°sico ‚Üí Intermedi√°rio ‚Üí Premium

REGRAS ESPEC√çFICAS PARA 3 OP√á√ïES:
1. üì¶ OP√á√ÉO 1: "S√≥ mala de m√£o inclu√≠da"
2. üì¶ OP√á√ÉO 2: "Mala de m√£o + bagagem despachada" + "Cancelamento/altera√ß√£o com multas"
3. üì¶ OP√á√ÉO 3: "Mala de m√£o + 2 bagagens despachadas" + "Reembols√°vel" + "Marca√ß√£o de assento"

TEMPLATE OBRIGAT√ìRIO:
*[COMPANHIA] - [ORIGEM] ‚úà [DESTINO]*
[VOOS_DETALHADOS]

üí∞ **OP√á√ÉO 1** - [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da

üí∞ **OP√á√ÉO 2** - [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas

üí∞ **OP√á√ÉO 3** - [VALOR_3]
‚úÖ Mala de m√£o + 2 bagagens despachadas
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
‚úÖ Marca√ß√£o de assento

Valores sujeitos a confirma√ß√£o e disponibilidade

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR OR√áAMENTO COM 3 OP√á√ïES ESCALONADAS:`;
}

function gerarPromptMultitrecho(contexto) {
  return `OR√áAMENTO MULTITRECHO - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: Multitrecho (roteiro complexo)
- Aeroportos: ${contexto.aeroportos}
- Companhias: ${contexto.companhias}

FORMATA√á√ÉO ESPEC√çFICA MULTITRECHO:
1. üó∫Ô∏è FORMATO: "*Trecho 1:* Origem ‚Üí Destino"
2. üìÖ INCLUIR dura√ß√£o total: "[X] dias e [Y] noites"
3. üí≥ PARCELAMENTO: "at√© 10x sem juros" (padr√£o multitrecho)
4. ‚úàÔ∏è M√öLTIPLAS companhias permitidas

TEMPLATE OBRIGAT√ìRIO:
*Multitrecho - [COMPANHIAS]*
[DATA_IDA] a [DATA_VOLTA] ([DIAS] dias e [NOITES] noites)

*Trecho 1:* [ORIGEM] ‚Üí [DESTINO_1]
[DATA_T1] - [ORIGEM] [HORA_T1] / [DESTINO_1] [HORA_C1] ([TIPO_VOO_1])

*Trecho 2:* [DESTINO_1] ‚Üí [DESTINO_2]
[DATA_T2] - [DESTINO_1] [HORA_T2] / [DESTINO_2] [HORA_C2] ([TIPO_VOO_2])

*Trecho 3:* [DESTINO_2] ‚Üí [ORIGEM]
[DATA_T3] - [DESTINO_2] [HORA_T3] / [ORIGEM] [HORA_C3] ([TIPO_VOO_3])

üí∞ [VALOR_TOTAL] para [PASSAGEIROS]
üí≥ Parcelamento em at√© 10x sem juros no cart√£o, sendo a primeira parcela de [PRIMEIRA] + 9x de [DEMAIS] s/ juros
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
üîó [LINK]

Valores sujeitos a confirma√ß√£o e disponibilidade

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR MULTITRECHO DETALHADO:`;
}

function gerarPromptPacoteCompleto(contexto) {
  return `PACOTE COMPLETO (A√âREO + HOTEL) - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: Pacote Completo
- Destino: ${contexto.destino}
- Inclui: A√©reo + Hotel + Servi√ßos

FORMATA√á√ÉO ESPEC√çFICA PACOTES:
1. üìã LISTA "O Pacote Inclui:" obrigat√≥ria
2. ‚úàÔ∏è SE√á√ÉO voos separada: "*Voos [COMPANHIA]:*"
3. üè® M√öLTIPLAS op√ß√µes de hotel com endere√ßos
4. üöê TRASLADO: "Aeroporto / Hotel / Aeroporto"

TEMPLATE OBRIGAT√ìRIO:
*Pacote [DESTINO]*
Embarque: [DATA_EMBARQUE]
Pacote para [PASSAGEIROS]

*O Pacote Inclui:*
- Passagem A√©rea ida e volta para [DESTINO]
- Taxas de Embarque
- Traslado [TIPO_TRASLADO]
[PASSEIOS_SE_HOUVER]
[SEGURO_SE_HOUVER]
- [NOITES] noites de hospedagem no hotel escolhido

‚úàÔ∏è *Voos [COMPANHIA]:*
[VOOS_DETALHADOS]

**OP√á√ÉO 1** - [HOTEL_1]
[ENDERECO_1_SE_HOUVER]
üõèÔ∏è [QUARTO_1] com [REGIME_1]
üí∞ [VALOR_1] para [PASSAGEIROS]
üîó [LINK_1]

**OP√á√ÉO 2** - [HOTEL_2] [CATEGORIA_SE_HOUVER]
[ENDERECO_2_SE_HOUVER]
üõèÔ∏è [QUARTO_2] com [REGIME_2]
[REEMBOLSAVEL_SE_APLICAVEL]
üí∞ [VALOR_2] para [PASSAGEIROS]
üîó [LINK_2]

Valores sujeitos a confirma√ß√£o e disponibilidade

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR PACOTE COMPLETO:`;
}

function gerarPromptCruzeiro(contexto) {
  return `CRUZEIRO PROFISSIONAL - CVC ITAQUAQUECETUBA

CONTEXTO DETECTADO:
- Tipo: Cruzeiro
- Companhias detectadas: ${contexto.companhias}

FORMATA√á√ÉO ESPEC√çFICA CRUZEIROS:
1. üö¢ T√çTULO: "üö¢ *Cruzeiro [NAVIO]* ‚Äì [X] noites"
2. üìÖ EMBARQUE: Incluir dia da semana
3. üìç PORTO: "Sa√≠da e chegada: [PORTO]"
4. üõèÔ∏è CABINES: Tipos dispon√≠veis

TEMPLATE OBRIGAT√ìRIO:
üö¢ *Cruzeiro [NAVIO]* ‚Äì [DURACAO] noites
[PASSAGEIROS]
üìÖ Embarque: [DATA_EMBARQUE] ([DIA_SEMANA])
üìç Sa√≠da e chegada: [PORTO]
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí• Tarifas dispon√≠veis!
(Sujeita √† confirma√ß√£o de cabine e categoria)

üõè Op√ß√µes de Cabines:
[OPCOES_CABINES]

üìé Link para ver fotos, detalhes e reservar:
[LINK]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa
üö´ N√£o inclui: taxas, bebidas, excurs√µes

üì≤ Me chama pra garantir a sua cabine! üå¥üõ≥Ô∏è

DADOS FORNECIDOS:
${contexto.observacoes}
${contexto.textoColado}

GERAR CRUZEIRO PROFISSIONAL:`;
}

// ================================================================================
// üîß ENRIQUECIMENTO DE PROMPTS
// ================================================================================

function enriquecerPrompt(promptBase, formData, analise) {
  console.log("üîß Enriquecendo prompt com contexto adicional...");
  
  let promptEnriquecido = promptBase;
  
  // Adicionar contexto de confian√ßa se baixa
  if (analise.confiancaDeteccao < 0.7) {
    promptEnriquecido += `\n\n‚ö†Ô∏è ATEN√á√ÉO: Confian√ßa de detec√ß√£o: ${(analise.confiancaDeteccao * 100).toFixed(1)}%
Analise cuidadosamente o contexto e adapte o template se necess√°rio.`;
  }
  
  // Adicionar instru√ß√µes para complexidade alta
  if (analise.complexidade === 'alta') {
    promptEnriquecido += `\n\nüîç COMPLEXIDADE ALTA DETECTADA:
- Analise TODOS os detalhes fornecidos
- Preserve informa√ß√µes espec√≠ficas (links, c√≥digos, hor√°rios)
- Mantenha estrutura de m√∫ltiplas op√ß√µes se presente`;
  }
  
  // Adicionar instru√ß√µes para imagens
  if (formData.imagemBase64) {
    promptEnriquecido += `\n\nüì∏ IMAGEM ANEXADA:
- Extraia TODOS os dados vis√≠veis da imagem
- Preserve hor√°rios, pre√ßos e c√≥digos exatos
- Mantenha links se vis√≠veis`;
  }
  
  // Adicionar contexto de parcelamento
  if (formData.parcelamento?.incluirParcelamento) {
    promptEnriquecido += `\n\nüí≥ INCLUIR PARCELAMENTO:
- Calcular parcelamento em ${formData.parcelamento.parcelas || 10}x
- Formato: "${formData.parcelamento.parcelas}x de R$ [VALOR] s/ juros no cart√£o"`;
  }
  
  return promptEnriquecido;
}

// ================================================================================
// üéØ PROMPTS ESPEC√çFICOS PARA RANKING E DICAS
// ================================================================================

export function gerarPromptRankingHoteis(destino) {
  return `RANKING DE HOT√âIS - ${destino.toUpperCase()} - CVC ITAQUAQUECETUBA

OBJETIVO: Gerar ranking profissional dos 5 melhores hot√©is

FORMATA√á√ÉO OBRIGAT√ìRIA:
1. üèÜ T√çTULO: "*üèÜ TOP 5 HOT√âIS - ${destino.toUpperCase()}*"
2. ü•á NUMERA√á√ÉO: ü•á 1. / ü•à 2. / ü•â 3. / üèÜ 4. / üèÜ 5.
3. ‚≠ê CATEGORIA: "‚≠ê‚≠ê‚≠ê‚≠ê" (estrelas visuais)
4. üìç LOCALIZA√á√ÉO: Bairro ou regi√£o espec√≠fica
5. üí∞ FAIXA DE PRE√áO: "R$ XXX-XXX por di√°ria"
6. ‚≠ê DESTAQUE: Principais amenidades

TEMPLATE OBRIGAT√ìRIO:
*üèÜ TOP 5 HOT√âIS - ${destino.toUpperCase()}*

ü•á *1. [NOME_HOTEL] - [ESTRELAS]*
üìç [LOCALIZACAO]
üí∞ R$ [FAIXA] por di√°ria
‚≠ê [DESTAQUES]

[Repetir para os 5 hot√©is]

üì± *CVC Itaquaquecetuba - Sua melhor escolha!*

DESTINO: ${destino}

GERAR RANKING PROFISSIONAL:`;
}

export function gerarPromptDicasDestino(destino) {
  return `DICAS DE VIAGEM - ${destino.toUpperCase()} - CVC ITAQUAQUECETUBA

OBJETIVO: Gerar dicas pr√°ticas e √∫teis para o destino

FORMATA√á√ÉO OBRIGAT√ìRIA:
1. üí° T√çTULO: "*üí° DICAS DE VIAGEM - ${destino.toUpperCase()}*"
2. üå°Ô∏è MELHOR √âPOCA: Clima e temporadas
3. üéØ ATRA√á√ïES: Pontos tur√≠sticos principais
4. üçΩÔ∏è GASTRONOMIA: Pratos t√≠picos locais
5. üí° DICAS PR√ÅTICAS: Informa√ß√µes √∫teis

TEMPLATE OBRIGAT√ìRIO:
*üí° DICAS DE VIAGEM - ${destino.toUpperCase()}*

*üå°Ô∏è MELHOR √âPOCA:*
[CLIMA_E_TEMPORADAS]

*üéØ ATRA√á√ïES IMPERD√çVEIS:*
‚Ä¢ [ATRACAO_1]
‚Ä¢ [ATRACAO_2]
‚Ä¢ [ATRACAO_3]
‚Ä¢ [ATRACAO_4]

*üçΩÔ∏è GASTRONOMIA LOCAL:*
‚Ä¢ [PRATO_1]
‚Ä¢ [PRATO_2]
‚Ä¢ [PRATO_3]
‚Ä¢ [BEBIDA_TIPICA]

*üí° DICAS IMPORTANTES:*
‚Ä¢ [DICA_1]
‚Ä¢ [DICA_2]
‚Ä¢ [DICA_3]
‚Ä¢ [DICA_4]

üì± *Entre em contato para mais informa√ß√µes espec√≠ficas!*

DESTINO: ${destino}

GERAR DICAS PROFISSIONAIS:`;
}

export function gerarPromptAnaliseRelatorio(tipoAnalise) {
  return `AN√ÅLISE E RELAT√ìRIO - ${tipoAnalise.toUpperCase()} - CVC ITAQUAQUECETUBA

CONTEXTO: An√°lise detalhada para relat√≥rio profissional

INSTRU√á√ïES:
1. üìä APRESENTAR dados de forma estruturada
2. üìà INCLUIR m√©tricas e estat√≠sticas relevantes
3. üéØ DESTACAR insights principais
4. üìã FORNECER conclus√µes pr√°ticas

FORMATO OBRIGAT√ìRIO:
- Se√ß√µes bem definidas
- Dados quantitativos
- An√°lise qualitativa
- Recomenda√ß√µes finais

TIPO DE AN√ÅLISE: ${tipoAnalise}

GERAR RELAT√ìRIO PROFISSIONAL:`;
}

// ================================================================================
// üîß AJUSTES POR MODELO DE IA
// ================================================================================

export function ajustarPromptParaModelo(prompt, modelo) {
  console.log(`üîß Ajustando prompt para modelo: ${modelo}`);
  
  const ajustes = {
    'gpt-4o-mini': (p) => {
      // GPT-4o Mini: Prompts mais concisos e diretos
      return p.replace(/FORMATA√á√ÉO OBRIGAT√ìRIA:[\s\S]*?(?=TEMPLATE|DADOS)/g, 'REGRAS:\n')
              .replace(/\d+\.\s*[‚è∞üìÖ‚úàÔ∏èüõ´üí≥üë•üß≥üë∂üè∑Ô∏èüí∞üì±üîß]\s*/g, '‚Ä¢ ');
    },
    'gpt-4o': (p) => {
      // GPT-4o: Pode lidar com prompts mais complexos
      return p; // Manter prompt completo
    },
    'claude-3-5-sonnet': (p) => {
      // Claude: Prefer√™ncia por estruturas mais claras
      return p.replace(/GERAR ([A-Z\s]+):$/, 'Gere o $1 seguindo exatamente as regras acima:');
    }
  };
  
  const ajustador = ajustes[modelo] || ajustes['gpt-4o-mini'];
  return ajustador(prompt);
}

// ================================================================================
// ‚úÖ VALIDA√á√ÉO DE PROMPTS
// ================================================================================

export function validarPrompt(prompt, tipoDetectado) {
  const validacao = {
    valido: true,
    problemas: [],
    sugestoes: []
  };
  
  // Verificar tamanho
  const tamanho = calcularTamanhoPrompt(prompt);
  if (tamanho.tokens_estimados > 3000) {
    validacao.problemas.push('Prompt muito longo (pode ser truncado)');
    validacao.sugestoes.push('Considerar simplificar instru√ß√µes');
  }
  
  // Verificar elementos obrigat√≥rios
  const elementosObrigatorios = [
    'FORMATA√á√ÉO',
    'TEMPLATE',
    'GERAR'
  ];
  
  elementosObrigatorios.forEach(elemento => {
    if (!prompt.includes(elemento)) {
      validacao.problemas.push(`Elemento obrigat√≥rio ausente: ${elemento}`);
    }
  });
  
  // Verificar coer√™ncia com tipo detectado
  if (tipoDetectado?.includes('cruzeiro') && !prompt.includes('üö¢')) {
    validacao.problemas.push('Prompt de cruzeiro sem emoji de navio');
  }
  
  if (tipoDetectado?.includes('multiplas') && !prompt.includes('OP√á√ÉO')) {
    validacao.problemas.push('Prompt de m√∫ltiplas op√ß√µes sem numera√ß√£o');
  }
  
  validacao.valido = validacao.problemas.length === 0;
  
  return validacao;
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES
// ================================================================================

function calcularTamanhoPrompt(prompt) {
  return {
    caracteres: prompt.length,
    tokens_estimados: Math.ceil(prompt.length / 4), // Estimativa aproximada
    categoria: prompt.length < 1000 ? 'pequeno' : prompt.length < 2000 ? 'm√©dio' : 'grande'
  };
}

function gerarPromptFallback(formData) {
  console.log("üîß Gerando prompt de fallback...");
  
  return `OR√áAMENTO PROFISSIONAL - CVC ITAQUAQUECETUBA

DADOS FORNECIDOS:
- Destino: ${formData.destino || 'A definir'}
- Tipos: ${formData.tipos?.join(', ') || 'A√©reo Nacional'}
- Passageiros: ${formData.adultos || 2} adulto(s)${formData.criancas ? ` + ${formData.criancas} crian√ßa(s)` : ''}

OBSERVA√á√ïES:
${formData.observacoes || 'Sem observa√ß√µes espec√≠ficas'}

TEXTO COLADO:
${formData.textoColado || 'Nenhum texto adicional'}

INSTRU√á√ïES:
1. Gerar or√ßamento profissional formatado para WhatsApp
2. Usar emojis apropriados (‚úàÔ∏è üí∞ ‚úÖ üè∑Ô∏è)
3. Incluir separador "--" entre ida e volta
4. Formato de valores: "R$ 1.247,80"
5. Bagagem: "S√≥ mala de m√£o inclu√≠da" (padr√£o)
6. Reembolso: "N√£o reembols√°vel" (padr√£o)

GERAR OR√áAMENTO PROF
