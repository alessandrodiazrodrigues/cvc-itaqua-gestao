function construirContexto(formData, analise) {
  console.log("üèóÔ∏è Construindo contexto inteligente...");
  
  return {
    // Dados b√°sicos
    tipos: formData.tipos?.join(", ") || "Or√ßamento geral",
    observacoes: formData.observacoes || "",
    textoColado: formData.textoColado || "",
    
    // Dados extra√≠dos da an√°lise
    tipoDetectado: analise.tipoDetectado,
    confianca: analise.confiancaDeteccao,
    complexidade: analise.complexidade,
    numeroOpcoes: analise.numeroOpcoes || 1,
    
    // Contexto espec√≠fico
    aeroportos: analise.aeroportosDetectados?.join(", ") || "A detectar",
    companhias: analise.companhiasDetectadas?.join(", ") || "A detectar",
    precos: analise.numeroPrecos || 0,
    datas: analise.numeroDatas || 0,
    
    // Informa√ß√µes do usu√°rio
    destino: formData.destino || "A detectar",
    adultos: formData.adultos || "A detectar",
    criancas: formData.criancas || 0,
    idadesCriancas: formData.idadesCriancas || [],
    
    // Configura√ß√µes especiais
    parcelamento: formData.parcelamento || {},
    isImagem: !!formData.imagemBase64,
    
    // Flags importantes
    temEscalas: analise.temEscalas || false,
    temMultiplasOpcoes: analise.temMultiplasOpcoes || false,
    isIdaVolta: analise.isIdaVolta || false,
    isSomenteIda: analise.isSomenteIda || false
  };
}

// ================================================================================
// ‚öôÔ∏è DETERMINA√á√ÉO DE ESTRAT√âGIA
// ================================================================================

function determinarEstrategia(analise) {
  console.log("‚öôÔ∏è Determinando estrat√©gia de prompt...");
  
  const estrategia = {
    foco: 'formatacao_profissional',
    detalhamento: 'medio',
    validacao: 'padrao',
    modelo_recomendado: 'gpt-4o-mini'
  };
  
  // Ajustes baseados na complexidade
  switch (analise.complexidade) {
    case 'muito_alta':
      estrategia.foco = 'precisao_maxima';
      estrategia.detalhamento = 'alto';
      estrategia.validacao = 'rigorosa';
      estrategia.modelo_recomendado = 'gpt-4o';
      break;
      
    case 'alta':
      estrategia.foco = 'formatacao_e_precisao';
      estrategia.detalhamento = 'alto';
      estrategia.validacao = 'elevada';
      estrategia.modelo_recomendado = 'gpt-4o-mini';
      break;
      
    case 'baixa':
      estrategia.foco = 'eficiencia';
      estrategia.detalhamento = 'basico';
      estrategia.validacao = 'basica';
      estrategia.modelo_recomendado = 'gpt-4o-mini';
      break;
  }
  
  // Ajustes baseados no tipo
  if (analise.temMultiplasOpcoes) {
    estrategia.foco = 'comparacao_opcoes';
  }
  
  if (analise.tipoDetectado?.includes('cruzeiro')) {
    estrategia.foco = 'detalhamento_servicos';
  }
  
  if (analise.tipoDetectado?.includes('multitrecho')) {
    estrategia.detalhamento = 'alto';
    estrategia.validacao = 'elevada';
  }
  
  return estrategia;
}

// ================================================================================
// üéØ SELE√á√ÉO DE PROMPT POR TIPO
// ================================================================================

function selecionarPromptPorTipo(tipoDetectado, contexto, estrategia) {
  console.log(`üéØ Selecionando prompt para tipo: ${tipoDetectado}`);
  
  const prompts = {
    aereoNacionalSimples: promptAereoNacionalSimples,
    aereoConexaoDetalhada: promptAereoConexaoDetalhada,
    aereoSomenteIda: promptAereoSomenteIda,
    multiplasOpcoes2: promptMultiplasOpcoes2,
    multiplasOpcoes3: promptMultiplasOpcoes3,
    multitrecho: promptMultitrecho,
    multiplasCompanhiasInternacionais: promptMultiplasCompanhiasInternacionais,
    pacoteCompleto: promptPacoteCompleto,
    cruzeiro: promptCruzeiro
  };
  
  const promptFunction = prompts[tipoDetectado] || prompts.aereoNacionalSimples;
  return promptFunction(contexto, estrategia);
}

// ================================================================================
// ‚úàÔ∏è PROMPTS ESPEC√çFICOS POR TIPO
// ================================================================================

function promptAereoNacionalSimples(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO NACIONAL SIMPLES

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: A√©reo Nacional Ida e Volta Simples
- Confian√ßa: ${(contexto.confianca * 100).toFixed(0)}%
- Complexidade: ${contexto.complexidade}

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - A√âREO NACIONAL SIMPLES:

*[COMPANHIA]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ R$ [VALOR] para [PASSAGEIROS]
${contexto.parcelamento.incluirParcelamento ? 'üí≥ [PARCELAMENTO]' : ''}
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
${contexto.isImagem ? 'üîó [LINK se detectado na imagem]' : ''}

REGRAS CR√çTICAS:
1. ‚è∞ HOR√ÅRIOS: "06:20" (NUNCA "06: 20")
2. ‚úàÔ∏è AEROPORTOS: CGH ‚Üí Congonhas, GRU ‚Üí Guarulhos
3. üõ´ CONEX√ïES: "com conex√£o" (NUNCA "escala")
4. üë• PASSAGEIROS: "02 adultos" (zero √† esquerda)
5. üß≥ BAGAGEM: "S√≥ mala de m√£o inclu√≠da" (padr√£o nacional)
6. üí∞ VALORES: "R$ 1.464,02" (espa√ßo ap√≥s R$)
7. üìÖ SEPARADOR: "--" entre ida e volta
8. üßπ SEM cabe√ßalhos t√©cnicos na resposta

${contexto.destino !== 'A detectar' ? `DESTINO CONFIRMADO: ${contexto.destino}` : ''}
${contexto.adultos !== 'A detectar' ? `PASSAGEIROS CONFIRMADOS: ${contexto.adultos} adultos` : ''}

GERAR OR√áAMENTO LIMPO PARA WHATSAPP:`;
}

function promptAereoConexaoDetalhada(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO COM CONEX√ÉO DETALHADA

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: A√©reo com Conex√£o Detalhada
- Conex√µes identificadas: ${contexto.temEscalas ? 'SIM' : 'POSS√çVEL'}
- Aeroportos detectados: ${contexto.aeroportos}

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - CONEX√ÉO DETALHADA:

*[COMPANHIA]*
[DD/MM] - [ORIGEM] [HH:MM] / [CONEX√ÉO] [HH:MM] (voo direto)
(conex√£o em [CONEX√ÉO] - [TEMPO] de espera)
[DD/MM] - [CONEX√ÉO] [HH:MM] / [DESTINO] [HH:MM] (voo direto)
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ R$ [VALOR] para [PASSAGEIROS]
üí≥ [PARCELAMENTO se solicitado]
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
üîó [LINK se detectado]

INSTRU√á√ïES ESPEC√çFICAS PARA CONEX√ïES:
1. üîç DETECTAR cada trecho da conex√£o separadamente
2. ‚è±Ô∏è MOSTRAR tempo de espera entre voos
3. üè¢ IDENTIFICAR aeroporto de conex√£o (BSB, FOR, REC)
4. üõ´ ESPECIFICAR "voo direto" para cada trecho individual
5. üìç FORMATO: "conex√£o em [CIDADE] - [TEMPO] de espera"

GERAR OR√áAMENTO COM CONEX√ÉO DETALHADA:`;
}

function promptAereoSomenteIda(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - A√âREO SOMENTE IDA

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: A√©reo Somente Ida
- Sem volta detectada
- Datas identificadas: ${contexto.datas}

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - SOMENTE IDA:

*[COMPANHIA]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])

üí∞ Valor total para [PASSAGEIROS] = R$ [VALOR]
Valores sujeitos a confirma√ß√£o e disponibilidade
Inclui taxas de embarque
Inclui 1 item pessoal + 01 mala de m√£o de 10kg por pessoa
üè∑Ô∏è N√£o reembols√°vel

‚ö†Ô∏è Passagem somente de ida - sem retorno inclu√≠do

REGRAS ESPEC√çFICAS SOMENTE IDA:
1. üö´ N√ÉO incluir separador "--"
2. üö´ N√ÉO mencionar volta ou retorno
3. ‚ö†Ô∏è SEMPRE incluir aviso "somente de ida"
4. üì¶ ESPECIFICAR bagagem detalhada
5. üí∞ FORMATO especial: "Valor total para [X] = R$ [Y]"

GERAR OR√áAMENTO SOMENTE IDA:`;
}

function promptMultiplasOpcoes2(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS OP√á√ïES (2 PLANOS)

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: M√∫ltiplas Op√ß√µes - 2 Planos
- Op√ß√µes identificadas: ${contexto.numeroOpcoes}
- Pre√ßos detectados: ${contexto.precos}

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - 2 OP√á√ïES:

*[COMPANHIA]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ **OP√á√ÉO 1** - R$ [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da
üí≥ [PARCELAMENTO_1 se solicitado]
üîó [LINK_1 se detectado]

üí∞ **OP√á√ÉO 2** - R$ [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
üí≥ [PARCELAMENTO_2 se solicitado]
üîó [LINK_2 se detectado]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS ESPEC√çFICAS M√öLTIPLAS OP√á√ïES:
1. üî¢ NUMERA√á√ÉO: "**OP√á√ÉO 1**", "**OP√á√ÉO 2**" (negrito)
2. üß≥ BAGAGEM ESCALONADA:
   - Op√ß√£o 1: "S√≥ mala de m√£o inclu√≠da"
   - Op√ß√£o 2: "Mala de m√£o + bagagem despachada"
3. üí∞ ORDEM: Menor pre√ßo primeiro
4. ‚úÖ SERVI√áOS PROGRESSIVOS: Op√ß√£o 2 tem mais benef√≠cios
5. üîó LINKS INDIVIDUAIS se detectados

GERAR M√öLTIPLAS OP√á√ïES FORMATADAS:`;
}

function promptMultiplasOpcoes3(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS OP√á√ïES (3 PLANOS)

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: M√∫ltiplas Op√ß√µes - 3 Planos
- Sistema escalonado detectado
- Op√ß√£o premium identificada

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - 3 OP√á√ïES ESCALONADAS:

*[COMPANHIA]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ **OP√á√ÉO 1** - R$ [VALOR_1]
‚úÖ S√≥ mala de m√£o inclu√≠da

üí∞ **OP√á√ÉO 2** - R$ [VALOR_2]
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas

üí∞ **OP√á√ÉO 3** - R$ [VALOR_3]
‚úÖ Mala de m√£o + 2 bagagens despachadas
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
‚úÖ Marca√ß√£o de assento

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS ESPEC√çFICAS 3 OP√á√ïES:
1. üìà ESCALONAMENTO PROGRESSIVO:
   - Op√ß√£o 1: B√°sica (s√≥ mala de m√£o)
   - Op√ß√£o 2: Intermedi√°ria (+ bagagem + cancelamento)
   - Op√ß√£o 3: Premium (+ 2 bagagens + reembolso + assento)
2. üí∞ ORDEM CRESCENTE de pre√ßos
3. ‚úÖ BENEF√çCIOS CUMULATIVOS
4. üéØ OP√á√ÉO 3 = Experi√™ncia completa

GERAR 3 OP√á√ïES ESCALONADAS:`;
}

function promptMultitrecho(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - MULTITRECHO

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: Viagem Multitrecho
- Roteiro complexo identificado
- M√∫ltiplas datas e destinos

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - MULTITRECHO:

*Multitrecho - [COMPANHIAS]*
[DD/MM] a [DD/MM] ([X] dias e [Y] noites)

*Trecho 1:* [ORIGEM_1] ‚Üí [DESTINO_1]
[DD/MM] - [ORIGEM_1] [HH:MM] / [DESTINO_1] [HH:MM] ([TIPO_VOO])

*Trecho 2:* [ORIGEM_2] ‚Üí [DESTINO_2]
[DD/MM] - [ORIGEM_2] [HH:MM] / [DESTINO_2] [HH:MM] ([TIPO_VOO])

*Trecho 3:* [ORIGEM_3] ‚Üí [DESTINO_3]
[DD/MM] - [ORIGEM_3] [HH:MM] / [DESTINO_3] [HH:MM] ([TIPO_VOO])

üí∞ R$ [VALOR_TOTAL] para [PASSAGEIROS]
üí≥ Parcelamento em at√© 10x sem juros no cart√£o, sendo a primeira parcela de R$ [X] + 9x de R$ [Y] s/ juros
‚úÖ S√≥ mala de m√£o inclu√≠da
üè∑Ô∏è N√£o reembols√°vel
üîó [LINK se detectado]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS ESPEC√çFICAS MULTITRECHO:
1. üó∫Ô∏è NUMERA√á√ÉO: "*Trecho 1:*", "*Trecho 2:*", etc.
2. ‚û°Ô∏è SETAS: "Origem ‚Üí Destino" para cada trecho
3. üìÖ PER√çODO TOTAL: Calcular dias e noites totais
4. üõ´ M√öLTIPLAS COMPANHIAS poss√≠veis
5. üí≥ PARCELAMENTO ESTENDIDO (at√© 10x)

GERAR MULTITRECHO DETALHADO:`;
}

function promptMultiplasCompanhiasInternacionais(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - M√öLTIPLAS COMPANHIAS INTERNACIONAIS

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: M√∫ltiplas Companhias Internacionais
- Destino internacional: ${contexto.destino}
- Companhias identificadas: ${contexto.companhias}

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - M√öLTIPLAS COMPANHIAS:

*OP√á√ÉO 1 - [COMPANHIA_1] - [ORIGEM] ‚úà [DESTINO]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ R$ [VALOR_1] para [PASSAGEIROS]
üí≥ [PARCELAMENTO_1 se solicitado]
üîó [LINK_1 se detectado]

*OP√á√ÉO 2 - [COMPANHIA_2] - [ORIGEM] ‚úà [DESTINO]*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

üí∞ R$ [VALOR_2] para [PASSAGEIROS]
üí≥ [PARCELAMENTO_2 se solicitado]
üîó [LINK_2 se detectado]

üè∑Ô∏è N√£o reembols√°vel
Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS ESPEC√çFICAS M√öLTIPLAS COMPANHIAS:
1. üè¢ COMPANHIAS DESTACADAS: Nome da companhia no cabe√ßalho
2. üåç FORMATO INTERNACIONAL: "Origem ‚úà Destino"
3. üß≥ BAGAGEM: "Mala de m√£o + bagagem despachada 23kg"
4. üí∞ COMPARA√á√ÉO: Focar nas diferen√ßas de pre√ßo/servi√ßo
5. üîó LINKS INDIVIDUAIS para cada companhia

GERAR COMPARATIVO DE COMPANHIAS:`;
}

function promptPacoteCompleto(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - PACOTE COMPLETO

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: Pacote Completo (A√©reo + Hotel + Servi√ßos)
- Estrutura de pacote identificada
- M√∫ltiplas op√ß√µes de hospedagem poss√≠veis

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - PACOTE COMPLETO:

*Pacote [DESTINO]*
Embarque: [DD/MM]
Pacote para [PASSAGEIROS]

*O Pacote Inclui:*
- Passagem A√©rea ida e volta para [DESTINO]
- Taxas de Embarque
- Traslado Aeroporto / Hotel / Aeroporto
- [PASSEIOS se houver]
- [SEGURO se houver]
- [X] noites de hospedagem no hotel escolhido

‚úàÔ∏è *Voos [COMPANHIA]:*
[DD/MM] - [ORIGEM] [HH:MM] / [DESTINO] [HH:MM] ([TIPO_VOO])
--
[DD/MM] - [DESTINO] [HH:MM] / [ORIGEM] [HH:MM] ([TIPO_VOO])

**OP√á√ÉO 1** - [HOTEL_1]
üìç [ENDERE√áO_1 se fornecido]
üõèÔ∏è [TIPO_QUARTO] com [REGIME_ALIMENTA√á√ÉO]
üí∞ R$ [VALOR_1] para [PASSAGEIROS]
üîó [LINK_1 se detectado]

**OP√á√ÉO 2** - [HOTEL_2] [‚≠ê CATEGORIA se especial]
üìç [ENDERE√áO_2 se fornecido]
üõèÔ∏è [TIPO_QUARTO] com [REGIME_ALIMENTA√á√ÉO]
‚úÖ Reembols√°vel conforme regras do bilhete [se aplic√°vel]
üí∞ R$ [VALOR_2] para [PASSAGEIROS]
üîó [LINK_2 se detectado]

Valores sujeitos a confirma√ß√£o e disponibilidade

REGRAS ESPEC√çFICAS PACOTE:
1. üì¶ SE√á√ÉO "O Pacote Inclui:" obrigat√≥ria
2. ‚úàÔ∏è VOOS: Se√ß√£o separada ap√≥s inclus√µes
3. üè® HOT√âIS: Op√ß√µes numeradas com detalhes
4. üìç ENDERE√áOS: Incluir se fornecidos
5. üõèÔ∏è QUARTOS: Especificar tipo e regime

GERAR PACOTE COMPLETO ESTRUTURADO:`;
}

function promptCruzeiro(contexto, estrategia) {
  return `OR√áAMENTO CVC ITAQUA - CRUZEIRO

AN√ÅLISE INTELIGENTE DETECTOU:
- Tipo: Cruzeiro
- Estrutura por cabines identificada
- Sistema de pre√ßos por acomoda√ß√£o

DADOS DA VIAGEM:
${contexto.observacoes}

${contexto.textoColado ? `INFORMA√á√ïES COMPLEMENTARES:
${contexto.textoColado}` : ''}

FORMATA√á√ÉO OBRIGAT√ìRIA - CRUZEIRO:

üö¢ *Cruzeiro [NAVIO]* ‚Äì [X] noites
Para: [PASSAGEIROS]
üìÖ Embarque: [DD/MM] ([PORTO])
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí∞ *Op√ß√µes de Cabines:*
**CABINE INTERNA** - R$ [VALOR_1] ([OCUPA√á√ÉO])
**CABINE EXTERNA** - R$ [VALOR_2] ([OCUPA√á√ÉO])
**CABINE COM VARANDA** - R$ [VALOR_3] ([OCUPA√á√ÉO])
**SU√çTE** - R$ [VALOR_4] ([OCUPA√á√ÉO])

üó∫Ô∏è *Itiner√°rio:* [se fornecido]
[ROTEIRO_DETALHADO]

üçπ *Pacotes de Bebidas:* [se fornecido]
[PACOTES_BEBIDAS]

‚úÖ Inclui: hospedagem a bordo, pens√£o completa, entretenimento
üö´ N√£o inclui: taxas portu√°rias, bebidas, excurs√µes

üìã Documenta√ß√£o: RG original (m√°x. 10 anos) ou passaporte

üîó [LINK se detectado]

üì≤ Me chama pra garantir a sua cabine! üå¥üõ≥Ô∏è

REGRAS ESPEC√çFICAS CRUZEIRO:
1. üö¢ EMOJI DE NAVIO obrigat√≥rio no in√≠cio
2. üõèÔ∏è CABINES: Pre√ßos POR CABINE (n√£o por pessoa)
3. üìã DOCUMENTA√á√ÉO: Sempre incluir requisitos
4. üó∫Ô∏è ITINER√ÅRIO: S√≥ se fornecido explicitamente
5. üçπ BEBIDAS: S√≥ mencionar se informado
6. üí∞ OCUPA√á√ÉO: Especificar quantas pessoas por cabine

GERAR OR√áAMENTO DE CRUZEIRO:`;
}

// ================================================================================
// üîß ENRIQUECIMENTO DE PROMPT
// ================================================================================

function enriquecerPrompt(promptBase, formData, analise) {
  console.log("üîß Enriquecendo prompt com contexto avan√ßado...");
  
  let promptEnriquecido = promptBase;
  
  // Adicionar instru√ß√µes de parcelamento se solicitado
  if (formData.parcelamento?.incluirParcelamento) {
    promptEnriquecido += adicionarInstrucoesParcelamento(formData.parcelamento);
  }
  
  // Adicionar instru√ß√µes especiais para imagens
  if (formData.imagemBase64) {
    promptEnriquecido += adicionarInstrucoesImagem();
  }
  
  // Adicionar valida√ß√µes baseadas na confian√ßa
  if (analise.confiancaDeteccao < 0.7) {
    promptEnriquecido += adicionarValidacaoExtra();
  }
  
  // Adicionar instru√ß√µes de complexidade
  if (analise.complexidade === 'muito_alta') {
    promptEnriquecido += adicionarInstrucoesComplexidade();
  }
  
  // Adicionar contexto de crian√ßas se necess√°rio
  if (formData.criancas > 0) {
    promptEnriquecido += adicionarContextoCriancas(formData);
  }
  
  return promptEnriquecido;
}

function adicionarInstrucoesParcelamento(parcelamento) {
  let instrucoes = '\n\nCONFIGURA√á√ÉO DE PARCELAMENTO:';
  
  if (parcelamento.parcelas10x && parcelamento.parcelas12x) {
    instrucoes += '\n- Incluir op√ß√µes de 10x E 12x sem juros';
    instrucoes += '\n- Formato: "10x de R$ [X] s/ juros" E "12x de R$ [Y] s/ juros"';
  } else if (parcelamento.parcelas10x) {
    instrucoes += '\n- Incluir APENAS op√ß√£o de 10x sem juros';
    instrucoes += '\n- Formato: "10x de R$ [X] s/ juros no cart√£o"';
  } else if (parcelamento.parcelas12x) {
    instrucoes += '\n- Incluir APENAS op√ß√£o de 12x sem juros';
    instrucoes += '\n- Formato: "12x de R$ [X] s/ juros no cart√£o"';
  }
  
  instrucoes += '\n- SEMPRE calcular o valor das parcelas automaticamente';
  instrucoes += '\n- NUNCA usar "entrada" - sempre "primeira parcela"';
  
  return instrucoes;
}

function adicionarInstrucoesImagem() {
  return `\n\nINSTRU√á√ïES ESPECIAIS PARA AN√ÅLISE DE IMAGEM:
- Analisar CUIDADOSAMENTE todos os elementos visuais
- Extrair hor√°rios, pre√ßos e informa√ß√µes exatos da imagem
- Identificar automaticamente o tipo de layout (vertical, horizontal, tabular)
- Detectar m√∫ltiplas op√ß√µes se houver caixas/se√ß√µes separadas
- Preservar links se vis√≠veis na imagem
- Converter c√≥digos de aeroportos mesmo se aparecem na imagem`;
}

function adicionarValidacaoExtra() {
  return `\n\nVALIDA√á√ÉO EXTRA (Confian√ßa Baixa):
- REVISAR cuidadosamente o tipo de or√ßamento detectado
- CONFIRMAR se √© ida/volta ou somente ida
- VERIFICAR se h√° m√∫ltiplas op√ß√µes real ou aparente
- VALIDAR todos os hor√°rios e datas antes de formatar
- EM CASO DE D√öVIDA, usar template mais simples`;
}

function adicionarInstrucoesComplexidade() {
  return `\n\nINSTRU√á√ïES DE ALTA COMPLEXIDADE:
- Aplicar m√°ximo rigor na formata√ß√£o
- Verificar TODAS as regras cr√≠ticas
- Detalhar conex√µes se houver
- Organizar informa√ß√µes de forma clara e hier√°rquica
- Priorizar legibilidade e profissionalismo`;
}

function adicionarContextoCriancas(formData) {
  let contexto = '\n\nCONTEXTO DE CRIAN√áAS:';
  
  if (formData.idadesCriancas && formData.idadesCriancas.length > 0) {
    if (formData.idadesCriancas.length === 1) {
      contexto += `\n- Formato: "${formData.criancas.toString().padStart(2, '0')} crian√ßa (${formData.idadesCriancas[0]} anos)"`;
    } else {
      contexto += `\n- Formato: "${formData.criancas.toString().padStart(2, '0')} crian√ßas (${formData.idadesCriancas.join(' e ')} anos)"`;
    }
  } else {
    contexto += `\n- Formato: "${formData.criancas.toString().padStart(2, '0')} ${formData.criancas === 1 ? 'crian√ßa' : 'crian√ßas'}" (sem idades)`;
  }
  
  contexto += '\n- SEMPRE incluir idades se fornecidas';
  contexto += '\n- Usar zero √† esquerda para n√∫meros menores que 10';
  
  return contexto;
}

// ================================================================================
// üîÑ PROMPT FALLBACK
// ================================================================================

function gerarPromptFallback(formData) {
  console.log("üîÑ Gerando prompt fallback...");
  
  const tiposTexto = formData.tipos?.join(", ") || "Or√ßamento geral";
  
  return `OR√áAMENTO CVC ITAQUA - MODO SEGURO

TIPOS SELECIONADOS: ${tiposTexto}

DADOS DA VIAGEM:
${formData.observacoes || 'N√£o informado'}

${formData.textoColado ? `INFORMA√á√ïES ADICIONAIS:
${formData.textoColado}` : ''}

REGRAS OBRIGAT√ìRIAS (MODO SEGURO):
1. üßπ FORMATO LIMPO: Sem cabe√ßalhos t√©cnicos, pronto para WhatsApp
2. ‚è∞ HOR√ÅRIOS: Formato "06:20" (nunca "06: 20")
3. üìÖ DATAS: Formato "15/11" (DD/MM)
4. ‚úàÔ∏è AEROPORTOS: Converter c√≥digos (CGH ‚Üí Congonhas, GRU ‚Üí Guarulhos)
5. üí∞ PRE√áOS: Usar apenas valores reais fornecidos
6. üë• PASSAGEIROS: "02 adultos" (com zero √† esquerda)
7. üß≥ BAGAGEM NACIONAL: "S√≥ mala de m√£o inclu√≠da" (padr√£o)
8. üß≥ BAGAGEM INTERNACIONAL: "Mala de m√£o + bagagem despachada 23kg"
9. üè∑Ô∏è REEMBOLSO: "N√£o reembols√°vel" OU "Reembols√°vel conforme regras do bilhete"
10. üõ´ CONEX√ïES: "com conex√£o" (nunca "escala")

CAMPOS DISPON√çVEIS:
${formData.destino ? `- Destino: ${formData.destino}` : '- Destino: A detectar'}
${formData.adultos ? `- Adultos: ${formData.adultos}` : '- Adultos: A detectar'}
${formData.criancas > 0 ? `- Crian√ßas: ${formData.criancas}${formData.idadesCriancas?.length > 0 ? ` (${formData.idadesCriancas.join(', ')} anos)` : ''}` : ''}

${formData.parcelamento?.incluirParcelamento ? 
`PARCELAMENTO SOLICITADO:
${formData.parcelamento.parcelas10x ? '- Incluir 10x sem juros' : ''}
${formData.parcelamento.parcelas12x ? '- Incluir 12x sem juros' : ''}
- Calcular automaticamente o valor das parcelas` :
'PARCELAMENTO: N√£o incluir (exceto se expl√≠cito nas observa√ß√µes)'}

GERAR OR√áAMENTO PROFISSIONAL LIMPO:`;
}

// ================================================================================
// üéØ PROMPTS PARA FUNCIONALIDADES AUXILIARES
// ================================================================================

function gerarPromptDicasDestino(destino, contexto) {
  return `DICAS PERSONALIZADAS - ${destino.toUpperCase()}

CONTEXTO:
- Destino: ${destino}
- Per√≠odo: ${contexto.periodo || 'A definir'}
- Viajantes: ${contexto.passageiros || 'Fam√≠lia'}
- Tipo de viagem: ${contexto.tipoViagem || 'Lazer'}

GERAR DICAS PR√ÅTICAS E PERSONALIZADAS:

üåü *DICAS DE ${destino.toUpperCase()}*

üóìÔ∏è *Melhor √©poca:* [An√°lise do per√≠odo e clima]
üéØ *Atra√ß√µes imperd√≠veis:* [Baseado no perfil dos viajantes]
üçΩÔ∏è *Gastronomia local:* [Pratos t√≠picos e onde encontrar]
üè® *Onde ficar:* [Melhores regi√µes por tipo de viagem]
üöó *Como se locomover:* [Transporte local e dicas]
üí° *Dicas importantes:* [Informa√ß√µes pr√°ticas espec√≠ficas]
üí∞ *Or√ßamento m√©dio:* [Custos aproximados por categoria]
üì± *Apps √∫teis:* [Aplicativos recomendados]

FORMATO:
- Informa√ß√µes pr√°ticas e atualizadas
- Linguagem acess√≠vel e amig√°vel
- Dicas espec√≠ficas para o perfil identificado
- Sem informa√ß√µes gen√©ricas demais`;
}

function gerarPromptRankingHoteis(destino, contexto) {
  return `RANKING DE HOT√âIS - ${destino.toUpperCase()}

CONTEXTO:
- Destino: ${destino}
- Or√ßamento: ${contexto.orcamento || 'Variado'}
- Tipo de viagem: ${contexto.tipoViagem || 'Lazer'}
- Passageiros: ${contexto.passageiros || 'Fam√≠lia'}

GERAR RANKING DETALHADO DE HOT√âIS:

üè® *RANKING DE HOT√âIS - ${destino.toUpperCase()}*

üí∞ [HOTEL ECON√îMICO]
üõèÔ∏è [Categoria]: [Descri√ß√£o do padr√£o]
üìç [Localiza√ß√£o detalhada]
‚≠ê Avalia√ß√µes: [Booking] | [Google] | [TripAdvisor]
‚úÖ Destaques: [Principais vantagens]
‚ùå Aten√ß√£o: [Poss√≠veis limita√ß√µes]

üèñÔ∏è [HOTEL INTERMEDI√ÅRIO]
üõèÔ∏è [Categoria]: [Descri√ß√£o do padr√£o]
üìç [Localiza√ß√£o detalhada]
‚≠ê Avalia√ß√µes: [Scores de plataformas]
‚úÖ Destaques: [Principais vantagens]
üí° Dica: [Informa√ß√£o extra relevante]

‚≠ê [HOTEL PREMIUM]
üõèÔ∏è [Categoria]: [Descri√ß√£o do padr√£o]
üìç [Localiza√ß√£o privilegiada]
‚≠ê Avalia√ß√µes: [Scores altos]
‚úÖ Destaques: [Servi√ßos diferenciados]
üéØ Ideal para: [Perfil de h√≥spede]

FORMATO:
- Ranking por categoria de pre√ßo
- Informa√ß√µes objetivas e atualizadas
- Avalia√ß√µes de m√∫ltiplas plataformas
- Dicas espec√≠ficas por hotel
- Localiza√ß√£o detalhada`;
}

// ================================================================================
// üß† PROMPTS PARA AN√ÅLISE DE RELAT√ìRIOS
// ================================================================================

function gerarPromptAnaliseRelatorio(tipoRelatorio) {
  return `AN√ÅLISE EXECUTIVA DE RELAT√ìRIO

TIPO DE RELAT√ìRIO: ${tipoRelatorio}

INSTRU√á√ïES PARA AN√ÅLISE:
1. üìä EXTRAIR m√©tricas principais e KPIs
2. üìà IDENTIFICAR tend√™ncias e padr√µes
3. üéØ DESTACAR pontos cr√≠ticos de aten√ß√£o
4. üí° SUGERIR a√ß√µes pr√°ticas baseadas nos dados
5. üìã RESUMIR em formato executivo

FORMATO DE SA√çDA:

üìä *RESUMO EXECUTIVO - ${tipoRelatorio.toUpperCase()}*

üéØ *Principais Achados:*
- [M√©trica 1]: [Valor] ([Varia√ß√£o])
- [M√©trica 2]: [Valor] ([Tend√™ncia])
- [M√©trica 3]: [Valor] ([Status])

üìà *Tend√™ncias Identificadas:*
- [Tend√™ncia positiva]
- [Tend√™ncia de aten√ß√£o]
- [Oportunidade detectada]

üö® *Pontos de Aten√ß√£o:*
- [Problema 1]: [Impacto]
- [Problema 2]: [Urg√™ncia]

üí° *Recomenda√ß√µes Imediatas:*
1. [A√ß√£o priorit√°ria]
2. [Melhoria sugerida]
3. [Pr√≥ximo passo]

üéØ *Bottom Line:*
[Conclus√£o principal em 1-2 frases]

REGRAS:
- Linguagem executiva e objetiva
- Dados espec√≠ficos sempre que poss√≠vel
- Foco em acionabilidade
- M√°ximo 200 palavras no resumo`;
}

// ================================================================================
// üîß UTILIT√ÅRIOS DE PROMPT
// ================================================================================

function ajustarPromptParaModelo(prompt, modelo) {
  console.log(`üîß Ajustando prompt para modelo: ${modelo}`);
  
  let promptAjustado = prompt;
  
  switch (modelo) {
    case 'gpt-4o':
      // GPT-4o pode lidar com prompts mais complexos
      promptAjustado += '\n\nMODO GPT-4O: M√°xima precis√£o e detalhamento';
      break;
      
    case 'gpt-4o-mini':
      // GPT-4o-mini precisa de instru√ß√µes mais diretas
      promptAjustado += '\n\nMODO OTIMIZADO: Foco em efici√™ncia e precis√£o';
      break;
      
    case 'claude-3-5-sonnet':
      // Claude √© melhor com an√°lise de imagens
      promptAjustado += '\n\nMODO CLAUDE: An√°lise visual detalhada e contextual';
      break;
  }
  
  return promptAjustado;
}

function calcularTamanhoPrompt(prompt) {
  const tokens = prompt.split(/\s+/).length * 1.3; // Estimativa aproximada
  return {
    caracteres: prompt.length,
    palavras: prompt.split(/\s+/).length,
    tokens_estimados: Math.ceil(tokens),
    categoria: tokens < 1000 ? 'pequeno' : tokens < 2000 ? 'm√©dio' : 'grande'
  };
}

function validarPrompt(prompt, tipoDetectado) {
  const validacao = {
    valido: true,
    problemas: [],
    sugestoes: []
  };
  
  // Verificar tamanho
  const tamanho = calcularTamanhoPrompt(prompt);
  if (tamanho.tokens_estimados > 3000) {
    validacao.problemas.push('Prompt muito longo (pode ser truncado)');
    validacao.sugestoes.push('Considerar simplificar instru√ß√µes');
  }
  
  // Verificar elementos obrigat√≥rios
  const elementosObrigatorios = [
    'FORMATA√á√ÉO OBRIGAT√ìRIA',
    'REGRAS',
    'GERAR'
  ];
  
  elementosObrigatorios.forEach(elemento => {
    if (!prompt.includes(elemento)) {
      validacao.problemas.push(`Elemento obrigat√≥rio ausente: ${elemento}`);
    }
  });
  
  // Verificar coer√™ncia com tipo detectado
  if (tipoDetectado?.includes('cruzeiro') && !prompt.includes('üö¢')) {
    validacao.problemas.push('Prompt de cruzeiro sem emoji de navio');
  }
  
  if (tipoDetectado?.includes('multiplas') && !prompt.includes('OP√á√ÉO')) {
    validacao.problemas.push('Prompt de m√∫ltiplas op√ß√µes sem numera√ß√£o');
  }
  
  validacao.valido = validacao.problemas.length === 0;
  
  return validacao;
}

// ================================================================================
// üìä M√âTRICAS E LOGS
// ================================================================================

function logPromptGerado(prompt, analise, estrategia) {
  const metricas = calcularTamanhoPrompt(prompt);
  
  console.log("üìä === PROMPT GERADO v7.0 ===");
  console.log(`üéØ Tipo: ${analise.tipoDetectado}`);
  console.log(`üìà Confian√ßa: ${(analise.confiancaDeteccao * 100).toFixed(1)}%`);
  console.log(`üßÆ Complexidade: ${analise.complexidade}`);
  console.log(`‚öôÔ∏è Estrat√©gia: ${estrategia.foco}`);
  console.log(`üìè Tamanho: ${metricas.caracteres} chars, ~${metricas.tokens_estimados} tokens`);
  console.log(`üìä Categoria: ${metricas.categoria}`);
  console.log("üìä === FIM LOG ===");
}

// ================================================================================
// üöÄ EXPORTA√á√ÉO E INICIALIZA√á√ÉO
// ================================================================================

console.log("‚úÖ Prompts v7.0 carregado:");
console.log("üéØ 9 prompts espec√≠ficos por tipo de or√ßamento");
console.log("üß† Contexto inteligente baseado em an√°lise");
console.log("‚öôÔ∏è Estrat√©gias adaptativas por complexidade");
console.log("üîß Enriquecimento autom√°tico de prompts");
console.log("üìä Sistema de valida√ß√£o e m√©tricas");

// Exportar fun√ß√µes principais
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    gerarPromptOtimizado,
    selecionarPromptPorTipo,
    gerarPromptDicasDestino,
    gerarPromptRankingHoteis,
    gerarPromptAnaliseRelatorio,
    ajustarPromptParaModelo,
    validarPrompt
  };
} else {
  // Browser environment
  window.gerarPromptOtimizado = gerarPromptOtimizado;
  window.selecionarPromptPorTipo = selecionarPromptPorTipo;
  window.gerarPromptDicasDestino = gerarPromptDicasDestino;
  window.gerarPromptRankingHoteis = gerarPromptRankingHoteis;
  window.gerarPromptAnaliseRelatorio = gerarPromptAnaliseRelatorio;
  window.ajustarPromptParaModelo = ajustarPromptParaModelo;
  window.validarPrompt = validarPrompt;
}

// ================================================================================
// üîç PROMPTS PARA DETEC√á√ÉO DE IMAGEM ESPEC√çFICOS
// ================================================================================

function gerarPromptAnaliseImagem(tipoDetectado) {
  const basePrompt = `AN√ÅLISE VISUAL ESPECIALIZADA - ${tipoDetectado.toUpperCase()}

INSTRU√á√ïES PARA AN√ÅLISE DE IMAGEM:
1. üëÅÔ∏è EXAMINAR cuidadosamente TODOS os elementos visuais
2. üîç IDENTIFICAR layout espec√≠fico (vertical, horizontal, tabular)
3. üìä EXTRAIR dados exatos: hor√°rios, pre√ßos, datas, aeroportos
4. üè¢ DETECTAR companhias a√©reas e logos
5. üîó LOCALIZAR e preservar links se vis√≠veis
6. üéØ DETERMINAR tipo exato de or√ßamento pela estrutura visual

FOCO ESPEC√çFICO PARA ${tipoDetectado.toUpperCase()}:`;

  const promptsEspecificos = {
    'multiplasOpcoes2': `
- üî¢ BUSCAR por caixas/se√ß√µes lado a lado ou verticais
- üí∞ IDENTIFICAR 2 pre√ßos distintos na imagem
- üß≥ DETECTAR diferen√ßas nos servi√ßos de bagagem
- üìã VERIFICAR se h√° "Plano 1/Plano 2" ou "Op√ß√£o 1/Op√ß√£o 2"`,

    'multiplasOpcoes3': `
- üî¢ BUSCAR por 3 caixas/se√ß√µes distintas
- üí∞ IDENTIFICAR 3 pre√ßos em ordem crescente
- ‚≠ê DETECTAR servi√ßos progressivos (b√°sico ‚Üí intermedi√°rio ‚Üí premium)
- üéØ VERIFICAR se h√° op√ß√£o com "marca√ß√£o de assento" ou "2 bagagens"`,

    'cruzeiro': `
- üö¢ BUSCAR por imagens de navios ou terminologia n√°utica
- üõèÔ∏è IDENTIFICAR tipos de cabine (interna, externa, varanda, su√≠te)
- üí∞ VERIFICAR se pre√ßos s√£o POR CABINE (valores mais altos)
- üìÖ LOCALIZAR datas de embarque e dura√ß√£o em noites`,

    'pacoteCompleto': `
- üèñÔ∏è BUSCAR por estrutura de "pacote" ou "inclui"
- ‚úàÔ∏è IDENTIFICAR se√ß√£o de voos separada
- üè® DETECTAR m√∫ltiplas op√ß√µes de hot√©is
- üìç EXTRAIR nomes e endere√ßos de hot√©is se vis√≠veis`,

    'multitrecho': `
- üó∫Ô∏è BUSCAR por m√∫ltiplas rotas ou "Trecho 1", "Trecho 2"
- ‚û°Ô∏è IDENTIFICAR setas ou indicadores de dire√ß√£o
- üìÖ VERIFICAR m√∫ltiplas datas diferentes
- üåç DETECTAR destinos internacionais ou roteiros complexos`,

    'aereoConexaoDetalhada': `
- üîÑ BUSCAR por informa√ß√µes de conex√£o ou escala
- ‚è∞ IDENTIFICAR tempo de espera entre voos
- üè¢ DETECTAR aeroporto de conex√£o (BSB, FOR, REC)
- ‚úàÔ∏è VERIFICAR se mostra cada trecho separadamente`
  };

  return basePrompt + (promptsEspecificos[tipoDetectado] || `
- üìã APLICAR an√°lise geral e extrair dados conforme tipo detectado
- üéØ FOCAR na precis√£o e completude das informa√ß√µes`);
}

// ================================================================================
// üéØ PROMPTS CONDICIONAIS AVAN√áADOS
// ================================================================================

function gerarPromptCondicional(contexto, condicoes) {
  let prompt = `OR√áAMENTO CVC ITAQUA - CONTEXTO INTELIGENTE

CONDI√á√ïES DETECTADAS:`;

  // Adicionar condi√ß√µes espec√≠ficas
  Object.entries(condicoes).forEach(([condicao, ativo]) => {
    if (ativo) {
      prompt += `\n‚úÖ ${condicao.toUpperCase()}: Aplicar regras espec√≠ficas`;
    }
  });

  // Condi√ß√µes espec√≠ficas
  if (condicoes.temCriancasComIdades) {
    prompt += `\n\nCRIAN√áAS COM IDADES DETECTADAS:
- Formato obrigat√≥rio: "02 adultos + 01 crian√ßa (05 anos)"
- M√∫ltiplas idades: "02 adultos + 02 crian√ßas (05 e 07 anos)"
- SEMPRE incluir idades entre par√™nteses se fornecidas`;
  }

  if (condicoes.temConexaoCompleta) {
    prompt += `\n\nCONEX√ÉO DETALHADA DETECTADA:
- Mostrar CADA trecho separadamente
- Incluir tempo de espera: "(conex√£o em Bras√≠lia - 2h05 de espera)"
- Especificar "voo direto" para cada trecho individual`;
  }

  if (condicoes.temMultiplosPrecos) {
    prompt += `\n\nM√öLTIPLOS PRE√áOS DETECTADOS:
- Organizar do menor para maior valor
- Aplicar bagagem escalonada automaticamente
- Usar numera√ß√£o: "**OP√á√ÉO 1**", "**OP√á√ÉO 2**", etc.`;
  }

  if (condicoes.temParcelamentoEspecial) {
    prompt += `\n\nPARCELAMENTO SOLICITADO:
- NUNCA usar "entrada" - sempre "primeira parcela"
- Calcular automaticamente valor das parcelas
- Formato: "primeira parcela de R$ X + Yx de R$ Y s/ juros"`;
  }

  return prompt;
}

// ================================================================================
// üß† PROMPTS ADAPTATIVOS POR CONTEXTO
// ================================================================================

function gerarPromptAdaptativo(formData, analise, contextoEspecial) {
  console.log("üß† Gerando prompt adaptativo...");

  let promptBase = selecionarPromptPorTipo(analise.tipoDetectado, construirContexto(formData, analise), determinarEstrategia(analise));

  // Adapta√ß√µes baseadas no contexto especial
  if (contextoEspecial.baixaConfianca) {
    promptBase += `\n\n‚ö†Ô∏è VALIDA√á√ÉO EXTRA (Confian√ßa: ${(analise.confiancaDeteccao * 100).toFixed(1)}%):
- REVISAR cuidadosamente o tipo detectado
- EM CASO DE D√öVIDA, usar formato mais simples
- PRIORIZAR clareza sobre complexidade`;
  }

  if (contextoEspecial.altaComplexidade) {
    promptBase += `\n\nüéØ ALTA COMPLEXIDADE DETECTADA:
- Aplicar M√ÅXIMO rigor na formata√ß√£o
- Verificar TODAS as regras cr√≠ticas listadas
- Organizar informa√ß√µes de forma hier√°rquica
- Priorizar legibilidade profissional`;
  }

  if (contextoEspecial.imagemCompleta) {
    promptBase += `\n\nüì∏ AN√ÅLISE DE IMAGEM COMPLETA:
${gerarPromptAnaliseImagem(analise.tipoDetectado)}`;
  }

  if (contextoEspecial.dadosIncompletos) {
    promptBase += `\n\nüìã DADOS INCOMPLETOS DETECTADOS:
- Usar apenas informa√ß√µes REAIS fornecidas
- N√ÉO inventar hor√°rios, pre√ßos ou datas
- Indicar claramente campos "A detectar" se necess√°rio
- Focar na formata√ß√£o dos dados dispon√≠veis`;
  }

  return promptBase;
}

// ================================================================================
// üîß OTIMIZA√á√ïES FINAIS DE PROMPT
// ================================================================================

function otimizarPromptFinal(prompt, limitesModelo) {
  console.log("üîß Otimizando prompt para limites do modelo...");

  let promptOtimizado = prompt;

  // Verificar tamanho
  const tamanhoAtual = calcularTamanhoPrompt(prompt);
  
  if (tamanhoAtual.tokens_estimados > limitesModelo.max_tokens * 0.7) {
    console.warn("‚ö†Ô∏è Prompt muito longo, aplicando otimiza√ß√µes...");
    
    // Remover se√ß√µes menos cr√≠ticas
    promptOtimizado = promptOtimizado.replace(/INSTRU√á√ïES FINAIS:[\s\S]*?(?=GERAR|$)/g, '');
    promptOtimizado = promptOtimizado.replace(/CAMPOS OPCIONAIS:[\s\S]*?(?=REGRAS|GERAR|$)/g, '');
    
    // Simplificar listas numeradas
    promptOtimizado = promptOtimizado.replace(/\d+\.\s*[‚è∞üìÖ‚úàÔ∏èüõ´üí≥üë•üß≥üë∂üè∑Ô∏èüí∞üì±üîß]\s*/g, '‚Ä¢ ');
  }

  // Garantir que termina com instru√ß√£o de gera√ß√£o
  if (!promptOtimizado.includes('GERAR')) {
    promptOtimizado += '\n\nGERAR OR√áAMENTO PROFISSIONAL FORMATADO:';
  }

  // Log da otimiza√ß√£o
  const tamanhoFinal = calcularTamanhoPrompt(promptOtimizado);
  console.log(`üîß Otimiza√ß√£o: ${tamanhoAtual.tokens_estimados} ‚Üí ${tamanhoFinal.tokens_estimados} tokens`);

  return promptOtimizado;
}

// ================================================================================
// üìä SISTEMA DE CACHE DE PROMPTS
// ================================================================================

const CACHE_PROMPTS = new Map();

function obterPromptCacheado(chaveCache, gerador) {
  if (CACHE_PROMPTS.has(chaveCache)) {
    console.log(`üìä Prompt recuperado do cache: ${chaveCache}`);
    return CACHE_PROMPTS.get(chaveCache);
  }

  const prompt = gerador();
  CACHE_PROMPTS.set(chaveCache, prompt);
  
  // Limitar tamanho do cache
  if (CACHE_PROMPTS.size > 50) {
    const primeiraChave = CACHE_PROMPTS.keys().next().value;
    CACHE_PROMPTS.delete(primeiraChave);
  }

  console.log(`üìä Prompt gerado e cacheado: ${chaveCache}`);
  return prompt;
}

function gerarChaveCache(tipoDetectado, complexidade, temImagem, temParcelamento) {
  return `${tipoDetectado}_${complexidade}_${temImagem ? 'img' : 'txt'}_${temParcelamento ? 'parc' : 'noparc'}`;
}

// ================================================================================
// üéØ INTERFACE UNIFICADA DE PROMPTS
// ================================================================================

function criarPromptCompleto(formData, analise, opcoes = {}) {
  console.log("üéØ Criando prompt completo unificado...");

  const chaveCache = gerarChaveCache(
    analise.tipoDetectado,
    analise.complexidade,
    !!formData.imagemBase64,
    !!formData.parcelamento?.incluirParcelamento
  );

  return obterPromptCacheado(chaveCache, () => {
    // Contexto especial
    const contextoEspecial = {
      baixaConfianca: analise.confiancaDeteccao < 0.7,
      altaComplexidade: analise.complexidade === 'muito_alta',
      imagemCompleta: !!formData.imagemBase64,
      dadosIncompletos: !formData.observacoes && !formData.textoColado
    };

    // Gerar prompt adaptativo
    let prompt = gerarPromptAdaptativo(formData, analise, contextoEspecial);

    // Aplicar enriquecimentos
    prompt = enriquecerPrompt(prompt, formData, analise);

    // Otimizar para modelo
    const limitesModelo = {
      max_tokens: opcoes.maxTokens || 4000,
      modelo: opcoes.modelo || 'gpt-4o-mini'
    };
    
    prompt = otimizarPromptFinal(prompt, limitesModelo);

    // Ajustar para modelo espec√≠fico
    if (opcoes.modelo) {
      prompt = ajustarPromptParaModelo(prompt, opcoes.modelo);
    }

    return prompt;
  });
}

// ================================================================================
// üöÄ FUN√á√ÉO PRINCIPAL ATUALIZADA
// ================================================================================

// Atualizar a fun√ß√£o principal para usar a interface unificada
function gerarPromptOtimizadoCompleto(formData, analise, opcoes = {}) {
  console.log("üöÄ Gerando prompt otimizado completo v7.0...");
  
  try {
    // Usar interface unificada
    const prompt = criarPromptCompleto(formData, analise, opcoes);
    
    // Validar prompt final
    const validacao = validarPrompt(prompt, analise.tipoDetectado);
    
    if (!validacao.valido) {
      console.warn("‚ö†Ô∏è Prompt com problemas:", validacao.problemas);
      
      // Aplicar corre√ß√µes autom√°ticas se poss√≠vel
      if (validacao.sugestoes.length > 0) {
        console.log("üîß Aplicando corre√ß√µes sugeridas...");
        // Implementar corre√ß√µes b√°sicas aqui se necess√°rio
      }
    }

    // Log final
    logPromptGerado(prompt, analise, determinarEstrategia(analise));
    
    return prompt;
    
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do prompt completo:", error);
    return gerarPromptFallback(formData);
  }
}

// ================================================================================
// üöÄ EXPORTA√á√ÉO FINAL ATUALIZADA
// ================================================================================

console.log("‚úÖ Prompts v7.0 COMPLETO carregado:");
console.log("üéØ 9 prompts espec√≠ficos por tipo de or√ßamento");
console.log("üß† Contexto inteligente baseado em an√°lise");
console.log("‚öôÔ∏è Estrat√©gias adaptativas por complexidade");
console.log("üîß Enriquecimento autom√°tico de prompts");
console.log("üìä Sistema de cache e otimiza√ß√£o");
console.log("üîç Prompts especializados para an√°lise de imagem");
console.log("üìä Sistema de valida√ß√£o e m√©tricas completo");
console.log("üéØ Interface unificada de gera√ß√£o");

// Exportar fun√ß√µes principais (VERS√ÉO ATUALIZADA)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    // Fun√ß√£o principal (nova)
    gerarPromptOtimizado: gerarPromptOtimizadoCompleto,
    
    // Fun√ß√µes espec√≠ficas
    selecionarPromptPorTipo,
    gerarPromptDicasDestino,
    gerarPromptRankingHoteis,
    gerarPromptAnaliseRelatorio,
    
    // Fun√ß√µes avan√ßadas (novas)
    criarPromptCompleto,
    gerarPromptAdaptativo,
    gerarPromptAnaliseImagem,
    
    // Utilit√°rios
    ajustarPromptParaModelo,
    validarPrompt,
    otimizarPromptFinal
  };
} else {
  // Browser environment (VERS√ÉO ATUALIZADA)
  window.gerarPromptOtimizado = gerarPromptOtimizadoCompleto;
  window.selecionarPromptPorTipo = selecionarPromptPorTipo;
  window.gerarPromptDicasDestino = gerarPromptDicasDestino;
  window.gerarPromptRankingHoteis = gerarPromptRankingHoteis;
  window.gerarPromptAnaliseRelatorio = gerarPromptAnaliseRelatorio;
  window.criarPromptCompleto = criarPromptCompleto;
  window.gerarPromptAdaptativo = gerarPromptAdaptativo;
  window.ajustarPromptParaModelo = ajustarPromptParaModelo;
  window.validarPrompt = validarPrompt;
}

console.log("üöÄ Sistema de Prompts v7.0 - VERS√ÉO COMPLETA E OTIMIZADA!");// üéØ prompts.js - SISTEMA AVAN√áADO DE PROMPTS v7.0
// Prompts espec√≠ficos para cada tipo de or√ßamento + Contexto inteligente
// Integra√ß√£o completa com an√°lise e templates

console.log("üéØ Prompts v7.0 - SISTEMA ESPECIALIZADO CARREGADO");

// ================================================================================
// üéØ CONSTRUTOR PRINCIPAL DE PROMPTS
// ================================================================================

function gerarPromptOtimizado(formData, analise) {
  console.log("üéØ Gerando prompt otimizado v7.0...");
  
  try {
    // Determinar contexto e estrat√©gia
    const contexto = construirContexto(formData, analise);
    const estrategia = determinarEstrategia(analise);
    
    // Selecionar prompt espec√≠fico baseado no tipo detectado
    const promptEspecifico = selecionarPromptPorTipo(analise.tipoDetectado, contexto, estrategia);
    
    // Adicionar configura√ß√µes avan√ßadas
    const promptFinal = enriquecerPrompt(promptEspecifico, formData, analise);
    
    console.log(`‚úÖ Prompt otimizado gerado: ${promptFinal.length} caracteres`);
    console.log(`üéØ Tipo: ${analise.tipoDetectado}, Complexidade: ${analise.complexidade}`);
    
    return promptFinal;
    
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do prompt:", error);
    return gerarPromptFallback(formData);
  }
}

// ================================================================================
// üèóÔ∏è CONSTRU√á√ÉO DE CONTEXTO INTELIGENTE
// ================================================================================

function construirContexto(formData, analise) {
  console.log("üèóÔ∏è Construindo contexto inteligente...");
  
  return {
    // Dados b√°sicos
    tipos: formData.tipos?.join(", ") || "Or√ßamento geral",
    observacoes: formData.observacoes || "",
    textoColado: formData.textoColado || "",
    
    // Dados extra√≠dos da an√°lise
    tipoDetectado: analise.tipoDetectado,
    confianca: analise.confiancaDeteccao,
    complexidade: analise.complexidade,
    numeroOpcoes: analise.numeroOpcoes || 1,
    
    // Contexto espec√≠fico
    aeroportos: analise.aeroportosDetectados?.join(", ") || "A detectar",
    companhias: analise.companhiasDetectadas?.join(", ") || "A detectar",
    precos: analise.numeroPrecos