// üîß processing.js - PROCESSAMENTO COMPLETO DE OR√áAMENTOS v7.0
// Implementa√ß√£o COMPLETA das regras do Manual de Modelos
// Formata√ß√£o profissional + Limpeza autom√°tica + Valida√ß√µes

console.log("üîß Processing v7.0 - MANUAL COMPLETO IMPLEMENTADO");

// ================================================================================
// üßπ SISTEMA DE LIMPEZA E FORMATA√á√ÉO PRINCIPAL
// ================================================================================

function processarRespostaCompleta(conteudo, analise, formData) {
  console.log("üîß Iniciando processamento completo v7.0...");
  
  if (!conteudo) {
    console.error("‚ùå Conte√∫do vazio para processar");
    return "Erro: Resposta vazia da IA";
  }
  
  let conteudoProcessado = conteudo;
  
  try {
    // ETAPA 1: Remover cabe√ßalhos t√©cnicos
    conteudoProcessado = removerCabecalhosTecnicos(conteudoProcessado);
    
    // ETAPA 2: Aplicar formata√ß√£o espec√≠fica
    conteudoProcessado = aplicarFormatacaoCompleta(conteudoProcessado);
    
    // ETAPA 3: Validar regras cr√≠ticas
    conteudoProcessado = validarRegrasCriticas(conteudoProcessado);
    
    // ETAPA 4: Aplicar corre√ß√µes espec√≠ficas por tipo
    if (analise) {
      conteudoProcessado = aplicarCorrecoesPorTipo(conteudoProcessado, analise);
    }
    
    // ETAPA 5: Formata√ß√£o final para WhatsApp
    conteudoProcessado = formatarParaWhatsApp(conteudoProcessado);
    
    // ETAPA 6: Valida√ß√£o final
    const validacao = validarOrcamentoFinal(conteudoProcessado, formData);
    if (!validacao.valido) {
      console.warn("‚ö†Ô∏è Valida√ß√£o encontrou problemas:", validacao.problemas);
    }
    
    console.log(`‚úÖ Processamento completo finalizado: ${conteudoProcessado.length} caracteres`);
    return conteudoProcessado;
    
  } catch (error) {
    console.error("‚ùå Erro no processamento:", error);
    return aplicarFormatacaoBasica(conteudo); // Fallback
  }
}

// ================================================================================
// üßπ REMO√á√ÉO DE CABE√áALHOS T√âCNICOS
// ================================================================================

function removerCabecalhosTecnicos(conteudo) {
  console.log("üßπ Removendo cabe√ßalhos t√©cnicos...");
  
  let limpo = conteudo;
  
  // Lista completa de padr√µes para remover
  const padroesRemover = [
    // Cabe√ßalhos do sistema
    /^OR√áAMENTO CVC ITAQUA[^\n]*\n?/gim,
    /^SISTEMA PROFISSIONAL[^\n]*\n?/gim,
    /^TIPOS SELECIONADOS:[^\n]*\n?/gim,
    /^DADOS DA VIAGEM:[^\n]*\n?/gim,
    /^INFORMA√á√ïES ADICIONAIS:[^\n]*\n?/gim,
    
    // Regras e instru√ß√µes
    /^REGRAS [^\n]*:[^\n]*\n?/gim,
    /^INSTRU√á√ïES [^\n]*:[^\n]*\n?/gim,
    /^CAMPOS OPCIONAIS[^\n]*\n?/gim,
    /^PARCELAMENTO SOLICITADO[^\n]*\n?/gim,
    /^TEMPLATE ESPEC√çFICO[^\n]*\n?/gim,
    /^DADOS EXTRA√çDOS[^\n]*\n?/gim,
    /^INSTRU√á√ïES FINAIS[^\n]*\n?/gim,
    
    // Comandos de gera√ß√£o
    /^GERE O OR√áAMENTO[^\n]*\n?/gim,
    /^GERAR OR√áAMENTO[^\n]*\n?/gim,
    /^FORMATO PADR√ÉO[^\n]*\n?/gim,
    
    // Listas numeradas de regras
    /^\d+\.\s*[‚è∞üìÖ‚úàÔ∏èüõ´üí≥üë•üß≥üë∂üè∑Ô∏èüí∞üì±üîß][^\n]*\n?/gim,
    
    // Separadores t√©cnicos
    /^={10,}\n?/gim,
    /^-{10,}\n?/gim,
    
    // Prompts residuais
    /^- [A-Z][^\n]*:[^\n]*\n?/gim
  ];
  
  // Aplicar cada padr√£o
  padroesRemover.forEach(padrao => {
    limpo = limpo.replace(padrao, '');
  });
  
  // Limpeza adicional de linhas vazias excessivas
  limpo = limpo.replace(/\n\s*\n\s*\n+/g, '\n\n'); // M√°ximo 2 quebras
  limpo = limpo.replace(/^\s*\n+/, ''); // Remover quebras do in√≠cio
  limpo = limpo.trim();
  
  console.log(`üßπ Cabe√ßalhos removidos: ${conteudo.length} ‚Üí ${limpo.length} caracteres`);
  return limpo;
}

// ================================================================================
// üé® FORMATA√á√ÉO COMPLETA - TODAS AS REGRAS DO MANUAL
// ================================================================================

function aplicarFormatacaoCompleta(conteudo) {
  console.log("üé® Aplicando formata√ß√£o completa...");
  
  let formatado = conteudo;
  
  // 1. ‚è∞ HOR√ÅRIOS - Formato exato "06:20"
  formatado = formatarHorarios(formatado);
  
  // 2. üìÖ DATAS - Formato "15/11" 
  formatado = formatarDatas(formatado);
  
  // 3. ‚úàÔ∏è AEROPORTOS - Convers√£o completa
  formatado = converterAeroportos(formatado);
  
  // 4. üõ´ CONEX√ïES - "com conex√£o" nunca "escala"
  formatado = formatarConexoes(formatado);
  
  // 5. üí≥ PARCELAMENTO - "primeira parcela" nunca "entrada"
  formatado = formatarParcelamento(formatado);
  
  // 6. üë• PASSAGEIROS - "02 adultos" com zero √† esquerda
  formatado = formatarPassageiros(formatado);
  
  // 7. üß≥ BAGAGEM - Regras espec√≠ficas nacional/internacional
  formatado = formatarBagagem(formatado);
  
  // 8. üë∂ CRIAN√áAS - Com idades se informado
  formatado = formatarCriancas(formatado);
  
  // 9. üè∑Ô∏è REEMBOLSO - Padronizado
  formatado = formatarReembolso(formatado);
  
  // 10. üí∞ VALORES - "R$ 1.464,02"
  formatado = formatarValores(formatado);
  
  // 11. üì± EMOJIS - Garantir emojis apropriados
  formatado = garantirEmojis(formatado);
  
  console.log("‚úÖ Formata√ß√£o completa aplicada");
  return formatado;
}

// ================================================================================
// üîß FUN√á√ïES ESPEC√çFICAS DE FORMATA√á√ÉO
// ================================================================================

function formatarHorarios(conteudo) {
  // ‚è∞ HOR√ÅRIOS: "06:20" (nunca "06: 20")
  let formatado = conteudo;
  
  // Corrigir espa√ßos em hor√°rios
  formatado = formatado.replace(/(\d{1,2})\s*:\s*(\d{2})/g, '$1:$2');
  
  // Adicionar zero √† esquerda se necess√°rio
  formatado = formatado.replace(/\b(\d):/g, '0$1:');
  
  // Formato especial para chegadas no dia seguinte
  formatado = formatado.replace(/(\d{2}:\d{2})\s*\((\d{1,2}\/\d{1,2})\)/g, '$1 ($2)');
  
  return formatado;
}

function formatarDatas(conteudo) {
  // üìÖ DATAS: "15/11" com zero √† esquerda
  let formatado = conteudo;
  
  // Padronizar formato DD/MM
  formatado = formatado.replace(/\b(\d{1})\/(\d{1,2})\b/g, '0$1/$2');
  formatado = formatado.replace(/\b(\d{2})\/(\d{1})\b/g, '$1/0$2');
  
  return formatado;
}

function converterAeroportos(conteudo) {
  // ‚úàÔ∏è AEROPORTOS: Convers√£o completa de c√≥digos
  let formatado = conteudo;
  
  const aeroportos = {
    'CGH': 'Congonhas',
    'GRU': 'Guarulhos', 
    'VCP': 'Viracopos',
    'SDU': 'Santos Dumont',
    'GIG': 'Gale√£o',
    'BSB': 'Bras√≠lia',
    'SSA': 'Salvador',
    'FOR': 'Fortaleza',
    'REC': 'Recife',
    'POA': 'Porto Alegre',
    'CWB': 'Curitiba',
    'BEL': 'Bel√©m',
    'MAO': 'Manaus',
    'MCZ': 'Macei√≥',
    'AJU': 'Aracaju',
    'JPA': 'Jo√£o Pessoa',
    'NAT': 'Natal',
    'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s',
    'CGB': 'Cuiab√°',
    'CGR': 'Campo Grande',
    'VIX': 'Vit√≥ria',
    'CNF': 'Confins',
    'PLU': 'Pampulha',
    'FLN': 'Florian√≥polis',
    'NVT': 'Navegantes',
    'JOI': 'Joinville',
    'IGU': 'Foz do Igua√ßu',
    'LDB': 'Londrina',
    'MGF': 'Maring√°'
  };
  
  // Aplicar convers√µes
  Object.entries(aeroportos).forEach(([codigo, nome]) => {
    const regex = new RegExp(`\\b${codigo}\\b`, 'gi');
    formatado = formatado.replace(regex, nome);
  });
  
  return formatado;
}

function formatarConexoes(conteudo) {
  // üõ´ CONEX√ïES: "com conex√£o" nunca "escala"
  let formatado = conteudo;
  
  formatado = formatado.replace(/\bescala\b/gi, 'conex√£o');
  formatado = formatado.replace(/\bcom escala\b/gi, 'com conex√£o');
  formatado = formatado.replace(/\bfazendo escala\b/gi, 'com conex√£o');
  
  return formatado;
}

function formatarParcelamento(conteudo) {
  // üí≥ PARCELAMENTO: "primeira parcela" nunca "entrada"
  let formatado = conteudo;
  
  formatado = formatado.replace(/\bentrada\b/gi, 'primeira parcela');
  formatado = formatado.replace(/\bvalor de entrada\b/gi, 'primeira parcela');
  formatado = formatado.replace(/\+ entrada de/gi, '+ primeira parcela de');
  
  return formatado;
}

function formatarPassageiros(conteudo) {
  // üë• PASSAGEIROS: "02 adultos" com zero √† esquerda
  let formatado = conteudo;
  
  // Padr√µes comuns de passageiros
  formatado = formatado.replace(/\b(\d) adulto\b/g, '0$1 adulto');
  formatado = formatado.replace(/\b(\d) adultos\b/g, '0$1 adultos');
  formatado = formatado.replace(/\bpara (\d) adulto/g, 'para 0$1 adulto');
  formatado = formatado.replace(/\bpara (\d) adultos/g, 'para 0$1 adultos');
  
  return formatado;
}

function formatarBagagem(conteudo) {
  // üß≥ BAGAGEM: Regras espec√≠ficas nacional/internacional
  let formatado = conteudo;
  
  // Padroniza√ß√µes comuns
  formatado = formatado.replace(/apenas mala de m√£o/gi, 'S√≥ mala de m√£o inclu√≠da');
  formatado = formatado.replace(/somente mala de m√£o/gi, 'S√≥ mala de m√£o inclu√≠da');
  formatado = formatado.replace(/mala de m√£o inclu√≠da/gi, 'S√≥ mala de m√£o inclu√≠da');
  
  // Bagagem despachada internacional
  formatado = formatado.replace(/bagagem despachada\b(?!\s*\d+kg)/gi, 'bagagem despachada 23kg');
  
  return formatado;
}

function formatarCriancas(conteudo) {
  // üë∂ CRIAN√áAS: Com idades se informado
  let formatado = conteudo;
  
  // Padronizar formato de crian√ßas com idades
  formatado = formatado.replace(/(\d+) crian√ßa.*?(\d+) ano/gi, '01 crian√ßa ($2 anos)');
  formatado = formatado.replace(/(\d+) crian√ßas.*?(\d+) e (\d+) anos/gi, '02 crian√ßas ($2 e $3 anos)');
  
  return formatado;
}

function formatarReembolso(conteudo) {
  // üè∑Ô∏è REEMBOLSO: Padronizado sem percentuais
  let formatado = conteudo;
  
  // Remover percentuais e valores espec√≠ficos
  formatado = formatado.replace(/reembols√°vel \d+%/gi, 'Reembols√°vel conforme regras do bilhete');
  formatado = formatado.replace(/n√£o reembols√°vel.*?multa/gi, 'N√£o reembols√°vel');
  
  // Padronizar textos
  formatado = formatado.replace(/totalmente reembols√°vel/gi, 'Reembols√°vel conforme regras do bilhete');
  formatado = formatado.replace(/parcialmente reembols√°vel/gi, 'Reembols√°vel conforme regras do bilhete');
  
  return formatado;
}

function formatarValores(conteudo) {
  // üí∞ VALORES: "R$ 1.464,02" com espa√ßo ap√≥s R$
  let formatado = conteudo;
  
  // Garantir espa√ßo ap√≥s R$
  formatado = formatado.replace(/R\$(\d)/g, 'R$ $1');
  
  // Formata√ß√£o de milhares
  formatado = formatado.replace(/R\$ (\d+)(\d{3}),/g, 'R$ $1.$2,');
  formatado = formatado.replace(/R\$ (\d+)(\d{3})(\d{3}),/g, 'R$ $1.$2.$3,');
  
  return formatado;
}

function garantirEmojis(conteudo) {
  // üì± EMOJIS: Garantir emojis apropriados nos lugares certos
  let formatado = conteudo;
  
  // Adicionar emojis se n√£o existirem
  if (!formatado.includes('üí∞') && formatado.includes('R$')) {
    formatado = formatado.replace(/^(.*R\$ [\d.,]+.*)/gm, 'üí∞ $1');
  }
  
  if (!formatado.includes('‚úÖ') && formatado.includes('mala de m√£o')) {
    formatado = formatado.replace(/^(.*mala de m√£o.*)/gm, '‚úÖ $1');
  }
  
  if (!formatado.includes('üè∑Ô∏è') && (formatado.includes('reembols√°vel') || formatado.includes('N√£o reembols√°vel'))) {
    formatado = formatado.replace(/^(.*[Nn]√£o reembols√°vel.*)/gm, 'üè∑Ô∏è $1');
    formatado = formatado.replace(/^(.*[Rr]eembols√°vel.*)/gm, 'üè∑Ô∏è $1');
  }
  
  return formatado;
}

// ================================================================================
// ‚úÖ VALIDA√á√ÉO DE REGRAS CR√çTICAS
// ================================================================================

function validarRegrasCriticas(conteudo) {
  console.log("‚úÖ Validando regras cr√≠ticas...");
  
  let corrigido = conteudo;
  
  // Validar e corrigir hor√°rios
  if (corrigido.match(/\d{1,2}\s*:\s*\d{2}/)) {
    corrigido = formatarHorarios(corrigido);
  }
  
  // Validar separador ida/volta
  if (corrigido.includes('ida') && corrigido.includes('volta')) {
    if (!corrigido.includes('--')) {
      corrigido = corrigido.replace(/volta/i, '--\nvolta');
    }
  }
  
  // Validar formato de conex√µes
  if (corrigido.toLowerCase().includes('escala')) {
    corrigido = formatarConexoes(corrigido);
  }
  
  return corrigido;
}

// ================================================================================
// üéØ CORRE√á√ïES ESPEC√çFICAS POR TIPO
// ================================================================================

function aplicarCorrecoesPorTipo(conteudo, analise) {
  console.log("üéØ Aplicando corre√ß√µes espec√≠ficas por tipo...");
  
  let corrigido = conteudo;
  
  // Corre√ß√µes para A√âREO NACIONAL
  if (analise.tipo?.includes('nacional') || !conteudo.includes('internacional')) {
    // Garantir bagagem nacional padr√£o
    if (corrigido.includes('m√∫ltiplas op√ß√µes') || corrigido.includes('OP√á√ÉO 1')) {
      corrigido = corrigido.replace(/‚úÖ.*?mala.*?(?=\n|$)/gi, '‚úÖ S√≥ mala de m√£o inclu√≠da');
    }
  }
  
  // Corre√ß√µes para M√öLTIPLAS OP√á√ïES
  if (analise.temMultiplasOpcoes) {
    // Garantir numera√ß√£o correta
    if (!corrigido.includes('OP√á√ÉO 1') && !corrigido.includes('**OP√á√ÉO 1**')) {
      // Detectar e numerar op√ß√µes
      corrigido = numerarOpcoes(corrigido);
    }
    
    // Aplicar regras de bagagem escalonada
    corrigido = aplicarBagagemEscalonada(corrigido);
  }
  
  // Corre√ß√µes para CRUZEIROS
  if (analise.tipo?.includes('cruzeiro') || corrigido.toLowerCase().includes('cruzeiro')) {
    // Garantir formato de cabines
    corrigido = formatarCabinesCruzeiro(corrigido);
    
    // Adicionar documenta√ß√£o se n√£o tiver
    if (!corrigido.includes('Documenta√ß√£o') && !corrigido.includes('RG')) {
      corrigido += '\n\nüìã Documenta√ß√£o: RG original (m√°x. 10 anos) ou passaporte';
    }
  }
  
  // Corre√ß√µes para PACOTES COMPLETOS
  if (analise.tipo?.includes('pacote') || corrigido.toLowerCase().includes('pacote')) {
    // Garantir estrutura de pacote
    corrigido = formatarEstruturaPacote(corrigido);
  }
  
  // Corre√ß√µes para MULTITRECHOS
  if (analise.tipo?.includes('multitrecho') || corrigido.includes('Trecho')) {
    // Garantir numera√ß√£o de trechos
    corrigido = formatarTrechos(corrigido);
  }
  
  return corrigido;
}

function numerarOpcoes(conteudo) {
  let numerado = conteudo;
  
  // Detectar blocos de op√ß√µes pela presen√ßa de valores
  const blocosValor = numerado.match(/üí∞.*?R\$.*?\n.*?(?=üí∞|$)/gs);
  
  if (blocosValor && blocosValor.length > 1) {
    blocosValor.forEach((bloco, index) => {
      const opcaoNum = `**OP√á√ÉO ${index + 1}**`;
      numerado = numerado.replace(bloco, bloco.replace(/üí∞/, `üí∞ ${opcaoNum} -`));
    });
  }
  
  return numerado;
}

function aplicarBagagemEscalonada(conteudo) {
  let corrigido = conteudo;
  
  // Regras de bagagem para m√∫ltiplas op√ß√µes nacionais
  if (corrigido.includes('OP√á√ÉO 1')) {
    corrigido = corrigido.replace(/(OP√á√ÉO 1.*?\n).*?bagagem.*?\n/is, '$1‚úÖ S√≥ mala de m√£o inclu√≠da\n');
  }
  
  if (corrigido.includes('OP√á√ÉO 2')) {
    corrigido = corrigido.replace(/(OP√á√ÉO 2.*?\n).*?bagagem.*?\n/is, '$1‚úÖ Mala de m√£o + bagagem despachada\n');
  }
  
  if (corrigido.includes('OP√á√ÉO 3')) {
    corrigido = corrigido.replace(/(OP√á√ÉO 3.*?\n).*?bagagem.*?\n/is, '$1‚úÖ Mala de m√£o + 2 bagagens despachadas\n');
  }
  
  return corrigido;
}

function formatarCabinesCruzeiro(conteudo) {
  let formatado = conteudo;
  
  // Garantir formato correto de cabines
  formatado = formatado.replace(/cabine interna.*?R\$/gi, '**CABINE INTERNA** - R);
  formatado = formatado.replace(/cabine externa.*?R\$/gi, '**CABINE EXTERNA** - R);
  formatado = formatado.replace(/cabine.*?varanda.*?R\$/gi, '**CABINE COM VARANDA** - R);
  formatado = formatado.replace(/su√≠te.*?R\$/gi, '**SU√çTE** - R);
  
  return formatado;
}

function formatarEstruturaPacote(conteudo) {
  let formatado = conteudo;
  
  // Garantir se√ß√£o "O Pacote Inclui:"
  if (!formatado.includes('O Pacote Inclui:')) {
    // Adicionar estrutura b√°sica se n√£o existir
    const linhasInclusoes = [
      '*O Pacote Inclui:*',
      '- Passagem A√©rea ida e volta',
      '- Taxas de Embarque',
      '- Traslado Aeroporto / Hotel / Aeroporto',
      '- Hospedagem no hotel escolhido'
    ];
    
    formatado = formatado.replace(/^(.*pacote.*)/im, '$1\n\n' + linhasInclusoes.join('\n'));
  }
  
  return formatado;
}

function formatarTrechos(conteudo) {
  let formatado = conteudo;
  
  // Garantir formato correto de trechos
  formatado = formatado.replace(/trecho (\d+):/gi, '*Trecho $1:*');
  
  return formatado;
}

// ================================================================================
// üì± FORMATA√á√ÉO FINAL PARA WHATSAPP
// ================================================================================

function formatarParaWhatsApp(conteudo) {
  console.log("üì± Formatando para WhatsApp...");
  
  let formatado = conteudo;
  
  // Garantir quebras de linha adequadas
  formatado = formatado.replace(/\n{3,}/g, '\n\n'); // M√°ximo 2 quebras
  
  // Garantir que companhias est√£o em negrito
  formatado = formatado.replace(/^(Latam|Gol|Azul|Avianca|Copa Airlines|American Airlines|United|Delta|TAP Portugal)$/gm, '*$1*');
  
  // Garantir separador ida/volta
  if (formatado.includes('ida') && formatado.includes('volta') && !formatado.includes('--')) {
    formatado = formatado.replace(/(?=.*volta)/im, '--\n');
  }
  
  // Remover espa√ßos desnecess√°rios
  formatado = formatado.replace(/\n\s+/g, '\n');
  formatado = formatado.replace(/\s+\n/g, '\n');
  
  // Garantir que n√£o h√° linhas completamente vazias
  formatado = formatado.split('\n').filter(linha => linha.trim() !== '').join('\n');
  
  return formatado.trim();
}

// ================================================================================
// ‚úÖ VALIDA√á√ÉO FINAL DO OR√áAMENTO
// ================================================================================

function validarOrcamentoFinal(conteudo, formData) {
  console.log("‚úÖ Executando valida√ß√£o final...");
  
  const problemas = [];
  const validacao = {
    valido: true,
    problemas: []
  };
  
  // Verificar presen√ßa de elementos obrigat√≥rios
  const verificacoes = [
    {
      test: () => conteudo.includes('R),
      erro: 'Valor em reais n√£o encontrado'
    },
    {
      test: () => /\d{2}:\d{2}/.test(conteudo),
      erro: 'Hor√°rios no formato correto n√£o encontrados'
    },
    {
      test: () => /\d{2}\/\d{2}/.test(conteudo),
      erro: 'Datas no formato correto n√£o encontradas'
    },
    {
      test: () => conteudo.includes('adulto'),
      erro: 'Informa√ß√£o de passageiros n√£o encontrada'
    },
    {
      test: () => conteudo.includes('mala') || conteudo.includes('bagagem'),
      erro: 'Informa√ß√£o de bagagem n√£o encontrada'
    },
    {
      test: () => conteudo.includes('reembols√°vel') || conteudo.includes('N√£o reembols√°vel'),
      erro: 'Informa√ß√£o de reembolso n√£o encontrada'
    }
  ];
  
  // Executar verifica√ß√µes
  verificacoes.forEach(verificacao => {
    if (!verificacao.test()) {
      problemas.push(verificacao.erro);
    }
  });
  
  // Verifica√ß√µes espec√≠ficas por tipo
  if (formData.tipos.some(tipo => tipo.toLowerCase().includes('ida') && tipo.toLowerCase().includes('volta'))) {
    if (!conteudo.includes('--')) {
      problemas.push('Separador ida/volta (--) n√£o encontrado');
    }
  }
  
  // Verificar m√∫ltiplas op√ß√µes
  if (conteudo.includes('OP√á√ÉO') && !conteudo.includes('OP√á√ÉO 1')) {
    problemas.push('Numera√ß√£o de op√ß√µes inconsistente');
  }
  
  // Verificar hor√°rios problem√°ticos
  if (conteudo.match(/\d{1,2}\s+:\s+\d{2}/)) {
    problemas.push('Hor√°rios com espa√ßamento incorreto encontrados');
  }
  
  // Verificar cabe√ßalhos t√©cnicos residuais
  const cabecalhosResiduais = [
    'OR√áAMENTO CVC',
    'TIPOS SELECIONADOS',
    'DADOS DA VIAGEM',
    'REGRAS OBRIGAT√ìRIAS',
    'GERE O OR√áAMENTO'
  ];
  
  cabecalhosResiduais.forEach(cabecalho => {
    if (conteudo.includes(cabecalho)) {
      problemas.push(`Cabe√ßalho t√©cnico residual: ${cabecalho}`);
    }
  });
  
  // Definir resultado da valida√ß√£o
  validacao.valido = problemas.length === 0;
  validacao.problemas = problemas;
  
  if (validacao.valido) {
    console.log("‚úÖ Valida√ß√£o final: APROVADO");
  } else {
    console.warn(`‚ö†Ô∏è Valida√ß√£o final: ${problemas.length} problemas encontrados`);
  }
  
  return validacao;
}

// ================================================================================
// üîÑ FORMATA√á√ÉO B√ÅSICA (FALLBACK)
// ================================================================================

function aplicarFormatacaoBasica(conteudo) {
  console.log("üîÑ Aplicando formata√ß√£o b√°sica (fallback)...");
  
  let basico = conteudo;
  
  // Aplicar apenas formata√ß√µes essenciais
  basico = removerCabecalhosTecnicos(basico);
  basico = formatarHorarios(basico);
  basico = formatarDatas(basico);
  basico = formatarValores(basico);
  basico = formatarParaWhatsApp(basico);
  
  return basico;
}

// ================================================================================
// üéØ FUN√á√ïES ESPEC√çFICAS PARA TIPOS DE OR√áAMENTO
// ================================================================================

function processarOrcamentoAereo(conteudo, dadosVoo) {
  console.log("‚úàÔ∏è Processando or√ßamento a√©reo espec√≠fico...");
  
  let processado = conteudo;
  
  // Garantir estrutura ida/volta se aplic√°vel
  if (dadosVoo.ida && dadosVoo.volta) {
    if (!processado.includes('--')) {
      const partes = processado.split('\n');
      const indiceVolta = partes.findIndex(linha => linha.toLowerCase().includes('volta'));
      if (indiceVolta > 0) {
        partes.splice(indiceVolta, 0, '--');
        processado = partes.join('\n');
      }
    }
  }
  
  // Aplicar convers√£o de aeroportos
  processado = converterAeroportos(processado);
  
  // Garantir formata√ß√£o de hor√°rios
  processado = formatarHorarios(processado);
  
  return processado;
}

function processarOrcamentoCruzeiro(conteudo, dadosCruzeiro) {
  console.log("üö¢ Processando or√ßamento de cruzeiro espec√≠fico...");
  
  let processado = conteudo;
  
  // Garantir emoji de navio no in√≠cio
  if (!processado.startsWith('üö¢')) {
    processado = 'üö¢ ' + processado;
  }
  
  // Formatacao de cabines
  processado = formatarCabinesCruzeiro(processado);
  
  // Adicionar informa√ß√µes obrigat√≥rias se n√£o existirem
  if (!processado.includes('Inclui:')) {
    processado += '\n\n‚úÖ Inclui: hospedagem a bordo, pens√£o completa, entretenimento';
    processado += '\nüö´ N√£o inclui: taxas portu√°rias, bebidas, excurs√µes';
  }
  
  return processado;
}

function processarOrcamentoPacote(conteudo, dadosPacote) {
  console.log("üèñÔ∏è Processando or√ßamento de pacote espec√≠fico...");
  
  let processado = conteudo;
  
  // Garantir estrutura de pacote
  processado = formatarEstruturaPacote(processado);
  
  // Garantir se√ß√£o de voos separada
  if (!processado.includes('Voos')) {
    // Adicionar se√ß√£o de voos se n√£o existir
    const indiceHotel = processado.search(/hotel|hospedagem/i);
    if (indiceHotel > 0) {
      const voosPadrao = '\n‚úàÔ∏è *Voos:*\n[Detalhes dos voos ser√£o inseridos aqui]\n';
      processado = processado.slice(0, indiceHotel) + voosPadrao + processado.slice(indiceHotel);
    }
  }
  
  return processado;
}

// ================================================================================
// üìä M√âTRICAS E LOGS DE QUALIDADE
// ================================================================================

function calcularMetricasQualidade(conteudoOriginal, conteudoProcessado) {
  const metricas = {
    reducao_tamanho: {
      original: conteudoOriginal.length,
      processado: conteudoProcessado.length,
      reducao_percent: ((conteudoOriginal.length - conteudoProcessado.length) / conteudoOriginal.length * 100).toFixed(1)
    },
    formatacao: {
      horarios_corrigidos: (conteudoOriginal.match(/\d{1,2}\s*:\s*\d{2}/g) || []).length,
      aeroportos_convertidos: contarConversoes(conteudoOriginal, conteudoProcessado),
      cabecalhos_removidos: contarCabecalhosRemovidos(conteudoOriginal, conteudoProcessado)
    },
    qualidade: {
      tem_valores: conteudoProcessado.includes('R),
      tem_horarios: /\d{2}:\d{2}/.test(conteudoProcessado),
      tem_datas: /\d{2}\/\d{2}/.test(conteudoProcessado),
      formato_whatsapp: !conteudoProcessado.includes('OR√áAMENTO CVC'),
      emojis_presentes: (conteudoProcessado.match(/[üí∞‚úÖüè∑Ô∏èüì±‚ö†Ô∏è]/g) || []).length
    }
  };
  
  return metricas;
}

function contarConversoes(original, processado) {
  const codigos = ['CGH', 'GRU', 'VCP', 'SDU', 'GIG', 'BSB'];
  let conversoes = 0;
  
  codigos.forEach(codigo => {
    if (original.includes(codigo) && !processado.includes(codigo)) {
      conversoes++;
    }
  });
  
  return conversoes;
}

function contarCabecalhosRemovidos(original, processado) {
  const cabecalhos = ['OR√áAMENTO CVC', 'TIPOS SELECIONADOS', 'DADOS DA VIAGEM'];
  let removidos = 0;
  
  cabecalhos.forEach(cabecalho => {
    if (original.includes(cabecalho) && !processado.includes(cabecalho)) {
      removidos++;
    }
  });
  
  return removidos;
}

// ================================================================================
// üöÄ EXPORTA√á√ÉO E LOGS
// ================================================================================

// Log de inicializa√ß√£o
console.log("‚úÖ Processing v7.0 carregado:");
console.log("üßπ Sistema completo de limpeza");
console.log("üé® Formata√ß√£o autom√°tica avan√ßada");
console.log("‚úÖ Valida√ß√£o em tempo real");
console.log("üì± Otimiza√ß√£o para WhatsApp");
console.log("üîß Corre√ß√µes espec√≠ficas por tipo");

// Exportar fun√ß√µes principais
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    processarRespostaCompleta,
    aplicarFormatacaoCompleta,
    validarOrcamentoFinal,
    formatarParaWhatsApp,
    calcularMetricasQualidade
  };
} else {
  // Browser environment
  window.processarRespostaCompleta = processarRespostaCompleta;
  window.aplicarFormatacaoCompleta = aplicarFormatacaoCompleta;
  window.validarOrcamentoFinal = validarOrcamentoFinal;
  window.formatarParaWhatsApp = formatarParaWhatsApp;
  window.calcularMetricasQualidade = calcularMetricasQualidade;
}

console.log("üöÄ Sistema de Processamento v7.0 - FORMATA√á√ÉO PROFISSIONAL COMPLETA!");