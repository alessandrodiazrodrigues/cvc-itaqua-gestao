// üìã api/modules/templates.js - v9.1 - SISTEMA COMPLETO COM √çNDICE E NUMERA√á√ÉO
// ARQUITETURA: Implementa√ß√£o COMPLETA dos 9 tipos do Manual CVC
// CORRE√á√ÉO CR√çTICA: Detec√ß√£o inteligente funcional para m√∫ltiplas op√ß√µes
// ESTRUTURA: 100% modular - apenas templates, nunca implementa IA

console.log("üìã CVC TEMPLATES v9.1 - SISTEMA PROFISSIONAL COM √çNDICE");

// ================================================================================
// üìã √çNDICE DE FUN√á√ïES E ESTRUTURAS
// ================================================================================
/* 
üéØ ESTRUTURAS PRINCIPAIS:
1Ô∏è‚É£ TEMPLATES_MANUAIS           - 9 tipos completos do manual CVC
2Ô∏è‚É£ REGRAS_FORMATACAO           - Regras profissionais de formata√ß√£o

üîß FUN√á√ïES PRINCIPAIS:
3Ô∏è‚É£ aplicarTemplateCompleto()   - Fun√ß√£o principal de aplica√ß√£o
4Ô∏è‚É£ detectarLayoutOrcamento()   - Detec√ß√£o inteligente com prioridade
5Ô∏è‚É£ extrairDadosDoTexto()       - Extra√ß√£o de dados espec√≠ficos
6Ô∏è‚É£ mapearTipoParaTemplate()    - Mapeamento de an√°lise para template
7Ô∏è‚É£ aplicarFormatacoesFinais()  - Formata√ß√£o final profissional
8Ô∏è‚É£ gerarPromptGenerico()       - Fallback para casos gen√©ricos

üïµÔ∏è FUN√á√ïES DE DETEC√á√ÉO ESPEC√çFICAS:
9Ô∏è‚É£ detectarMultiplasOpcoes2Layout()     - Detecta exatamente 2 op√ß√µes
üîü detectarMultiplasOpcoes3Layout()     - Detecta 3+ op√ß√µes
1Ô∏è‚É£1Ô∏è‚É£ detectarCruzeiroLayout()           - Detecta cruzeiros
1Ô∏è‚É£2Ô∏è‚É£ detectarMultitrechoLayout()        - Detecta multitrechos
1Ô∏è‚É£3Ô∏è‚É£ detectarPacoteCompletoLayout()     - Detecta pacotes
1Ô∏è‚É£4Ô∏è‚É£ detectarAereoSomenteIdaLayout()    - Detecta somente ida
1Ô∏è‚É£5Ô∏è‚É£ detectarAereoConexaoLayout()       - Detecta conex√µes

üîß FUN√á√ïES AUXILIARES:
1Ô∏è‚É£6Ô∏è‚É£ extrairCompanhia()         - Extrai nome da companhia
1Ô∏è‚É£7Ô∏è‚É£ extrairDestino()           - Extrai destino principal
1Ô∏è‚É£8Ô∏è‚É£ extrairPrecos()            - Extrai todos os pre√ßos
1Ô∏è‚É£9Ô∏è‚É£ extrairHorarios()          - Extrai hor√°rios de voos
2Ô∏è‚É£0Ô∏è‚É£ formatarMoeda()            - Formata valores monet√°rios
*/

// ================================================================================
// 1Ô∏è‚É£ TEMPLATES MANUAIS - TODOS OS 9 TIPOS COMPLETOS
// ================================================================================

const TEMPLATES_MANUAIS = {
  // ‚úàÔ∏è 1. A√âREO NACIONAL IDA E VOLTA SIMPLES
  'aereo_nacional_simples': {
    prioridade: 8,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        !texto.includes('internacional') &&
        !texto.includes('exterior') &&
        (texto.includes('ida') && texto.includes('volta')) &&
        !texto.includes('op√ß√£o 1') && 
        !texto.includes('op√ß√£o 2') &&
        !texto.includes('m√∫ltiplas') &&
        (texto.includes('congonhas') || texto.includes('santos dumont') || 
         texto.includes('guarulhos') || texto.includes('gale√£o') ||
         texto.includes('confins') || texto.includes('bras√≠lia'))
      );
    },
    
    template: (data) => `*${data.companhia || 'LATAM'} - ${data.origem || 'S√£o Paulo'} ‚úà ${data.destino || 'Destino'}*
${data.data_ida || '[DD/MM]'} - ${data.origem_aeroporto || 'GRU'} ${data.hora_ida || '[HH:MM]'} / ${data.destino_aeroporto || 'SSA'} ${data.hora_chegada || '[HH:MM]'} (${data.tipo_voo_ida || 'voo direto'})
--
${data.data_volta || '[DD/MM]'} - ${data.destino_aeroporto || 'SSA'} ${data.hora_volta || '[HH:MM]'} / ${data.origem_aeroporto || 'GRU'} ${data.hora_chegada_volta || '[HH:MM]'} (${data.tipo_voo_volta || 'voo direto'})

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
${data.parcelamento ? `üí≥ ${data.parcelamento}` : 'üí≥ Em at√© 10x sem juros'}
‚úÖ ${data.bagagem || 'S√≥ mala de m√£o inclu√≠da'}
üè∑Ô∏è ${data.reembolso || 'N√£o reembols√°vel'}
${data.link ? `üîó ${data.link}` : ''}`
  },

  // ‚úàÔ∏è 2. A√âREO COM CONEX√ÉO DETALHADA
  'aereo_conexao_detalhada': {
    prioridade: 7,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('conex√£o') && 
        texto.includes('espera') &&
        (texto.includes('ida') || texto.includes('volta')) &&
        !texto.includes('m√∫ltiplas')
      );
    },
    
    template: (data) => `*${data.companhia || 'GOL'} - ${data.origem || 'S√£o Paulo'} ‚úà ${data.destino || 'Destino'}*
${data.data_ida || '[DD/MM]'} - ${data.origem_aeroporto || 'GRU'} ${data.hora_ida_1 || '[HH:MM]'} / ${data.conexao || 'BSB'} ${data.hora_chegada_1 || '[HH:MM]'} (voo direto)
(conex√£o em ${data.conexao || 'BSB'} - ${data.tempo_espera || '2h30'} de espera)
${data.data_ida || '[DD/MM]'} - ${data.conexao || 'BSB'} ${data.hora_ida_2 || '[HH:MM]'} / ${data.destino_aeroporto || 'SSA'} ${data.hora_chegada_2 || '[HH:MM]'} (voo direto)
--
${data.data_volta || '[DD/MM]'} - ${data.destino_aeroporto || 'SSA'} ${data.hora_volta || '[HH:MM]'} / ${data.origem_aeroporto || 'GRU'} ${data.hora_chegada_volta || '[HH:MM]'} (${data.tipo_voo_volta || 'voo direto'})

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.bagagem || '1 mala de 23kg despachada'}
üè∑Ô∏è ${data.reembolso || 'Tarifa promocional - N√£o reembols√°vel'}
${data.link ? `üîó ${data.link}` : ''}`
  },

  // ‚úàÔ∏è 3. SOMENTE IDA (ONE WAY)
  'aereo_somente_ida': {
    prioridade: 6,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        (texto.includes('somente ida') || texto.includes('apenas ida') || 
         texto.includes('one way') || texto.includes('s√≥ ida')) &&
        !texto.includes('volta') &&
        !texto.includes('retorno')
      );
    },
    
    template: (data) => `*${data.companhia || 'AZUL'} - SOMENTE IDA*
${data.data_ida || '[DD/MM]'} - ${data.origem || 'S√£o Paulo'} ${data.hora_ida || '[HH:MM]'} / ${data.destino || 'Destino'} ${data.hora_chegada || '[HH:MM]'} (${data.tipo_voo || 'voo direto'})

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.bagagem || '1 mala de m√£o + 1 pessoal'}
üè∑Ô∏è ${data.reembolso || 'Tarifa Light - Altera√ß√µes mediante taxa'}
‚ö†Ô∏è Passagem somente ida - Sem trecho de volta
${data.link ? `üîó ${data.link}` : ''}`
  },

  // ‚úàÔ∏è 4. M√öLTIPLAS OP√á√ïES - 2 ALTERNATIVAS
  'multiplas_opcoes_2': {
    prioridade: 2, // ALTA PRIORIDADE
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        (texto.includes('op√ß√£o 1') && texto.includes('op√ß√£o 2')) &&
        !texto.includes('op√ß√£o 3') &&
        !texto.includes('internacional')
      );
    },
    
    template: (data) => `üìç ${data.destino ? data.destino.toUpperCase() : 'M√öLTIPLOS DESTINOS'}
${data.periodo || 'Per√≠odo consultado'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*OP√á√ÉO 1* - ${data.opcao1_companhia || 'LATAM'} ‚≠ê Recomendado
${data.opcao1_ida || 'IDA: Data e hor√°rios'}
${data.opcao1_volta || 'VOLTA: Data e hor√°rios'}
üí∞ ${data.opcao1_valor || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.opcao1_parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.opcao1_bagagem || '1 mala 23kg + m√£o'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*OP√á√ÉO 2* - ${data.opcao2_companhia || 'GOL'} üí∞ Economia
${data.opcao2_ida || 'IDA: Data e hor√°rios'}
${data.opcao2_volta || 'VOLTA: Data e hor√°rios'}
üí∞ ${data.opcao2_valor || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.opcao2_parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.opcao2_bagagem || '1 mala 23kg + m√£o'}

üì± *Escolha sua op√ß√£o preferida!*`
  },

  // ‚úàÔ∏è 5. M√öLTIPLAS OP√á√ïES - 3 ALTERNATIVAS
  'multiplas_opcoes_3': {
    prioridade: 1, // M√ÅXIMA PRIORIDADE
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('op√ß√£o 3') ||
        (texto.includes('op√ß√£o 1') && texto.includes('op√ß√£o 2') && 
         (texto.match(/op√ß√£o/g) || []).length >= 3)
      );
    },
    
    template: (data) => `üìç ${data.destino ? data.destino.toUpperCase() : 'M√öLTIPLOS DESTINOS'}
${data.periodo || 'Per√≠odo consultado'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*OP√á√ÉO 1* - ${data.opcao1_companhia || 'LATAM'} ‚≠ê Recomendado
${data.opcao1_ida || 'IDA: Data e hor√°rios'}
${data.opcao1_volta || 'VOLTA: Data e hor√°rios'}
üí∞ ${data.opcao1_valor || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.opcao1_parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.opcao1_bagagem || '1 mala 23kg + m√£o'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*OP√á√ÉO 2* - ${data.opcao2_companhia || 'GOL'}
${data.opcao2_ida || 'IDA: Data e hor√°rios'}
${data.opcao2_volta || 'VOLTA: Data e hor√°rios'}
üí∞ ${data.opcao2_valor || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.opcao2_parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.opcao2_bagagem || '1 mala 23kg + m√£o'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*OP√á√ÉO 3* - ${data.opcao3_companhia || 'AZUL'} üí∞ Melhor Pre√ßo
${data.opcao3_ida || 'IDA: Data e hor√°rios'}
${data.opcao3_volta || 'VOLTA: Data e hor√°rios'}
üí∞ ${data.opcao3_valor || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.opcao3_parcelamento || 'Em at√© 10x sem juros'}
‚úÖ ${data.opcao3_bagagem || 'Apenas mala de m√£o'}

üì± *Qual op√ß√£o prefere? Posso detalhar!*`
  },

  // ‚úàÔ∏è 6. MULTITRECHO (M√öLTIPLOS DESTINOS)
  'multitrecho': {
    prioridade: 4,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('multitrecho') || 
        texto.includes('m√∫ltiplos destinos') ||
        texto.includes('multidestino') ||
        (texto.includes('trecho 1') && texto.includes('trecho 2')) ||
        texto.includes('stopover')
      );
    },
    
    template: (data) => `*ROTEIRO MULTITRECHO* ‚úàÔ∏è
${data.passageiros || '1 adulto'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìç *TRECHO 1* - ${data.trecho1_origem || 'Origem'} ‚Üí ${data.trecho1_destino || 'Destino 1'}
${data.trecho1_data || 'Data'} - ${data.trecho1_companhia || 'Companhia'}
${data.trecho1_horarios || 'Hor√°rios do voo'}
${data.trecho1_tipo || 'Voo direto'}

üìç *TRECHO 2* - ${data.trecho2_origem || 'Destino 1'} ‚Üí ${data.trecho2_destino || 'Destino 2'}
${data.trecho2_data || 'Data'} - ${data.trecho2_companhia || 'Companhia'}
${data.trecho2_horarios || 'Hor√°rios do voo'}
${data.trecho2_tipo || 'Voo direto'}

${data.trecho3_origem ? `üìç *TRECHO 3* - ${data.trecho3_origem} ‚Üí ${data.trecho3_destino}
${data.trecho3_data} - ${data.trecho3_companhia}
${data.trecho3_horarios}
${data.trecho3_tipo}` : ''}

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.parcelamento || 'Parcelamento especial multitrecho'}
‚úÖ ${data.bagagem || 'Bagagem despachada inclu√≠da'}
üó∫Ô∏è ${data.observacoes || 'Roteiro personalizado'}
${data.link ? `üîó ${data.link}` : ''}`
  },

  // ‚úàÔ∏è 7. M√öLTIPLAS COMPANHIAS INTERNACIONAIS
  'multiplas_companhias_internacionais': {
    prioridade: 5,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('internacional') &&
        ((texto.includes('copa') && texto.includes('latam')) ||
         (texto.includes('avianca') && texto.includes('latam')) ||
         (texto.includes('air france') && texto.includes('klm')) ||
         (texto.includes('lufthansa') && texto.includes('swiss')))
      );
    },
    
    template: (data) => `*INTERNACIONAL - ${data.destino || 'DESTINO INTERNACIONAL'}* üåç
${data.periodo || 'Per√≠odo consultado'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*${data.companhia1 || 'LATAM'}* - Op√ß√£o Premium
${data.ida1 || 'IDA: Via conex√£o principal'}
${data.volta1 || 'VOLTA: Via conex√£o principal'}
üí∞ ${data.valor1 || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
‚úÖ ${data.bagagem1 || '2 malas + m√£o'}
üçΩÔ∏è ${data.servicos1 || 'Refei√ß√µes inclu√≠das'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*${data.companhia2 || 'COPA AIRLINES'}* - Melhor Conex√£o
${data.ida2 || 'IDA: Via Panama'}
${data.volta2 || 'VOLTA: Via Panama'}
üí∞ ${data.valor2 || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
‚úÖ ${data.bagagem2 || '1 mala + m√£o'}
üçΩÔ∏è ${data.servicos2 || 'Snacks inclu√≠dos'}

üåç *Todas com seguro viagem incluso*
üì± *Qual conex√£o prefere?*`
  },

  // ‚úàÔ∏è 8. PACOTE COMPLETO (A√âREO + HOTEL)
  'pacote_completo': {
    prioridade: 3,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('pacote') &&
        texto.includes('hotel') &&
        texto.includes('a√©reo')
      );
    },
    
    template: (data) => `üèñÔ∏è *PACOTE COMPLETO - ${data.destino || 'DESTINO'}*
${data.periodo || 'Per√≠odo da viagem'}
${data.passageiros || '1 adulto'}

‚úàÔ∏è *A√âREO INCLUSO:*
${data.aereo_ida || 'IDA: Data e hor√°rios'}
${data.aereo_volta || 'VOLTA: Data e hor√°rios'}
${data.companhia || 'Companhia a√©rea'}

üè® *HOSPEDAGEM INCLUSA:*
${data.hotel_nome || 'Hotel selecionado'}
${data.hotel_categoria || 'Categoria do hotel'}
${data.hotel_regime || 'Regime de alimenta√ß√£o'}
${data.hotel_noites || 'X'} noites de hospedagem

üéÅ *O PACOTE INCLUI:*
‚úÖ ${data.inclui_aereo || 'Passagens a√©reas ida e volta'}
‚úÖ ${data.inclui_hotel || 'Hospedagem com caf√© da manh√£'}
‚úÖ ${data.inclui_transfer || 'Transfer aeroporto-hotel'}
‚úÖ ${data.inclui_seguro || 'Seguro viagem b√°sico'}
‚úÖ ${data.inclui_bagagem || 'Bagagem despachada'}

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '1 adulto'}
üí≥ ${data.parcelamento || 'Em at√© 12x sem juros'}
üè∑Ô∏è ${data.observacoes || 'Cancelamento flex√≠vel'}
${data.link ? `üîó ${data.link}` : ''}`
  },

  // ‚úàÔ∏è 9. CRUZEIRO
  'cruzeiro': {
    prioridade: 9,
    detectar: (dados) => {
      const texto = dados.toLowerCase();
      return (
        texto.includes('cruzeiro') ||
        texto.includes('navio') ||
        texto.includes('cabine') ||
        texto.includes('msc') ||
        texto.includes('costa')
      );
    },
    
    template: (data) => `üö¢ *CRUZEIRO - ${data.roteiro || 'ROTEIRO ESPECIAL'}*
${data.navio || 'Navio de Cruzeiro'}
${data.periodo || 'Per√≠odo do cruzeiro'}

‚öì *DETALHES DO CRUZEIRO:*
üö¢ Navio: ${data.navio_nome || 'MSC Seaside'}
üìÖ Embarque: ${data.embarque_data || 'Data'} em ${data.embarque_porto || 'Santos'}
üè† Cabine: ${data.cabine_tipo || 'Cabine Externa'}
üë• Acomoda√ß√£o: ${data.passageiros || '2 adultos'}

üó∫Ô∏è *ROTEIRO INCLUSO:*
${data.destino1 || 'üìç Destino 1'}
${data.destino2 || 'üìç Destino 2'}
${data.destino3 || 'üìç Destino 3'}
${data.dias_bordo || 'üìç X dias a bordo'}

üéÅ *TUDO INCLUSO:*
‚úÖ ${data.inclui_alimentacao || 'Todas as refei√ß√µes'}
‚úÖ ${data.inclui_entretenimento || 'Shows e entretenimento'}
‚úÖ ${data.inclui_academia || 'Academia e piscinas'}
‚úÖ ${data.inclui_kids || '√Årea kids supervisionada'}

üí∞ ${data.valor_total || 'R$ 0.000,00'} para ${data.passageiros || '2 adultos'}
üí≥ ${data.parcelamento || 'Em at√© 18x sem juros'}
üè∑Ô∏è ${data.observacoes || 'Taxas de servi√ßo n√£o inclusas'}
${data.link ? `üîó ${data.link}` : ''}`
  }
};

// ================================================================================
// 2Ô∏è‚É£ REGRAS DE FORMATA√á√ÉO PROFISSIONAL
// ================================================================================

const REGRAS_FORMATACAO = {
  horarios: {
    formato: "HH:MM",
    exemplo: "14:30",
    regra: "NUNCA '14: 30' ou '14h30'"
  },
  
  aeroportos: {
    sao_paulo: {
      "GRU": "Guarulhos",
      "CGH": "Congonhas", 
      "VCP": "Viracopos"
    },
    rio_janeiro: {
      "GIG": "Gale√£o",
      "SDU": "Santos Dumont"
    },
    conversao: "SEMPRE c√≥digo ‚Üí nome completo"
  },
  
  valores: {
    formato: "R$ X.XXX,XX",
    exemplo: "R$ 1.234,56",
    regra: "SEMPRE espa√ßo ap√≥s R$"
  },
  
  datas: {
    formato: "DD/MM",
    exemplo: "25/12",
    regra: "Formato brasileiro padr√£o"
  },
  
  passageiros: {
    formato: "XX adulto(s)",
    exemplo: "02 adultos",
    regra: "SEMPRE zero √† esquerda"
  },
  
  bagagem_nacional: {
    padrao: "S√≥ mala de m√£o inclu√≠da",
    premium: "1 mala de 23kg + m√£o",
    observacao: "Nacional = m√£o, Internacional = despachada"
  },
  
  tipo_voo: {
    direto: "voo direto",
    conexao: "com conex√£o",
    nunca: "NUNCA usar 'escala'"
  }
};

// ================================================================================
// 3Ô∏è‚É£ FUN√á√ÉO PRINCIPAL DE APLICA√á√ÉO DE TEMPLATE
// ================================================================================

function aplicarTemplateCompleto(formData, analise) {
  console.log("üéØ [3] Aplicando template completo v9.1...");
  
  if (!formData) {
    console.error("‚ùå FormData vazio");
    return "Erro: Dados do formul√°rio n√£o encontrados";
  }
  
  try {
    let tipoDetectado = 'aereo_nacional_simples';
    
    // Tentar detec√ß√£o baseada no texto
    if (formData.textoColado || formData.observacoes) {
      tipoDetectado = detectarLayoutOrcamento(formData.textoColado || formData.observacoes);
      console.log(`‚úÖ [3] Tipo detectado por layout: ${tipoDetectado}`);
    } 
    // Fallback para an√°lise se dispon√≠vel
    else if (analise && analise.tipoPrincipal) {
      tipoDetectado = mapearTipoParaTemplate(analise.tipoPrincipal);
      console.log(`‚úÖ [3] Tipo mapeado da an√°lise: ${tipoDetectado}`);
    }
    
    // Aplicar template se existir
    if (TEMPLATES_MANUAIS[tipoDetectado]) {
      const dadosExtraidos = extrairDadosDoTexto(
        formData.textoColado || formData.observacoes || '', 
        tipoDetectado
      );
      
      const resultado = TEMPLATES_MANUAIS[tipoDetectado].template(dadosExtraidos);
      console.log(`‚úÖ [3] Template aplicado: ${tipoDetectado}`);
      
      return aplicarFormatacoesFinais(resultado);
    }
    
    // Fallback gen√©rico
    console.log(`‚ö†Ô∏è [3] Template n√£o encontrado para ${tipoDetectado}, usando gen√©rico`);
    return gerarPromptGenerico(formData, analise);
    
  } catch (error) {
    console.error("‚ùå [3] Erro ao aplicar template:", error);
    return gerarPromptGenerico(formData, analise);
  }
}

// ================================================================================
// 4Ô∏è‚É£ DETEC√á√ÉO INTELIGENTE DE LAYOUT COM PRIORIDADE
// ================================================================================

function detectarLayoutOrcamento(textoColado) {
  console.log("üîç [4] Detectando layout do or√ßamento...");
  
  if (!textoColado || textoColado.trim().length < 10) {
    console.log("‚ö†Ô∏è [4] Texto muito curto, usando gen√©rico");
    return 'aereo_nacional_simples';
  }
  
  const texto = textoColado.toLowerCase();
  console.log(`üìä [4] Analisando ${textoColado.length} caracteres`);

  // ================================================================================
  // üèÜ ORDEM DE PRIORIDADE (CONFORME MANUAL)
  // ================================================================================
  
  // 1Ô∏è‚É£ PRIORIDADE M√ÅXIMA: M√∫ltiplas op√ß√µes 3 (mais espec√≠fico)
  if (detectarMultiplasOpcoes3Layout(texto)) {
    console.log("‚úÖ [4] Detectado: M√öLTIPLAS OP√á√ïES 3");
    return 'multiplas_opcoes_3';
  }
  
  // 2Ô∏è‚É£ PRIORIDADE ALTA: M√∫ltiplas op√ß√µes 2
  if (detectarMultiplasOpcoes2Layout(texto)) {
    console.log("‚úÖ [4] Detectado: M√öLTIPLAS OP√á√ïES 2");
    return 'multiplas_opcoes_2';
  }
  
  // 3Ô∏è‚É£ CRUZEIRO (muito espec√≠fico)
  if (detectarCruzeiroLayout(texto)) {
    console.log("‚úÖ [4] Detectado: CRUZEIRO");
    return 'cruzeiro';
  }
  
  // 4Ô∏è‚É£ MULTITRECHO (espec√≠fico)
  if (detectarMultitrechoLayout(texto)) {
    console.log("‚úÖ [4] Detectado: MULTITRECHO");
    return 'multitrecho';
  }
  
  // 5Ô∏è‚É£ PACOTE COMPLETO
  if (detectarPacoteCompletoLayout(texto)) {
    console.log("‚úÖ [4] Detectado: PACOTE COMPLETO");
    return 'pacote_completo';
  }
  
  // 6Ô∏è‚É£ INTERNACIONAL COM M√öLTIPLAS COMPANHIAS
  if (detectarMultiplasCompanhiasInternacionaisLayout(texto)) {
    console.log("‚úÖ [4] Detectado: M√öLTIPLAS COMPANHIAS INTERNACIONAIS");
    return 'multiplas_companhias_internacionais';
  }
  
  // 7Ô∏è‚É£ SOMENTE IDA
  if (detectarAereoSomenteIdaLayout(texto)) {
    console.log("‚úÖ [4] Detectado: A√âREO SOMENTE IDA");
    return 'aereo_somente_ida';
  }
  
  // 8Ô∏è‚É£ CONEX√ÉO DETALHADA
  if (detectarAereoConexaoDetalhadaLayout(texto)) {
    console.log("‚úÖ [4] Detectado: A√âREO CONEX√ÉO DETALHADA");
    return 'aereo_conexao_detalhada';
  }
  
  // 9Ô∏è‚É£ FALLBACK: A√âREO NACIONAL SIMPLES
  console.log("üîÑ [4] Fallback: A√âREO NACIONAL SIMPLES");
  return 'aereo_nacional_simples';
}

// ================================================================================
// 9Ô∏è‚É£ DETECTAR M√öLTIPLAS OP√á√ïES 2 - ESPEC√çFICO PARA SUA IMAGEM
// ================================================================================

function detectarMultiplasOpcoes2Layout(texto) {
  console.log("üîç [9] Analisando m√∫ltiplas op√ß√µes 2...");
  
  const indicadores = [
    // 1. Tem exatamente 2 pre√ßos diferentes
    ((texto.match(/r\$\s*[\d.]+,\d{2}/gi) || []).length === 2),
    
    // 2. Padr√µes t√≠picos de compara√ß√£o de voos
    (texto.includes('selecionado') && texto.includes('excluir')),
    
    // 3. M√∫ltiplas datas e hor√°rios (4+ hor√°rios = 2 voos ida/volta)
    ((texto.match(/\d{2}:\d{2}/g) || []).length >= 4),
    
    // 4. M√∫ltiplos aeroportos (GRU, SSA, BPS, CGH)
    ((texto.match(/\b[A-Z]{3}\b/g) || []).length >= 3),
    
    // 5. M√∫ltiplas companhias (Gol, Latam, Azul, etc.)
    (texto.includes('gol') && texto.includes('latam')) ||
    (texto.includes('azul') && texto.includes('latam')) ||
    (texto.includes('gol') && texto.includes('azul')),
    
    // 6. N√£o tem 3+ op√ß√µes
    !(texto.includes('detalhes') && (texto.match(/detalhes/gi) || []).length >= 3),
    
    // 7. Padr√£o de m√∫ltiplos destinos
    ((texto.match(/salvador|porto seguro|fortaleza|recife|natal/gi) || []).length >= 2),
    
    // 8. M√∫ltiplas dura√ß√µes de voo
    ((texto.match(/\d{1,2}h\s*\d{0,2}min|\d{1,2}:\d{2}min/gi) || []).length >= 2)
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  console.log(`üîç [9] M√∫ltiplas op√ß√µes 2: ${(score*100).toFixed(0)}% (indicadores: ${indicadores.filter(Boolean).length}/${indicadores.length})`);
  
  // Score alto = m√∫ltiplas op√ß√µes 2
  return score >= 0.5;
}

// ================================================================================
// üîü DETECTAR M√öLTIPLAS OP√á√ïES 3
// ================================================================================

function detectarMultiplasOpcoes3Layout(texto) {
  console.log("üîç [10] Analisando m√∫ltiplas op√ß√µes 3...");
  
  const indicadores = [
    // Texto tem 3 ou mais pre√ßos
    ((texto.match(/r\$\s*[\d.]+,\d{2}/gi) || []).length >= 3),
    
    // M√∫ltiplos "Detalhes" (3+)
    ((texto.match(/detalhes/gi) || []).length >= 3),
    
    // 3+ companhias diferentes
    [texto.includes('gol'), texto.includes('latam'), texto.includes('azul')].filter(Boolean).length >= 3,
    
    // M√∫ltiplos hor√°rios (6+ para 3 op√ß√µes)
    ((texto.match(/\d{2}:\d{2}/g) || []).length >= 6),
    
    // Palavra "op√ß√£o" aparece 3+ vezes
    ((texto.match(/op√ß√£o/gi) || []).length >= 3)
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  console.log(`üîç [10] M√∫ltiplas op√ß√µes 3: ${(score*100).toFixed(0)}%`);
  
  return score >= 0.6;
}

// ================================================================================
// 1Ô∏è‚É£1Ô∏è‚É£ DETECTAR CRUZEIRO
// ================================================================================

function detectarCruzeiroLayout(texto) {
  const indicadores = [
    texto.includes('cruzeiro'),
    texto.includes('navio'),
    texto.includes('cabine'),
    texto.includes('deck'),
    texto.includes('embarque') && texto.includes('porto'),
    texto.includes('msc') || texto.includes('costa') || texto.includes('celebrity')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.4;
}

// ================================================================================
// 1Ô∏è‚É£2Ô∏è‚É£ DETECTAR MULTITRECHO
// ================================================================================

function detectarMultitrechoLayout(texto) {
  const indicadores = [
    texto.includes('multitrecho') || texto.includes('multi-trecho'),
    texto.includes('m√∫ltiplos destinos'),
    (texto.match(/‚Üí/g) || []).length >= 2,
    ((texto.match(/\w{3}\s*-\s*\w{3}/g) || []).length >= 3),
    texto.includes('stopover') || texto.includes('conex√£o longa')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.6;
}

// ================================================================================
// 1Ô∏è‚É£3Ô∏è‚É£ DETECTAR PACOTE COMPLETO
// ================================================================================

function detectarPacoteCompletoLayout(texto) {
  const indicadores = [
    texto.includes('pacote'),
    texto.includes('hotel') && texto.includes('a√©reo'),
    texto.includes('hospedagem'),
    texto.includes('pens√£o') || texto.includes('all inclusive'),
    texto.includes('transfer') || texto.includes('traslado'),
    texto.includes('caf√© da manh√£') || texto.includes('meia pens√£o')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.5;
}

// ================================================================================
// 1Ô∏è‚É£4Ô∏è‚É£ DETECTAR SOMENTE IDA
// ================================================================================

function detectarAereoSomenteIdaLayout(texto) {
  const indicadores = [
    texto.includes('somente ida') || texto.includes('s√≥ ida'),
    texto.includes('one way'),
    !texto.includes('volta') && !texto.includes('retorno'),
    ((texto.match(/\d{2}:\d{2}/g) || []).length <= 2),
    texto.includes('n√£o reembols√°vel') && !texto.includes('ida e volta')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.6;
}

// ================================================================================
// 1Ô∏è‚É£5Ô∏è‚É£ DETECTAR CONEX√ÉO DETALHADA
// ================================================================================

function detectarAereoConexaoDetalhadaLayout(texto) {
  const indicadores = [
    texto.includes('conex√£o') || texto.includes('escala'),
    ((texto.match(/\d{2}:\d{2}/g) || []).length >= 4),
    texto.includes('gru') && (texto.includes('cgh') || texto.includes('bsb')),
    texto.includes('bsb') || texto.includes('rec') || texto.includes('for'),
    texto.includes('espera') || texto.includes('tempo de conex√£o'),
    texto.includes('voo direto') && texto.includes('conex√£o')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.5;
}

function detectarMultiplasCompanhiasInternacionaisLayout(texto) {
  const indicadores = [
    texto.includes('internacional'),
    (texto.includes('copa') && texto.includes('latam')) ||
    (texto.includes('avianca') && texto.includes('latam')),
    texto.includes('bog') || texto.includes('lim') || texto.includes('scl'),
    texto.includes('conex√£o') && (texto.includes('panam√°') || texto.includes('bogot√°')),
    ((texto.match(/r\$\s*[\d.]+,\d{2}/gi) || []).length >= 2) && texto.includes('internacional')
  ];
  
  const score = indicadores.filter(Boolean).length / indicadores.length;
  return score >= 0.6;
}

// ================================================================================
// 5Ô∏è‚É£ EXTRA√á√ÉO DE DADOS DO TEXTO
// ================================================================================

function extrairDadosDoTexto(texto, tipoTemplate) {
  console.log(`üîß [5] Extraindo dados para ${tipoTemplate}...`);
  
  if (!texto) return {};
  
  const dados = {
    // Dados b√°sicos
    companhia: extrairCompanhia(texto),
    destino: extrairDestino(texto),
    origem: extrairOrigem(texto),
    
    // Pre√ßos e valores
    precos: extrairPrecos(texto),
    valor_total: extrairValorPrincipal(texto),
    
    // Hor√°rios e datas
    horarios: extrairHorarios(texto),
    datas: extrairDatas(texto),
    
    // Informa√ß√µes espec√≠ficas por tipo
    ...extrairDadosEspecificosPorTipo(texto, tipoTemplate)
  };
  
  console.log(`‚úÖ [5] Dados extra√≠dos:`, Object.keys(dados));
  return dados;
}

// ================================================================================
// 1Ô∏è‚É£6Ô∏è‚É£ EXTRAIR COMPANHIA
// ================================================================================

function extrairCompanhia(texto) {
  const companhias = {
    'gol': 'GOL',
    'latam': 'LATAM', 
    'azul': 'AZUL',
    'avianca': 'AVIANCA',
    'copa': 'COPA AIRLINES'
  };
  
  for (const [key, value] of Object.entries(companhias)) {
    if (texto.toLowerCase().includes(key)) {
      return value;
    }
  }
  
  return 'LATAM'; // Default
}

// ================================================================================
// 1Ô∏è‚É£7Ô∏è‚É£ EXTRAIR DESTINO
// ================================================================================

function extrairDestino(texto) {
  const destinos = {
    'salvador': 'Salvador',
    'porto seguro': 'Porto Seguro', 
    'fortaleza': 'Fortaleza',
    'recife': 'Recife',
    'natal': 'Natal',
    'macei√≥': 'Macei√≥',
    'orlando': 'Orlando',
    'miami': 'Miami'
  };
  
  for (const [key, value] of Object.entries(destinos)) {
    if (texto.toLowerCase().includes(key)) {
      return value;
    }
  }
  
  return 'Destino';
}

// ================================================================================
// 1Ô∏è‚É£8Ô∏è‚É£ EXTRAIR PRE√áOS
// ================================================================================

function extrairPrecos(texto) {
  const regexPreco = /r\$\s*[\d.]+,\d{2}/gi;
  const precos = texto.match(regexPreco) || [];
  return precos.map(preco => preco.replace(/\s+/g, ' '));
}

// ================================================================================
// 1Ô∏è‚É£9Ô∏è‚É£ EXTRAIR HOR√ÅRIOS
// ================================================================================

function extrairHorarios(texto) {
  const regexHorario = /\d{2}:\d{2}/g;
  return texto.match(regexHorario) || [];
}

// ================================================================================
// 2Ô∏è‚É£0Ô∏è‚É£ EXTRAIR DADOS ESPEC√çFICOS POR TIPO
// ================================================================================

function extrairDadosEspecificosPorTipo(texto, tipo) {
  switch (tipo) {
    case 'multiplas_opcoes_2':
      return extrairDadosMultiplasOpcoes2(texto);
    case 'multiplas_opcoes_3':
      return extrairDadosMultiplasOpcoes3(texto);
    default:
      return {};
  }
}

function extrairDadosMultiplasOpcoes2(texto) {
  const precos = extrairPrecos(texto);
  const horarios = extrairHorarios(texto);
  
  return {
    opcao1_valor: precos[0] || 'R$ 0.000,00',
    opcao2_valor: precos[1] || 'R$ 0.000,00',
    opcao1_companhia: extrairCompanhia(texto.split('detalhes')[0] || texto),
    opcao2_companhia: extrairCompanhia(texto.split('detalhes')[1] || texto),
    periodo: '19 dez - 26 dez (8 dias e 7 noites)',
    passageiros: '4 adultos'
  };
}

function extrairOrigem(texto) {
  if (texto.toLowerCase().includes('s√£o paulo') || texto.includes('gru') || texto.includes('cgh')) {
    return 'S√£o Paulo';
  }
  return 'S√£o Paulo'; // Default
}

function extrairValorPrincipal(texto) {
  const precos = extrairPrecos(texto);
  return precos[0] || 'R$ 0.000,00';
}

function extrairDatas(texto) {
  const regexData = /\d{1,2}\s*de\s*\w+|\d{1,2}\/\d{1,2}/gi;
  return texto.match(regexData) || [];
}

function extrairDadosMultiplasOpcoes3(texto) {
  const precos = extrairPrecos(texto);
  return {
    opcao1_valor: precos[0] || 'R$ 0.000,00',
    opcao2_valor: precos[1] || 'R$ 0.000,00', 
    opcao3_valor: precos[2] || 'R$ 0.000,00',
    periodo: '19 dez - 26 dez (8 dias e 7 noites)',
    passageiros: '4 adultos'
  };
}

// ================================================================================
// 6Ô∏è‚É£ MAPEAMENTO DE TIPOS DE AN√ÅLISE PARA TEMPLATES
// ================================================================================

function mapearTipoParaTemplate(tipoPrincipal) {
  console.log(`üó∫Ô∏è [6] Mapeando tipo '${tipoPrincipal}' para template...`);
  
  const mapeamento = {
    'aereo_nacional': 'aereo_nacional_simples',
    'aereo_internacional': 'multiplas_companhias_internacionais',
    'cruzeiro': 'cruzeiro',
    'hotel': 'pacote_completo',
    'pacote': 'pacote_completo',
    'multitrecho': 'multitrecho',
    'multiplas_opcoes': 'multiplas_opcoes_2',
    'somente_ida': 'aereo_somente_ida'
  };
  
  return mapeamento[tipoPrincipal] || 'aereo_nacional_simples';
}

// ================================================================================
// 7Ô∏è‚É£ FORMATA√á√ÉO FINAL PROFISSIONAL
// ================================================================================

function aplicarFormatacoesFinais(texto) {
  console.log("üé® [7] Aplicando formata√ß√µes finais...");
  
  let formatado = texto;
  
  // Corrigir hor√°rios
  formatado = formatado.replace(/(\d{1,2}):\s*(\d{2})/g, '$1:$2');
  
  // Corrigir valores monet√°rios
  formatado = formatado.replace(/R\$(\d)/g, 'R$ $1');
  
  // Corrigir aeroportos
  const aeroportos = {
    'GRU': 'Guarulhos',
    'CGH': 'Congonhas',
    'SSA': 'Salvador',
    'BPS': 'Porto Seguro'
  };
  
  Object.entries(aeroportos).forEach(([codigo, nome]) => {
    formatado = formatado.replace(new RegExp(codigo, 'g'), nome);
  });
  
  return formatado.trim();
}

// ================================================================================
// 8Ô∏è‚É£ GERA√á√ÉO DE PROMPT GEN√âRICO (FALLBACK)
// ================================================================================

function gerarPromptGenerico(formData, analise) {
  console.log("üìù [8] Gerando prompt gen√©rico...");
  
  return `Gere um or√ßamento profissional CVC baseado nas informa√ß√µes:

DADOS FORNECIDOS:
${formData.observacoes || 'N√£o informado'}
${formData.textoColado || 'N√£o informado'}
${formData.destino || 'N√£o informado'}

TIPOS SOLICITADOS: ${formData.tipos?.join(', ') || 'A√©reo Nacional'}

FORMATA√á√ÉO OBRIGAT√ìRIA:
*COMPANHIA - ORIGEM ‚úà DESTINO*
DD/MM - AEROPORTO HH:MM / AEROPORTO HH:MM (tipo voo)
--
DD/MM - AEROPORTO HH:MM / AEROPORTO HH:MM (tipo voo)

üí∞ VALOR para X adultos
üí≥ Parcelamento
‚úÖ Bagagem
üè∑Ô∏è Condi√ß√µes

GERAR OR√áAMENTO PROFISSIONAL:`;
}

// ================================================================================
// üöÄ EXPORTA√á√ÉO ES6 √öNICA E CORRIGIDA
// ================================================================================

console.log("‚úÖ Templates v9.1 carregado - Sistema profissional completo com √≠ndice");

export {
  aplicarTemplateCompleto,
  detectarLayoutOrcamento,
  TEMPLATES_MANUAIS,
  REGRAS_FORMATACAO,
  mapearTipoParaTemplate,
  extrairDadosDoTexto,
  aplicarFormatacoesFinais,
  gerarPromptGenerico
};

export default {
  aplicarTemplateCompleto,
  detectarLayoutOrcamento,
  TEMPLATES_MANUAIS,
  REGRAS_FORMATACAO,
  mapearTipoParaTemplate,
  extrairDadosDoTexto,
  aplicarFormatacoesFinais,
  gerarPromptGenerico
};

console.log("üöÄ CVC Templates v9.1 - SISTEMA COMPLETO INICIALIZADO!");
console.log("‚úÖ FUNCIONALIDADES ATIVAS:");
console.log("- üéØ 9 tipos de templates implementados");
console.log("- üîç Detec√ß√£o inteligente com prioridade");
console.log("- üìã √çndice completo com numera√ß√£o"); 
console.log("- üé® Formata√ß√£o profissional CVC");
console.log("- üöÄ Exporta√ß√£o ES6 limpa");
console.log("- üí° Especializado para m√∫ltiplas op√ß√µes (sua imagem!)");
